%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 12/13/2021
%%BoundingBox: 0 0 672 400
%%HiResBoundingBox: 0 0 671.0806 400
%%CropBox: 0 0 671.0806 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 21689 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA8
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1CAA7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1CAA7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CFA8FFCACFA8CAA8A8A7CAA8CAA7CAA8CAA7CAA8A8A7CAA8FF
%CAFFCACAA8CAA8CAA7CAA8CAA7CAA8CAA7CAA8A8A7CAA8FFA8FFCACAA8CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8A8A8CAA8CFA8FFCACAA8CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8A8A8CFCAFFA8FFA8CAA8CAA8CAA7CAA8CAA7CAA8CAA7A1
%A8A1A8A1A8A1A8A1A8A1A8A8CFA8CAA8CFA8CAA8CAA7A8A1A8A1A8A1A8A1
%A8A1A8A7CAA8FF7D7652A8CACAA8CAA1A8A1A8A1A8A1A8A1A8A1A8A7CAA8
%FFA7C3A0CAA8CAA8A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8CFA8CAA8CFA8
%CAA8A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8CA9AC3A8CFA8CAA7A8A1A8A1
%A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CFCAFFCAFFA8FFCAFFA8FFCACF
%A8CAA8CAA8CAA8CAA8CAA8FFCAFF76FD04F8A8CAFFCACFA8CAA8CAA8CAA8
%CAA8CAA8FFCAFFC3BC99BC99CAA8FFCACAA8CAA8CAA8CAA8CAA8CAA8FFCA
%FFCAFFCAFFCAFFA8FFCACAA8CAA8CAA8CAA8CAA8CACAFFA8FF9ABB93CAFF
%FFCAFFA8CAA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A1CAA8CAA8CFA8CA
%A1CAA8CAA8CFA8CAA1A8A7A8A1A8A7A8A1CFA8CF7D2020F8F8F827FFA8CF
%A8CAA1A8A7A8A1A8A7A8A7CFA8CFA7BC99BB99BB9ACFA8CFA8A8A1A8A7A8
%A1A8A7A8A8CFA8CAA8CFA87652CFA8CAA8CFA8A8A1A8A7A8A1A8A7A8A8CF
%A8CAA8C299BB99C3A8CAA8CFA8A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8
%CAA8FFCAFFA8CA9ABB99C3CACFA8FFCACAA7CAA8CAA7CAA8CAA8FFFF52F8
%9AFD04F8A8FFA8FFCACAA7CAA8CAA7CAA8CFA8FFCAC393BC9A769A9ACAFF
%A8FFCACAA7CAA8CAA7CAA8CFA8FFCAFF7DF8F8F852FFCACFA8FFA8A8A7CA
%A8CAA7CAA8FFA8FFCAFFA1C29A9999CACACFA8FFA8A8A7CAA8CAA7CAA8A1
%A8A1A8A1A8A1A8A8CAA8CFA8BC93BB939A9ACAA8CAA8CFA8A8A1A8A1A8A1
%A8A8CAA8FF27279A762720F87DCACFA8CFA8A8A1A8A1A8A1CAA8CAA8CA9A
%9A9AC3767699C3A8CAA8CFA8A8A1A8A1A8A1CAA8CAA8CACAA144F8F8F852
%FFA8CAA8CAA7A8A1A8A1A8A1CAA8CAA8CAA8FFA1A89ABB99CAA8CAA8CAA1
%A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8FFCAFFCACA99BCBBBC76A1A8FFA8FF
%CAFFA8CAA8CAA8CAA8FFA8FFCF524BA1C3CA7676F84BA1FFCAFFA8CAA8CA
%A8CAA8FFA8FFCAC276A1C3C376C2C2FFA8FFCACFA8CAA8CAA8CACAFFA8FF
%CAFFA09A4B27F852FFFFA8FFCACAA8CAA8CAA8CACAFFA8FFCAFFA8CACAFF
%C3C3CAFFA8FFCACAA8CAA8CAA8CAA8A7A8A1A8A7A8A1CAA8CAA8CA99BC6F
%9AC3A075CAA8CAA8CFA8CAA1A8A7A8A1CAA8CAA8FF27769A76C3C34BF8F8
%F87DFFA8A8A1A8A7A8A1CFA8CAA8CF99BC9AC3A0A199C2A8CAA8CFA8A8A1
%A8A7A8A7CFA8CAA8CFCA766FC26F2052FFA8CAA8CFA8A8A1A8A7A8A8CFA8
%CAA8CFA8C976A1C37676FFA8CAA8CFA8A8A1A8A7A8A1A8CAA8CAA7CAA8A8
%A8FFCAFFA7BCBCCAA1C99AC3CAFFCACFA8FFA8A8A7CAA8A8A8FFCAFF76F8
%27A176C327FD04F827A8FFA8A8A7CAA8CAA8FFCAFFA8C2BBC276769ABC99
%FFCACFA8FFA8CAA7CAA8CAA8FFCACFA8CF9A9ABC9A9AFFA8FFCACFA8CFA8
%CAA7CAA8CAA8FFCACFA8FFC9C3A0C3C3CAA8FFCACFA8CAA8CAA7CAA8CAA7
%A1A8A1A8A1A8A1A8A8CAA8C392C2A8CA9AA1A1CAA8CAA8CAA8CAA1A8A1A8
%A1CAA8CACA52F820279AA1762020F8F8F8A1A8CAA1A8A1A8A7CAA8CAA8CA
%7575A0CAA1A14B76A1FFA8CAA8A8A1A8A1A8A7CAA8CAA8CAA8C3999AA0CF
%A8CAA8CAA8CAA8A8A1A8A1A8A8CAA8CAA8CAA8CA76769ACAA8CFA8CAA8CA
%A7A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8FFCAFFA1BCA1CFA1C376A8CAFFCA
%FFA8FFA8CAA8CAA8CAA8FFCAFF7C99BBC39BC3BCC2BB9A20F87DFFA8CAA8
%CAA8CAA8FFCAFF767652767CA776765176A8FFCAFFA8CAA8CAA8CAA8FFCA
%FFCAFFA27599C9A8FFCAFFCAFFCACFA8CAA8CAA8CACAFFCAFFA8A77DC9C3
%CA7C7DA7FFCAFFA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A8CFA8CA99C2
%C2A0A1C4A0C9A8FFA8CAA8CAA7A8A1A8A7A8A8FFA1BCBBC2BBBBBBBCBBBC
%BBC24BA1A8A8A7A8A1A8A7CAA8FF76514B7651524B765152517CA8CFA8A8
%A7A8A1A8A7CAA8CFCAA2547EA1A1535454A8A8CFA8CAA7A8A7A8A1A8A8CA
%A8FFA7582D587C7D52522D2D58FFA8CAA1A8A7A8A1A8A7A8CAA7CAA8CAA7
%CAA8CAA8FFCAC8C1C8C2C8C2C8C1C9A8FFCACAA7CAA8CAA7CAA8CFC3C2BB
%C2BBC2BBC2BBC2BBC2BBC2C3CAA7CAA8CAA7CAA8FFA17652765176527651
%76517D76A1CACAA7CAA8CAA7CAA8FFCAA95478547F5479547F54A2CAFFA8
%A8A7CAA8CAA7CAA8FFA8582D582D582D582D582D2D58FFA8A8A7CAA8CAA7
%CAA8A1A8A1A8A1A8A1A8A1CAA8C9C1C89FC8C1C89FC8C1C9A8CAA7A8A1A8
%A1A8A1A8A1BC999B99BC99BC99BC99BC99BC99C2A7A8A1A8A1A8A1A8A776
%4B7651524B7651524B76527D4BA8A7A8A1A8A1A8A1A8A8A2FD0B54A2A8A8
%A1A8A1A8A1A8A1A8A8582D582D512D582D512D582D2D7CCAA1A8A1A8A1A8
%A1A8CAA8CAA8CAA8CAA8CAA8CFC2C8C2C8C2C8C2C8C2C8C1CFA8CAA8CAA8
%CAA8CAA8CAA1C29AC2BBC2BBC2BBC2BBC2BBC2A7CAA8CAA8CAA8CAA8CA76
%765276517652765176527C7C7DA8CAA8CAA8CAA8CAA8CA547F547E547F54
%7E547F547954CAA8CAA8CAA8CAA8CAA8A82D5851582D5851582D58515851
%A8A8CAA8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A7A8A1C8C1C8C1C8C1C8C1C8
%C1C8A1A8A7A8A1A8A7A8A1A8A7A8A1C2BBBC99BCBBBC99BCBBC2A1A8A7A8
%A1A8A7A8A1A8A8A876764B524B7651524B5251A7A1CAA7A8A1A8A7A8A1A8
%A7A8FD055478FD0554A2A1A8A7A8A1A8A7A8A1A8A87D2D512D512D582D51
%2D5152A8A7A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8A8A7C9C2C8C1
%C8C1C8C2C9A7A8A7CAA8CAA7CAA8CAA7CAA8A8A1C3BCBCBBBCBBBCBBC3A8
%A8A7CAA8CAA7CAA8CAA7CAA8CA7D7C51764B76517676A8A8CAA7CAA8CAA7
%CAA8CAA7CAA8A87E7F54545479547E7EA8A8CAA7CAA8CAA7CAA8CAA7CAA8
%A858582D512D582D587CCAA8CAA7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1C9A1C9A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1C3A0C3A1A8A7A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A77DA17CA1A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A7A8A1A87EA27DA2A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A7A8A1A77C7D7CA7A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8
%A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8
%A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8
%A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8
%A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7
%CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8
%CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7
%CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8
%CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A7A8A1A8A8FFCACFCAFFA8CF
%A8A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA8CAA8CFA8CAA8CFA8A8A1A8A7A8
%A1A8A7A8A1A8A7A8A1CAA8CAA8FFCACFA8CAA8A8A1A8A7A8A1A8A7A8A1A8
%A7A8A1CAA8CFCAFFA8CAA8CAA8A8A1A8A7A8A1A8A7A8A1A8A7A8A7CAA8CF
%A8CFA8CAA8CAA7A8A1A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8CACA
%CA52A1CAA8A1FFCAFFCACAA7CAA8CAA7CAA8CAA7CAA8CAA8FFCACFA8FFCA
%CFA8FFCACAA7CAA8CAA7CAA8CAA7CAA8CAA8FFCAFFA1A7A8FFA8FFA8CAA7
%CAA8CAA7CAA8CAA7CAA8CFA8FFA8A7A8FFCFFFA8FFA8A8A7CAA8CAA7CAA8
%CAA7CAA8CFA8FFA8A8A8FFCAFFA8FFA8A8A7CAA8CAA7CAA8CAA7A1A8A1A8
%A1A8A1A8A1A8A8FF52F8F852F8F827A8A8CFA8A8A1A8A1A8A1A8A1A8A1CA
%A8CAA8CFA8CAA2A87ECAA8CFA8A8A1A8A1A8A1A8A1A8A1CAA8CAA8CA27F8
%F8F876FFA8CFA8A8A1A8A1A8A1A8A1A8A1CAA8CAA8F8F8F8277DA8CAA8CF
%A8A8A1A8A1A8A1A8A1A8A7CFA8CAA8A17D7E7DA8A8CAA8CFA7A8A1A8A1A8
%A1A8A1A8CAA8CAA8CAA8CAA8CACAFFCAA8FD04F8272776FFCAFFCACAA8CA
%A8CAA8CAA8CACAFFA8FFCAA87EA87EA8A8FFCAFFA8CAA8CAA8CAA8CAA8CF
%CAFFCAFF52FD05F8A8FFCAFFA8CAA8CAA8CAA8CAA8FFCAFFCAA1F84BF8F8
%F87DCFFFCAFFA8CAA8CAA8CAA8CAA8FFCAFFCACA9AC29AA87EA8CAFFCAFF
%A8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A8CFA8CACA7DF8F8F8529A7DA8
%CFA8CAA8A8A7A8A1A8A7A8A8CFA8CAA8CA7E7E7DA1A1A8A8CFA8CAA8A8A7
%A8A1A8A7A8A8CFA8CAA84B6F27F8F8F8267DFFA8CAA7A8A7A8A1A8A7CAA8
%CFA8FF512675F8F8F852FFA8CFA8CAA1A8A7A8A1A8A7CAA8CFA8FFA17575
%BC7DA8A8CAA8CFA8CAA1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CFA8FFCFA1
%F82775A1C376A1FFA8FFCACFA8CAA8CAA7CAA8CFA8FFCAA87EA27D7D5277
%77CFA8FFCACFA7CAA8CAA7CAA8FFA8FFCAA8269A756F4B27F827CAFFCACA
%A7CAA8CAA7CACACFA8FFCFA14B9A994B4AA7CFCFA8FFCACAA7CAA8CAA7CA
%CACFA8FFCAA175C3A1A26FCACACFA8FFCACAA7CAA8CAA7CAA8A1A8A1A8A1
%A8A1A8A8CAA8CAF8F82676C3A076C3A7CFA8CAA8A8A1A8A1A8A1CAA8CAA8
%CA7EA2759AA1764CA2A8CAA8CFA8A8A1A8A1A8A1CAA8CAA8FF274B6FC2BC
%9A4AF8F8CAA8CFA8A8A1A8A1A8A1CAA8CAA8FFA19A4B9ABC994BA8A8CAA8
%CFA8A8A1A8A1A8A7CFA8CAA8CA7E7D53847D99A1FFA8CAA8CAA7A8A1A8A1
%A8A1A8CAA8CAA8CAA8CAA8FFA8FF7DF8F8F827A1A0C34B27A8FFCAFFA8CA
%A8CAA8CAA8FFA8FFCAA87EA8A1C99AC3CAFFA8FFCAFFA8CAA8CAA8CACAFF
%A8FF7CF84B9A75C26F27F8F852FFCAFFA8CAA8CAA8CACAFFA8FFA82799C2
%9AC24BF852FFCAFFCACFA8CAA8CAA8CFCAFFA8FFCAA87EA97EA2C9FFCAFF
%A8FFCACAA8CAA8CAA8CAA8A7A8A1A8A7A8A1CAA8CACA52F8F8F8209AA04B
%F8F852CACFA8CAA1A8A7A8A1CAA8CAA8CFA87E7EA1769AA1FFA8CAA8CFA8
%A8A1A8A7A8A1CFA8CACA52F8F8759A9999F8F8F827A8FFA8A8A1A8A7A8A7
%CFA8CACA52F8204B9A4BF8F827A8CFA8CFA8A8A1A8A7A8A8CFA8CAA8FFCA
%7D52769AA8A8FFCACAA8CFA8A8A1A8A7A8A1A8CAA8CAA7CAA8A8A8FFCAFF
%52F8F85151A0C3C34BF827FFA8FFA8A8A7CAA8A8A8FFCACFA8FFA7C9C2C9
%A0C9C9FFCACFA8FFA8A8A7CAA8CAA8FFCAFF52272D7C99C8C8582D27F8CA
%CAFFA8CAA7CAA8CAA8FFCACAF826269ABC76F8F8F8FFCACFA8CFA8CAA7CA
%A8CAA8FFCAFFA8A1759ABBC2517676CACAFFA8CAA8CAA7CAA8CAA7A1A8A1
%A8A1A8A1A8A8CFCA7DF87651524B7651762776CACAA8CAA1A8A1A8A1A8A8
%CAA8CAA0C8C1C87EA377C2C2CAA8CAA8A8A1A8A1A8A1CAA8CACA7D2D587B
%C29F582D582D52CACAA8A8A1A8A1A8A7CAA8FFA7759FC8C9C975F8F820A0
%CAA8CAA7A8A1A8A1A8A8CAA8FF7D524B7675764B764B514B7DA8CAA1A8A1
%A8A1A8A1A8CAA8CAA8CAA8CAA8FFCAFFA776527651765276517676FFCAFF
%A8CAA8CAA8CAA8FFCACAC2C8C2C8C27E545578C8C2CACACFA8CAA8CAA8CA
%A8FFCAA82D587BC8C2A02D582D5858CFCACAA8CAA8CAA8CAA8FFC9C8C8C8
%C2C8C2C84B2775C8C2CAA8CAA8CAA8CAA8CAA8FFA1765176527651765276
%5176517DA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A7CFA8764B7651764B
%76515275767DFFA8A8A7A8A1A8A7A8A8C9C1C8C1C8C1C8775554547DC8C2
%CAA8A8A7A8A1A8A7A8A8FF582D2D7CC1C29F582D512D2D7CCAA1A8A7A8A1
%A8A7A8A0C8C1C8C1C8C1C8C1C8C2C8C1C8C1C9A1A8A7A8A1A8A7CAA17651
%764B7651764B7651764B764BA7A7A8A7A8A1A8A7A8CAA7CAA8CAA7CAFD04
%A8517651765276517652767576A8CAA7CAA8CAA7CAA8CAC2C8C2C8C2C8C7
%A1547F547EC2C8A7A8A7CAA8CAA7CAA8CAA8582D58517CC2A02D582D582D
%58A8CAA7CAA8CAA7CAA8C9C1C8C2C8C2C8C2C8C2C8C2C8C1C9A8A8A7CAA8
%CAA7CAA8A14B76527651765276517652764BA1A8CAA7CAA8CAA7CAA8A1A8
%A1A8A1A8A1A8A1A87C524B524B7651524B76517552A8A7A8A1A8A1A8A1A8
%A1A8A0C8C1C89FC87DFD0454A0A0A8A1A8A1A8A1A8A1A8A7A72D2D2D512D
%7C512D2D522D527DCAA1A8A1A8A1A8A1A8A7C9C1C8C1C89FC8C1C89FC8C1
%C8A1A8A1A8A1A8A1A8A1A8A17C4B7651524B7651524B524B7DA7A8A1A8A1
%A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CA7D765176517651765176A0CAA8CA
%A8CAA8CAA8CAA8CAA8CAC9C8C1C8C7A1547F547EA1CAA8CAA8CAA8CAA8CA
%A8CAA8A858582D582D582D582D7CA7CAA8CAA8CAA8CAA8CAA8CAA8CAC8C8
%C1C8C2C8C1C8C2C9A8CAA8CAA8CAA8CAA8CAA8CAA8A15276517651765176
%76A7A8CAA8CAA8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A7A8A1CAA1A1527651
%7652A1A1A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7C9A0C87D7E77A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A7CA7D7C5258515858A7A8A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1CAA1C9A0C8C2C8A0CAA8A8A1A8A7A8A1A8A7A8A1A8A7A8A7
%A87D7C5276527C7DA8A8A8A1A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7A8A8CAA8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A8
%A8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA8CAA8CAA7CAA8CAA8CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA8CAA8A8A7CAA8A8A8CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA8CAA8CAA7CAA8CAA8CAA8CAA7CAA8CAA7CAA8CAA7A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A7A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CA
%A8CAA7CAA8A8A7CAA8CAA8CAA8A8A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A8
%A7CAA8CAA8CAA8A8A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A8A7CAA8CAA8CA
%A8A8A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A8A7CAA8CAA8CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8A8A8CAA8CAA8CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8A1A8A1A8A1A8A1A8A1A8A1A8A7CAA8CFCACAA8CAA8A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A8CAA8CAA8CAA8CAA7A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A8CAA8CFA8CAA8CAA7A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8FFA8
%CAA8CAA7A8A1A8A1A8A1A8A1A8A1A8A1A8A1CAA8CAA8CFA8CAA8CAA1A8A1
%A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CAA8FFCAFFA8A8CAFFCFFF
%A8CAA8CAA8CAA8CAA8CAA8CAA8CACAFFCAFFCAFFA8CFCAFFA8CAA8CAA8CA
%A8CAA8CAA8CAA8CACAFFCAFFCAFFCAFFCAFFA8CAA8CAA8CAA8CAA8CAA8CA
%A8CFCAFFA8A8A1CACAFFCAFFA8CAA8CAA8CAA8CAA8CAA8CAA8FFCAFFCAFF
%A8A9A8FFCACFA8CAA8CAA8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A7A8A8CFA8
%CF7D27F8272052A8CAA8CAA7A8A1A8A7A8A1A8A7A8A8FFA8CFA8C99ABC99
%C2A1CFA8CAA7A8A1A8A7A8A1A8A7A8A8CFCAA852272752A8FFA8CAA8A8A7
%A8A1A8A7A8A1A8A7CAA8CFCA52F8F8F852A8FFA8CAA7A8A7A8A1A8A7A8A1
%A8A7CAA8CFA8A8FD04547ECFA8CAA7A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8
%CAA7CAA8FFA8FFFF52FD05F8CFCACFA8CAA8CAA7CAA8CAA7CACAFFA1C3A0
%C399BC99BC93C9CFFFA8CAA8CAA7CAA8CAA7CACACFA8FF27FD04F827A8FF
%CAFFA8CAA8CAA7CAA8CAA7CACACFA8FF272727F8F87CCAFFCACFA8CAA8CA
%A7CAA8CAA7CFCACFA27E5454547F547EA8FFCACFA7CAA8CAA7CAA8CAA7A1
%A8A1A8A1A8A1A8A1CFA8CAA87D52F8F84B277DA8CFA8CAA8A8A1A8A1A8A1
%A8A7FFA0BB93BB93BB93BB9A9AA1FFA8CAA7A8A1A8A1A8A1A8A8CFA8FFA1
%F82075F8F8F827A8CFA8CAA1A8A1A8A1A8A1A8A8CFA8CAA8526FA1F8F8F8
%A8A8CAA8CAA1A8A1A8A1A8A1A8A8CAA8CA7E777628295454CAA8CAA8A8A1
%A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8FFCAFFCACF2784279AA0A1A8FFCAFF
%A8FFA8CAA8CAA8CAA8FFCABC99BC99BC99C2999A76CACAFFCAFFA8CAA8CA
%A8CAA8FFCAFFA82720759A4B264BF8A8CAFFCACFA8CAA8CAA8CAA8FFCAFF
%CACA76A19AC37676CAFFCAFFCACAA8CAA8CAA8CAA8FFCAFFCAFF76C24B27
%287DCAFFCAFFA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A8CFA8CAA8A1A8
%7DA0A16FA2A8CFA8CAA8CAA7A8A1A8A7A8A8CA99BB99BC999A75C3A176A1
%FFA8CAA8CAA7A8A1A8A7CAA8CFCA52F8759A7599C26F277DFFA8CAA8A8A7
%A8A1A8A7CAA8CFA8CAA8A1C3769AC39ACAA8CFA8CAA8A8A7A8A1A8A8CAA8
%CFA8CACA9A76C39A4B7CFFA8CFA8CAA7A8A7A8A1A8A7A8CAA7CAA8CAA7CA
%A8CFA8FFCACFCAFFA8C39AA1CAFFA8FFCAFFA8CAA8CAA7CAA8FFA1BC99BC
%99C39A9AC37676CAA8FFCACFA8CAA8CAA7CAA8CFA8FF27F820C2759ABC75
%F8277DFFCACFA8CAA8CAA7CACACFA8FFCAFFCACAC3A1C9FFCACFA8FFCACA
%A7CAA8CAA7CACACFA8FFCACAC2A0C2C3A0FFCACFA8FFCACAA7CAA8CAA7CA
%A8A1A8A1A8A1A8A1A8A8CAA8CAA8A87EA1A0A1C3A2A8CAA8CAA8CAA1A8A1
%A8A1CAA8BC93BB99BB99CAC3C376C3CACAA8CAA8A8A1A8A1A8A1CAA8CFCA
%52F8F820C29A6FFD04F87DFFA8A8A1A8A1A8A1CAA8CAA8CFCACF767676A8
%A8CFCACAA8CFA8A8A1A8A1A8A7CFA8CAA8FFA8C99A9AA0FFA8CFA8CAA8CF
%A8A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8FFA8FFCAA97E7FA1A0757E7F7FA8
%FFCAFFA8CAA8CAA8CAA8CA99BC99BC99BCA7A8C39AA1FFCAFFCAFFA8CAA8
%CAA8CACAFFA752F8F8F84C6F994B27F8F8F852CFFFA8CAA8CAA8CACAFFA8
%FFCAA858A175A058587CA8CAFFCACFA8CAA8CAA8CFCAFFA8FFCAC9A19A9A
%C3C3CACAFFA8FFCACAA8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A8CAA8CF7E7F
%54A2C3C3537F5AA8CACFA8CAA1A8A7A8A1CAA8BB93BC99BC762D2DA7A17D
%58A8A8CFA8A8A1A8A7A8A1CAA827F8274D54547776785478292820CFA8A8
%A1A8A7A8A1CFA8CAA87D2D58A8FFCA7D2D582D7CA8FFA8A8A1A8A7A8A7CF
%A8CFA1BCBBBC76A19ABB99C2A8CFA8CFA8A8A1A8A7A8A1A8CAA8CAA7CAA8
%CAA7CFCACFA87F7E7F7EA37E7F7E7E54A8A8FFA8A8A7CAA8CAA8FFA1BB93
%BCC3A12D582D582D5158FFA8FFA8CAA7CAFD04A8F828547F547E547F547E
%547F54547ECFA8CAA7CAA8A8A8FFCA7D2D5858FFFFFF83585158517CA8CA
%A8CAA7CAA8CAA8FFCAC2BBC2BBBCBBC2BBC2BBC2CAFFA8CAA8CAA7CAA8CA
%A7A1A8A1A8A1A8A1A8A1CFA25454545354547F5478FD04547ECAA1A8A1A8
%A1A8A8CFA1C2A0C3A0512D582D512D51A1CFA7A8A1A8A1A8A1A87D53FD0E
%54A1A8A1A8A1A8A1A8A87D2D582D83FFFFFFA82D582D582D7DA1A8A1A8A1
%A8A1A8A8C3BBBC99BC99BC99BC99BC99C3A8A8A1A8A1A8A1A8A1A8CAA8CA
%A8CAA8CAA8CAA879547F547E547E547F547F547E54A8A8CAA8CAA8CAA8CA
%CAFFC9C9C3C3515851582D582DA1CACAA8CAA8CAA8CAA8A8547F547F547E
%547F547E547F54557ECAA8CAA8CAA8CAA8A851585258A7FFFFFFA8585158
%52587DCAA8CAA8CAA8CAA8CFBCC2BBC2BBC2BBC2BBC2BBC2BCCAA8CAA8CA
%A8CAA8CAA8A1A8A7A8A1A8A7A8A1A878545478545453545454535454A2A7
%A8A7A8A1A8A7A8A1CAA7FD04C3522D582D512D2D76CAA1A8A7A8A1A8A7A8
%A7A25454547854545478FD04547EA8A1A8A7A8A1A8A7A8A17D2D582DAEFD
%04FF51582D587DCAA1A8A7A8A1A8A7A8A1C2BBBC99BCBBBC99BCBBBC99C2
%A1A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA7CA7E54547F5454547F54
%5454A8A8CAA7CAA8CAA7CAA8CAA8CAC3C3C3C951582D582D5152A8A8CAA7
%CAA8CAA7CAA8CAA7A85454547F547E547F54787ECAA8CAA7CAA8CAA7CAA8
%CAA87D2D58A8FD04FF7C2D587DCAA8CAA7CAA8CAA7CAA8A8A1C2BBBCBBC2
%BBC2BBC2BBC2A1CAA8CAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A1A8A1CA7E
%7EFD05547E7EA8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1C3A0522D2D2D587D
%A8A1A8A1A8A1A8A1A8A1A8A1A8A7A87E7EFD05547EA1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A758FD05FF7C7DA1A8A1A8A1A8A1A8A1A8A1A8A1A8A1C39A
%BC99BCBBBC9AC3A7A8A1A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA2A8A2A8A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA1A7
%A1A8A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8A8A2A8A2CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA7CAA1CAA7CAA8CAA8CAA8CAA8CAA8CAA8CAA8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1CAA7A8A7CAA7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1CAA8A8A7A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A7
%CAA7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A1A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A7A8A8A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFD7FFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2021-12-13T16:18:51+03:00"
   xmp:ModifyDate="2021-12-13T16:18:51+03:00"
   xmp:MetadataDate="2021-12-13T16:18:51+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:22bbaba3-18e8-7744-ba41-302f7e8db614"
   xmpMM:InstanceID="xmp.iid:22bbaba3-18e8-7744-ba41-302f7e8db614"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">shablon_dlya_rabot</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="156"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7HlDluxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVwBJoBUno&#xA;BiqKj02dhViE9jucVte2lyAfC4J8DtitoSWKSJuLrQ4qtxV2KtqrMQqipPQDFVaW2S3hM95PHbQr&#xA;9qSRgqj5kkD8cVtuG1iuYFntLiO5havGSNgymhoaMtRitqMkbxtxccTiq3FXYq2iO7cVBJPYYqiT&#xA;YMic5pEiUdST0+npgJpIBOwcLEunOCVJV8VP8RUYg2pBGxQzo6NxYEEdjhQ1irsVXRxvI3FByOKo&#xA;pdMlI+JwvsN8VtqTTZlFVIf26HFbQrKykqwoR1BxVrFXYquiiklbii1OKqksNtBIkVzdwwyyf3cb&#xA;uAzdtgSK5EzA2JbI4pyFgEgeSpJps6iqkP7DY5JrtCkEGhFCOoOKuxV2KuxV2KppY2wjQSMP3jCv&#xA;yGKEFrfmjStJRxLIJLpQCLVCOZr0r/L475Rl1EYc+bm6XQZMxFCo96C8u+dIdYufqzWj28jV4Ny5&#xA;oSorx5UWhpv0yvBqhM1VN+t7LOGPFxcQ+TIZoUlQo427HwOZbq0mljaORkbqppilbiqbWdsIYwSP&#xA;3jfaPh7YofI/5v3Pmbz/AKt5n1KBppdM8r3j2lhYIV9IQWp9O6n4VDtIWZHrxNEJBIooyXEAQO9R&#xA;hM4mQ6fgqf8AzjB5x1LRfzDj8uTSOuna0skUts9QsdzEhkjkCnox4GM/PfpkpDZpgaNPsCeBJoyr&#xA;df2T4HK25JnUqxVuoNDiloAkgDqemKpxa26wx0/bP2jih5j5jvtS1/VisUb/AFWNmjt134UQkFyf&#xA;s1P9mabPOWSW3J7HQ4IYMe/1Hc/qU/y715otWt40LC1v4YZJY2p+7a6Vmtw4BNJCqVp1CsK5fgjL&#xA;FIWdjs4WulDUYiYj1RHF8P7N3qV1bLNHT9sfZObJ5tJyCDQ9R1xS2ilmCr1JoMVTmCBIYwq9f2j4&#xA;nFDzT84/zp/5V96Nrb6S+pX1xB9YWQtxgiX1RGPVIBb4t6e+EC2MiQLpF/k/+cWk/mFpbcljstft&#xA;uRu9LVy59NSoEyVCkoeYHsdvCplGljK2eXlsJoyQP3i/ZPj7ZFklOKV0UbSSKi9WNMVTmKJIkCIN&#xA;h1Pjih575/0TVG1k3iwSywTQc4vTillJ9IfEgEav8XcDvmt1WnnKdh6TsvW4oYuEmiDunPkrzW2o&#xA;L9QvSEvIlVYRRwzqi0Yvyr8Qpv0+WW6XUcXplzDh9p6AY/3kPoP2X+hkV9bCRDIo/eKK/MZmunSv&#xA;FLsVdircY5OoPcgYqnNxJ6VvLKKfu0ZhyNB8IruT0wSNC0wjcgO95Oum6xr8s2rLHGyfWkF9VzGB&#xA;CUb1GjosvxJ8JAbY9Kjrmox4/FuR+x63LmGn4Mca+Pd+tM/LmgG282wzWsbQ2UReWUv6bGaZokjj&#xA;eNgGcKqeqHDEbkU2zMw0KAdbrQZCUj+OVPSczHRJZqagTg+Kiv3nFIULdQ08YPQsK/fiqO1rVbXS&#xA;NHv9Wu+X1XTreW7uOIq3pwIZHoPHiuLEvmL8sfPeg6hDeMJ4dP1uXUryc2dzBLdJLaajNHJKqLDw&#xA;LSKE4KfvX4tq80Dfk5+hzR4aupX79ilv59+atPttVlsbCC6t9Yufqt3JdkpCqLEp9J0VVWb1SNiz&#xA;mqrt7B08TVo7SyxvhA3NMm/5x0/PLXtS1uHyd5nuWvzdK36K1GU1mWSNC5hlc/bDKpKs3xV23rtf&#xA;KLrYS6Pf9QUC5ancA/hkG4LbJQ11GD41+4VxVOMUPHtFuEGpy3cFo892lu0biOUqzW4lMij0mYRM&#xA;yvKaMaGhIr2zUYJkiuj1+pxRieL+KqpRbVrNNSe6Uzx3Ut3FOyXUBtXVIBxQKrBS4qTRwN+m9Mnn&#xA;JFbct2rTCMuKzvIVR2L2fNo8qk94oW6kA8a/eK4pXaeAbla9gT+GKlNsUPH/AM0dGOt+ZpbDUI/X&#xA;0ieC3iaEep/upzMxZldFUNzA/mr06ZgZ8pjOxzDvtDphPEAd4y5/A/2JT+RP5RXnlrzhqnmJgItP&#xA;eCSzs4HBZj6kiSc4m5tRAE4jlVj1NKkZl4s3HF1Oq0oxT2Pw/H9r3bLHHSW4ULPIB0DGn34pV9MU&#xA;GcnwU0+/FSmeKGOeatUvbS+t3rarZSRGG6S5Jj5xgAcw6/FyiXkoUFR8dWO1DVkmQapz9LgjKN3u&#xA;Cs0mO/1HXxrRFo2mNE5geKMCUySH4m9UE81I6be9TXK8cblxU26qYhDwwdtu/wDs+TJsyXVpE44u&#xA;wHYkYpaxV2KuBIII6jFU2nW3urCVJf7iaNkk3p8LAht8hkrhN8mWIkTBjzBYfo1tPpmmT2kToslw&#xA;xZ5aFtugXfjXb5ZzmPtHgNAXG9+8/q+T0Wph4sxPqOX4/a15f0+LR9QnvIIkQ3KhZo1eUoaEtVI2&#xA;YxxmpNeK798yZdrRFcET8a/Hx+xxcml4+e3utmtvcRzxCSM1U/eD4HNxhzRyR4o8nT5cZhKill9K&#xA;JLhqdF+EfRlrEKMblHVx1Ug/diqB88a1p7aTdaO6LcDULd4LpGJCiCZCjgkEGrKxzD1GpMTwx3mX&#xA;adn9neKOOe2Mfb+x51o+i6VosYTSLWOxAXiTAvBmH+Uw+Junc5rBqsgN3v5gH73pRosQFCNDy2+7&#xA;miLq1tbuNo7uFLiN6h0mUSAg9ahq1rkJ55ylxE7tscEBHhoUxzR/yy8tWHnzRfMenf7jjZXSy3Nu&#xA;grC6kEHiv7BFf2dvbM3T6+Q9M9x3ul1/YsCOPEKkOnQ/qe5XUgkndh0rQfIbZtXm1sEnpzI/YHf5&#xA;Yqxr8zvPE2lxLpOmSmO+nXnPcId4426BT2ZvHsPnkZFlGLyfT9V1LTrj6zY3MlvMRxZ0YjkpNSrD&#xA;owqOhytts3a7VNY1LVJlmv5zPIi8UqAoA8AqgKPuxUkncvUvy280ygW+h6hcet60AuNNnbYlRVZI&#xA;Wr/vtkbj7D5DLIlqkGUzyepM79idvlkmK60lEdwjHp0PyO2Ku8z+ZrXQrL1HpJdSbW9vXdj/ADH/&#xA;ACR3zM0ejlnlX8PUtc58IeVazrra5cw3Gro8rW/L0YYJnt4SH41WRE/vR8Owk5AdupzYavsAZCOC&#xA;XD33HiPzsfY3aTtHwgbHF/nED5dfinGj/mLqlk6RTxpPYrRViACuiDoFYdaf5WXnsTGMYjEniA59&#xA;7jZNVKczI9S9MsNTsr+xS+tpOdu4rXuKdQR2IzQZsUscjGXMNsTY2Sx2LuznqxJ+/K2StYyiO4Wv&#xA;RvhP04qUo8+efIvLkSW1siz6pOvJEb7EadA7gbmp6DK5zpxs+fg2HN5ovnyS6cSa/YRaxLE/qWsk&#xA;tFMJ7+mpV0X5qoPiTlJkTzatP2hLGSSBK+9tvzK8zrfm5tJltoKjjZKOcVB4+pyNT3II9qYiRHJr&#xA;y63JOZkS9T8oed7HzDp7yUEF9bj/AEm2r49GSvVT+H674Tty8OYTHmrkkkk9Tk292KuxV2Ktu8ht&#xA;2hDUViDT5Zi6zBLLjMYmi36fIITBKBaN16j6c5XLp54zUhTvMeWM+RaCsegJ+WQjAyNAWylIDmjb&#xA;OSeBXANA4pTw986HszS5MdmWwPR1OtzQnQHTq3m2cB2KpNrugi+HrQEJcinKuwcA9D75jzwDi4x9&#xA;VH7iA7PR68wj4cvosfDez8GM3Fld27ETxMlO5G30HpmjnjlHmHq8WohkFxIKyKCaU0ijZydqKCf1&#xA;YIxJ5BnPJGIuRAZBo3l10kW4vBQrvHD137Fv6ZstNoiDxT+Tz/aHawIMMfXmf1frZFmzeedirC/O&#xA;3keTU5W1LTzW9IAlgY0EgUUBUnowAp4ZGUWcZPNrywvbKUxXcEkEg/ZkUqfor1ytmustM1G+kCWd&#xA;tJOxNPgUkD5noPpw0tvUfLHlD6omn3moD/TrOBoY4QeSoWmkl5V7tSWm22TAayWVZJi7FWKebvLN&#xA;7fXH1+0YzScQskDNvRRQcK7fRm77N7QjjjwT2Hf+toy4idwwqe0urduM8LxN4OpU/jnQQyRlvEgu&#xA;MQQutLG8u5BHbQvMx/lBIHzPQfTkcmaEBcjSiJPJ6J5T0i90mxljuJqm4ZXaBd1QgU69ye+cv2jq&#xA;45pDhGw697l4oGI3TrNc2uxVgHnvyZqt/qEmrWTG6aUKJbckc14KFHDoCKDp1+eUzgebg6jTkniG&#xA;7z6e2ubeQx3ETwyDqkilT9xplNOAQRzV9N0fU9SmEVjbvMxNCVHwr/rMfhX6ThAJZQhKXIPU/J3k&#xA;6PQo2nncS6hMvF2X7KLWvFa9d+py+EKdngwcG55smyxyHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqvihklfigqe/gMVQtjr3l&#xA;G61250CHVrefW7MFrmwSRfUQChao78a706d8aRxI6yufL2pPLHp2oQXckJpMtvNHKUPSjBS1PpxW&#xA;3XNnJDv9pP5h/HFKhirsVVIYJJm4oPmT0GKo6PTIgPjYsfbYYotttNgI+Esp+/FbQVxayQH4t1PR&#xA;hilRxV2KqsFtJM1FFAOrHoMVRFxBp1lbPc31wsEEYrLPK6xxqPEs1APpOKLUrCXQ9VhabSr6G8jQ&#xA;8WktpUmQHwJQnfFbWT20kLUYVB6MOhxSpYq7FVa3tZJztso6scVamvPLdrerYXWpW8V+9ClrJPGk&#xA;pr0pGSG3xRaNk0yIj4GKn33GK2gZoJIW4uPkR0OKVPFXYqr21nJNv9lP5j/DFV8n6IgkMU1wBIKV&#xA;BNKV+WTGORFgMTIKx0+3kQPBJUH7JBDKfpGQIpNoKWGSJ+Lih7eBxSsxV2KuxV2KpxawCGICnxHd&#xA;j74ofGH5veXrST829Yj8lXr315cNLcajHEyxi3uJzwuIRMXVX5PJQgd24bnLOKhu1DGZSqLJ/wAq&#xA;Py01vyzrGhavqSXOma2+o26xLEVdJbSf1BPbzgNQFYoHkNOgIrvsKTmBO3JzY6GUYXIVL8fqfVzK&#xA;GBBFQdiMk46S3EXpTMnYdPkcUqYBJAHU9MVTqCFYYgg6/tHxOKEg8xeYo7dOFvcCLgxE8poAOwHI&#xA;7dcysOL+d8GuRPRilp530xNTjD3kjzLOEIPNuS8TIz7VJj4qav8AZHftlshZ4QNq+1IhUeIne+Xl&#xA;3vTXRXUqwqp2IzAZpJLGY5GQ/smmKWkQu4UdWNB9OKp3FGscYRegxQ+Zfz+t9a84+adV0+y1CSTT&#xA;vL8EKW2mxqfSkvmKNMGNQCyRzL8Xbp/NkZZhAgHq3YtJLLGRHTl5l5Z5B8yebvyw8zwa7Np1zHZl&#xA;mtr+zlDwpOhB+AsQRyUjkhp1HhXLROMuRcaWKePeQIfbWga3pnmby7ZazYEtY6jCs8PMUdeQ+yw3&#xA;oynY++QIZAod1KOVPVTQ/RiybhjMkioP2jiqdoiooVRRRsBih8d/mZ5Q1vzF5v8AOGpS27trZ1Ip&#xA;pkA5KZLO0Y2tVHHi1UERrUU+nISziMgDy6uRj0RyYzIfV093I/oZp/zi3P8AmFBr9/peuG/XQ49P&#xA;LWtvfGXhFLHOiIIUl+wCrPXjStPbLDOJ5Fx/AyQ3kCB5vo2eFZoih6/snwOBUlIIJB6jrilUt4vV&#xA;mVOx6/IYqnIAVQAKAbAYoeUajq2qXPmbUokiP1eC6MXqlq1j9IOpVaDuQO+Y2SeYS9PE7vTY8BgB&#xA;Pg87q+V+/Ysn8m31rcareW8NwsktmgFzCrVKM9GUMB0NN82WfLE+kc3RxxSA4iPSWV3UAmiIp8Q3&#xA;U++YyUnxS7FXYqujp6i16VFfvxVvzxqV1pfkrzBqdo3G6sdNvLmBvCSGB3U/euEMTyfCfkv/ABSm&#xA;pve6PbLdlgY7oXSJLbupYScZfV+E0dVcd6gHLJEdWvEZA3F9H+edV8x6d5fudZ0exgvLxrX6raX1&#xA;vdSh40kOz/VeHplo+R4sGrXwB45rcU4yNXXk77UZJRgZAA7Vz/Qyb/nHn8xNY85eT5xrdX1fSJ/q&#xA;lxcEcTKpUMjuBSj9VbbtXvmfIOjgbZ/qdPXXx4iv3nItgULan1iOv8w/XiqdYoYHrOgOLuP1YRM9&#xA;tN9Zsm9R4wJAGVSTGa7q5U1BFCdjh1WbEYi5AS7nI0PHGWwuNoTy7oeman5jmu72wntpbeMKILkR&#xA;+k3qOWYwvEzg8yoLry/2NWbMfHmIIHEHN1kY0fSbPyej5e6pKtRp9ZPyFcUhbZU+tR18T+o4qo+e&#xA;9W1DR/JWu6rpy87+xsbie1HHmBJHGWVivcKRWmEMTyfMn5YnzTeWt1dajDevqTXn6R+uj0pbi5S4&#xA;9KKaArM68eZjT4yNhWhGYOtlEHmO773Y9kakG4C+IHi27trG/uG6t+eHlXzVdW1pPbWtsbW6Kzzw&#xA;I1bz1YUZFDsTwZFSTYRn7RPXrlfZ+ogSRvt8k9t5qIugD87H6HoH/OKHmvUtR8p6l5dvkI/w7NGt&#xA;sxXiwiujI3ptsKlJI36775s5Oqxmw9avafWpKeI/VkW1fp1PrI+RpipQ3n3zXB5S8n6r5imQSDT4&#xA;S8cRNA8rkRxIT2DSOowgWxJoPnHyJ518w+bYjdavY6hd6pDdev8ApS1MUETxSMXEMjyNF+6UrT00&#xA;5fCBtmDqogSJsb9Hd9l5jKAjwyuJ5ih57+TFtX/N3zBov5mG+tVit49KvvTu4oOVblIawyRyux+M&#xA;cearsoFa0rmTpsIEQe8Ou7R1cp5DHYAH7tn2rljjJLc0+sSU/mP68Uq+mU9dvHjt94xUpk7oiM7s&#xA;FRRVmY0AA7knFDyrV9U0hdfP6Ntn1SZgVS9tkQxxozVMZmcoNjuQla5cddjgPVzDZj0OXKfSNu9O&#xA;/LXmbydp80kNzcpa6vLQXZcERg9eIkpx2rvUjf7sw8c4zJmP4nI1JkAMfOMGcxyRyIskbB42FVdS&#xA;CCD3BGXOGkslPUanSpp9+KVuKuxV2KrPN2uWFl5UvLi7jWdJo2tvqr/ZleVSvA07EVJ9sBNKBb53&#xA;s7O2sraO1tYxFBEOKIvQDKybbQKV6mlK7daYEvSvye1C2068udIMcafpMfX4p1AUvIqBJFY9TRY/&#xA;+FPjhxzvbuY5IVuz+6m9WdnH2ei/IZa1qSkqwI6g1GKom/1YhAkGzsKs3hXsM1HaOvOM8Eeff+pz&#xA;9HpRP1S5JOSWJJNSepOc8SSbLtwKYBd63rMOqMZLyaZraV0USyM4oGoQak9ab56/DRYNVpQJRFZI&#xA;g8upHP3vJHNPFlNH6S9K8va8Lm3hkZiYJlqpO5U9CK+x2zgcc8mm1B0+Q3Rr9XwIdxmxRyY/Ejsr&#xA;zyerKz+J2+XbNu65qNyjq46qa4qkf5peZn07QI7W0fjcanyTmOqwqB6lPc8gv35XklQcTVZOGNDq&#xA;wfyANP8ASuuRA1CZxDAWJFPgaRaEb7tHv8hmj7Q4rH80b/o/S7DsGeOBJP1E18Kv9CReaJZn128S&#xA;SVpVhkZIqmoVQdkHsvTMzSgDGKHN1XaM5Szys3uyv8m9YsrDUb7TWhSN9R/0gTqoDvJClOLkdfgH&#xA;w+H05nY5dF0mTfhejSOXdnPVjXLnYNwSelKr+B3+XfFUJrcsOqQvZXdvHNZMylreVVkVjGwdCwYE&#xA;fCyhh75zOs7QySkYj0gfN3On0kAAT6ioxu0acEPFNvgH2fh6bdNswIZZR5GnMMQXlev/AJAeX9b8&#xA;6S+ZLvULhorqYXN5p7BWEj9WHqk8gjEbih9j4bKHa+SOPhrfvcCfZsJT4r27nsljqlwjcJKypTv1&#xA;H05Ps7W5DMQPqH3Lq9NARMhsVrEsxJ6k1OdA6lVtZvSnVz9no3yOKvL/AMy/OlzqWpTaTaSFNNtW&#xA;McgU09WRTRi3iqnYD6crkWyMWFpeXccZijnkSM9UVmC7+wOVmESbIbBMgUCpZJizf8r9e1u21Yaf&#xA;ATNp0is08LH4YqDaRf5TyoPf9UoljIPTcsa3Yq7FXYql2vaHZ61p7Wd1UCvOKReqOAQG9+uAi0g0&#xA;821L8t/MVrIfqyJewipDxsqtQeKORv7CuQ4SzEghbbyF5pncL9T9Ja0Lyuige9KlvuGPCU8QZ/5Y&#xA;8l22k+jc3LCfUIkKK4rwQMzE8Ae/x0rjCFEnvYynbJcsYOxVY8auKH6DmJqtHDMN+fe34NRLGduS&#xA;He3denxD2zR5Oys0Tt6vx5u0hrsZ57MJufKOt3ep3MixLHDLM7LJIygUZiQaAlvwz0fR9o4sWmxx&#xA;P1RhEEDvAHweezYzLJIjkSWX6FpH6LsFtmk9VwSxelAOXYe2aLVmGXOc1VIinIhOQhwXsmWQYuxV&#xA;I/NPlW01+3RXcw3MNfQnG4APUMtRUGmQlC2nNgEx5vP5vIHm2yuBJbxLMYmDRzQyKKEGoIDlG/DK&#xA;JYiRRcH8vkibHRu3/L7zVfXDSXUaW5kYtJLM6kksasaJyNcY4iBSfy+SRs9WfeWfKWn6FETGfWu5&#xA;BSW5YUNP5VG/EZfGADm4cAh709ybc7FVOSFX9j45r9X2fHNvyk5en1Use3MKBt5AdqH6f65pZ9mZ&#xA;o9LdjHW4z1psW0h60GSx9l5pcxSJ67GOW6vHGqCg69zm90mjjhG2573WZ9RLId+S/Mtx3YqxXzV5&#xA;FtdYY3dswttQp8TEfBJT+em4P+UMiY2yEqYRc/l95qhk4raide0kciEH/girfhkeEs+IInTfy08w&#xA;XLj63wsov2izB3p7KhI+8jERQZPRtC0DT9FtPq9ou7byzNu7t4k/qGTApgTaZYUOxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVX&#xA;tbVp28EHVv4DFUp8/wDnryz+X+gfpfV1d1dxDbW8QVpppSC3FeRUAUUkmtB92EC2MpUwLS/+cqvy&#xA;xvY7ddQgvLCaZisoeFZY4hWgZnQ1Ipv8Kk4eAsBkD1u608ULw9uqf0yLbaAxV2Koi0s2mPI/DGO/&#xA;j8sVV5rzR7K2kuJJY1ih/vGqGI9tqmvtkJZIgWS248E5yEQDZY+35ieXnk4NbTmPp6nBPvpyrmL+&#xA;fhfIuz/kTNXON/H9SdNbxTW0d3aEtDKiyKDWvFhUHf2OZkSCLDqZxMZGJ5hDYWLsVRVpZGX432j7&#xA;eJxVjfnr82fy+8hyR22s3R+vyoJI7G3jM05QmnJuiqNtuTCvbCI2wMgFvkX83fy+89zSWmj3JXUE&#xA;UubC6j9GcoOrJuVYDvxY074mNKJAsou7H0wZI907juMDO0HirsVRlpY+oBJJsh6DucVt5z+Y359+&#xA;XPInmMeX5NIub+7WBbiZ4OCqqsCQPiqzUVansMkI21mdFPvy6/NfyV+YcU66T6kN9aqHubC6RUmV&#xA;GNOalC6svLaobbuBUYDGkxlbJruyMPxpvH38RgZoXFXYqjLeyQRma4PGMDkQTQADerHtiBakpXrX&#xA;nby/pKIICl7M4qqW7KwA8WcVAzYabs3Jl5+kebVLKA15d826V5gne1+rG3uVUuFYgggGnwsKb7+G&#xA;Os7OlhHFdhYZeJMbuzaA8h8UZ6Hw+ea9tQ+KuxV2KuxVO4IhFEqDsN/n3xQ8n/NvyF5t826V5otr&#xA;sCXQrSTSNR0V0eNWiEHrRaivFiPiEUrSVOx2Fewshvy5tchchfJhflf8mfI+ja7pFnqumtqs3rSy&#xA;GSYuOaieGGJ2CSiNkRpVJQpuDvlGPKZF2OfRRhDz/aH0fk3CSm/iEdwadGHIYpCgqlmCjqTQYqkn&#xA;5i6jc2sFpp9vIY4ZVZpgpoWCkAA07dfnmv12QigOrvexMEZGUyLI5MDjhkk+yp41Cl6HiCa0qfoO&#xA;a2MSeT0UpiPNtklGjPqtq0N3Yz2VxNC8RDyF4yhj4Cv+uX+EkUpSu2ZmLTb1J1uo1pMQcfKre16a&#xA;oXTrVP5YkX7lAzaQ+kPLZ78SV95S+7iEdwyj7PUfTkmtTiTnIqfzEDFUZr2s2WgaDf6xd1FpptvJ&#xA;cyqv2isSFuK+5pQYhiS+S9NtT5+1/VfzA123jniulPLTUVysaKjW6iORvhaREiX5V5UG2UajMY+k&#xA;bF2Gg0gmDkluO78dUj1n8tNc8lMNfs9TeK4sXa4s5oo2+AxSUT1JgQiF1I4ihqfhpksWrEzVMNT2&#xA;XLDEyv7PvL7T0fU7TVtJtdQtZ4rm3uoldZoGDxtyG/FgWB398tcIIK4j9OZ07A7fI7jFk63j9SZE&#xA;PQnf5DfFU6AAFB0xQ8k85eVEfzdq/mK90sSRywQ2DB3DJc2LROk5WnxRMGlHOuxVB3NRRkmeTstJ&#xA;ijwmXPv936Ej/Kn8odI0Dzpp3mHQri+uNOktHlN4Jo1tXE0ZURGML6ro/ISrU7cV+12nHLKWxaM2&#xA;khAcQPT8eb3ZlDKVIqDsRljiJJIhSRkP7JIxSqWcQkuFU/ZG5+jFU3dEdGR1DIwKspFQQdiCDhBp&#xA;DxLzj5YhXWtR0rSZk0iWYwSaZckcxy4yGaJUcHnQx1YA7Kw6ZdLtjUCd8V05+Hs+E8dcpS3B+at+&#xA;Udj5sTzS8WrxQOLCKQ3F7bCZIWZqKiIJkTnWpJZfhFKbmtMrN2uc+PgIcLJopYTuXs0iLIjI3RhT&#xA;NcxSNgVYqeoNDil2KuxVtTRgfA4qno33xQwTUfN+qXk0lnbMsGmXVYbhGUFmiYU+InxruAen35u5&#xA;9nDHhkdzkro1YMglliJfTaSi81qxv5JHs4ImndWW8guHmDFB9owSRqsR+EVoWr4mma3srRxyzPFd&#xA;RHJ23aOolCFCvV1v9D0Dy5rJ1SxMkgAnibhKF6VoCDT3Byet03hToci6rHPiC/VCPVQdwu/0nMNt&#xA;CGhIE0ZPQMCfvxVgXnqWZ/M10Ja0jCLED2TgDt9JJzS6wnxC9h2TEDTxrrf3pbpuoR6U66jdwPPp&#xA;3L0p1SlWLAlaVK7hgDUHbBpo3K+jV2zqxhw3vxXtSYXeo+X9Vaw1JZtPFrZTrcSWN8nO6hYGrNbu&#xA;zJ+8414kK2/cZsAB8HQR7UxyxiRI4x0I6+T0rQtX0rVNPjuNMmE1sPg7hlIH2WB3BzJjVbOD4vie&#xA;rvU9RINzTwAB/XkmQUrQgXMZPjT78VeN/n1+cbJdah+W+haUNU1C8tzb6jM/IrEZ4wwWJUILOqsG&#xA;5FuKnqDvS3FiMjQ3LTOdbPM/y+8l+aPLs1xPdtbG1vYDDcadJzmRqkEepwBp0I5LypXpTMvVdj5T&#xA;C69Q6Dn+pyOz9WMczf0yHXkivP8A5N8xeZmsjZ3Nrb2djbiGLT1EsMKMD/uuq1I4hVqVXp0pjo+x&#xA;sogSdpE9ebLtHWDJICJ9MR05Mg/5xsm85+V/OknlfVIZRo2qwyyQivqQpdQrzDqykqpeNWBGxO3h&#xA;lep0uTH9QcPHLd9EXxBunp2oPwzDcgN2BAukr3qPwxUorVtXsNJsnvL6T04U2HdmY9FUdycBNMJz&#xA;ERZYXFqHmTz1FeLoKrp36PMbRTHjLIxk5DiyycY2BCk8eQp/N2NJufIXTPQa0cRs8Irnz+aEvPM/&#xA;mfyXeR6PqaQX8gjWeWehjdzIKmhX4FAIoAF2p1Y/EUEw2IadbrScm3qHyZf5a84aVr8ZFuTFdIKy&#xA;WslOYHiv8y++WxmCuLMJ8l90QbiQj+Y/hkm5V00gXFPFSB+vFSq6xrNnpVus1xUlzxjjShZj9NNh&#xA;lObPHGLLk6TRzzyqPR5z5l16S/v4pbOT9HxsrC5/0Z7mZ+nExyAiKI0G/NGrmHHLHJZ2HvkA7yOl&#xA;yYQI3xDyiT9vL5sh0HzjpdtZxQTW0sTdJJKIWO53fifD54YayEdvtDTqOys2Q8QPwP4IZlFLHLGs&#xA;sbB43AZGG4IO4ObAEEWHQSiYmjzCSzEGZyOhYkffhVbirsVdiqR+dfMGtWenww2QMUL1Wa7Q/GP5&#xA;VB/ZqO+bbsrBiySPFuRyDRmkRyedLdXqElLmRa7kGjj/AIcNT6M6Q4w4q/8ATV80D8SGdOS1AALF&#xA;fvAwCIpFK2gzao16jaRI8dzOeXKMla13Jf28a5VqPC4CZgcLON3s9XVp2RPrEnqzBVEklAvJgKE0&#xA;GwrnGzIJNCg54byKqes6doup2frX0XK6iHBJFJVz4bjqPnmPqMUJCyHYdn58sZcMDt1Yd5ztoY/K&#xA;lxHGoRITEUUD/ixR/HMaApv7Z9WnkT5feHl+WvFs9/KHVZrXWbq13a2nh5uo6Bo2AU/8McnjJtz9&#xA;BRMge63pUjtI7O3VjXMlzloJBqOoxV5X5r8t29l5u1PWxb8bjV2SR7k/FURxJHxU0+EfBUj+zOn7&#xA;IGPw7j9XX8dzh5gbS7Ns1OxVMtA029v9RjS1ZojGQ73CkgxgHqCO/hmLrNRDFAmW/l3s4RJOz1Op&#xA;PUlj3J6nOMLnNqxVgw2INRirzf8AMfUNVutb4XSGO0iWlkgNVKmnJq/zE9cx8hNus1Rlxb8npH5H&#xA;WAh8rXF2R8d3dNQ+KRqqj/huWZGnGzLANmN/nzZcNZ0y9p/f27w18fRfl/zNyvUDcNecbhhvkvTt&#xA;QudbguLVmhS1YSS3A7Afs+FW6UyqAJK6eBlLbo9VJrvmS7VdHI0ciuvVTXFWLecr+S61UIQVhhQC&#xA;IHvy3Zvv2+jNLrpkzruet7GxRjhsc5Hf9X470hzCdu7FWY+T9VuRp89q6kxxn9xJ2HL7S/R1zb9n&#xA;zJiQeQeX7cwxExIfUeY/SmmbB0bsVdirsVWSxRyxtHKoeNxRkYVBB7EHDGRibGxUhjd95D06Zy9r&#xA;K9qT+xT1EHyBIP45t8PbOSIqQ4vsaZYAeSEt/wAuoUb97eEoSSVROJNfcs36stl23/Nj9rEafzZL&#xA;pmj6fpkRS0iClvtyHd2+ZzVajVTym5H9TdGAjyRuY7J2KtEAih3HhgItlGRibCU69oA1XTZrJJvq&#xA;6zcavx504uG6cl/lyk4BezdqNTLLiMD16/G2MWv5UW6uDd6g8id0ijCH/gmL/qwjE6mOiHUsw0nR&#xA;dM0mD0LGARKd3bqzEd2Y7nLBEBzIYxEUEdkmTsVUbuztruFoLmNZYm6q36x4ZZjyygbiaKCAebGb&#xA;v8v7N2LWty8IO/B1Eg+QNVObfH21ID1Rv7Gk6cdC1a/l9bKwNzdvKv8AIihPxJbDk7bkR6Y19qBp&#xA;+8slsrC0sYBBaxCKMdh1J8SepOajNmnklcjZb4xA5IjKkuxVC6jpljqNv9XvIhLHWorUEHxBG4wE&#xA;AsZwEhRTjyxqEOgaTDpcMHqW0Jcoxaj/ALxy55GlDTlQe2SgeEU1RwACgUD5yhsPNK2iXcLxLZuz&#xA;pwcVbmACD8PT4e2CdSWWnEuahZ2VrZ2629rEsMKdEX9Z8T74AKboxERQV8KXYqh7uxtbtOFxGHA+&#xA;yehHyIyvJijMVIORp9TkxG4Gknl8pRFqxXBVfBlDfiCuYEuzh0LuIdvH+KPyKpbeVLRGBnlaan7I&#xA;HAfT1P45OHZ8RzNteXtzIRUQI/anMUUcUYjjUIi7BQKAZnRiAKDppzlM3I2V+SYOxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVnP+4X/&#xA;AJdv+SeXbON6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/&#xA;5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb&#xA;/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J&#xA;47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy&#xA;+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd&#xA;/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7h&#xA;f+Xb/knjsvqf/9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:b7131c3e-1ac6-2346-a472-05e56f7f0e1d"
    stRef:documentID="xmp.did:b7131c3e-1ac6-2346-a472-05e56f7f0e1d"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:b7131c3e-1ac6-2346-a472-05e56f7f0e1d"
      stEvt:when="2021-12-13T16:18:48+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:22bbaba3-18e8-7744-ba41-302f7e8db614"
      stEvt:when="2021-12-13T16:18:51+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="671.080483"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
671.081 400 li
671.081 0 li
cp
clp
671.08 400 mo
-7.36225e-06 400 li
-7.36225e-06 0 li
671.08 0 li
671.08 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.847059 .772549 .74902 rgb
f
133.786 79.0498 mo
133.786 83.1899 133.246 87.21 132.226 91.0298 cv
129.846 100 124.866 107.91 118.125 113.89 cv
116.056 115.75 113.806 117.42 111.416 118.87 cv
110.596 119.37 109.766 119.85 108.916 120.3 cv
102.426 123.73 95.0156 125.67 87.1655 125.67 cv
84.5854 125.67 82.0557 125.46 79.5854 125.05 cv
77.8154 124.77 76.0854 124.38 74.3857 123.9 cv
67.4058 121.91 61.0957 118.35 55.8657 113.6 cv
54.1558 112.06 52.5557 110.38 51.0957 108.6 cv
44.5054 100.55 40.5454 90.2598 40.5454 79.0498 cv
40.5454 53.2998 61.4155 32.4302 87.1655 32.4302 cv
112.916 32.4302 133.786 53.2998 133.786 79.0498 cv
cp
.929412 .866667 .839216 rgb
f
257.966 79.0498 mo
257.966 87.5601 255.686 95.54 251.696 102.41 cv
251.545 102.67 251.386 102.93 251.226 103.19 cv
250.855 103.81 250.466 104.43 250.056 105.03 cv
249.886 105.28 249.716 105.53 249.525 105.78 cv
243.446 114.49 234.446 120.99 223.966 123.94 cv
223.746 124 223.516 124.06 223.295 124.12 cv
219.486 125.13 215.476 125.67 211.346 125.67 cv
195.236 125.67 181.025 117.5 172.676 105.07 cv
171.886 103.92 171.156 102.72 170.486 101.5 cv
166.815 94.8398 164.726 87.1899 164.726 79.0498 cv
164.726 53.2998 185.596 32.4302 211.346 32.4302 cv
237.096 32.4302 257.966 53.2998 257.966 79.0498 cv
cp
f
382.146 79.0498 mo
382.146 88.29 379.456 96.9102 374.815 104.15 cv
373.825 105.7 372.746 107.19 371.575 108.61 cv
371.445 108.78 371.315 108.94 371.176 109.1 cv
370.315 110.12 369.405 111.11 368.466 112.05 cv
366.945 113.57 365.315 114.99 363.586 116.28 cv
363.535 116.32 363.485 116.35 363.436 116.39 cv
363.075 116.67 362.706 116.93 362.336 117.19 cv
361.896 117.51 361.445 117.81 360.985 118.11 cv
360.886 118.18 360.785 118.24 360.676 118.3 cv
359.416 119.12 358.105 119.88 356.756 120.56 cv
356.445 120.72 356.136 120.88 355.815 121.03 cv
354.365 121.73 352.876 122.36 351.355 122.91 cv
349.336 123.64 347.256 124.24 345.115 124.68 cv
342.016 125.33 338.815 125.67 335.525 125.67 cv
334.875 125.67 334.216 125.66 333.565 125.63 cv
332.815 125.6 332.076 125.55 331.335 125.48 cv
331.286 125.48 331.246 125.47 331.196 125.47 cv
329.806 125.34 328.426 125.15 327.076 124.89 cv
326.295 124.75 325.525 124.59 324.766 124.41 cv
322.545 123.89 320.396 123.21 318.315 122.37 cv
316.505 121.66 314.755 120.83 313.056 119.89 cv
313.016 119.87 312.986 119.85 312.946 119.83 cv
312.746 119.72 312.545 119.61 312.355 119.49 cv
311.746 119.15 311.136 118.79 310.545 118.41 cv
309.996 118.07 309.466 117.71 308.936 117.34 cv
307.986 116.69 307.056 115.99 306.156 115.25 cv
306.045 115.17 305.946 115.09 305.835 115 cv
304.565 113.94 303.346 112.82 302.186 111.64 cv
301.855 111.31 301.536 110.97 301.226 110.63 cv
300.486 109.84 299.775 109.01 299.116 108.17 cv
298.966 107.99 298.826 107.82 298.686 107.64 cv
298.666 107.62 298.656 107.6 298.646 107.58 cv
297.866 106.58 297.136 105.55 296.446 104.49 cv
291.676 97.1699 288.896 88.4399 288.896 79.0498 cv
288.896 53.2998 309.775 32.4302 335.525 32.4302 cv
361.275 32.4302 382.146 53.2998 382.146 79.0498 cv
cp
f
506.325 79.0498 mo
506.325 88.2598 503.655 96.8501 499.035 104.09 cv
497.336 106.76 495.376 109.23 493.186 111.49 cv
492.615 112.08 492.035 112.65 491.436 113.2 cv
489.825 114.7 488.105 116.08 486.285 117.35 cv
483.565 119.24 480.636 120.85 477.535 122.14 cv
472.686 124.15 467.416 125.36 461.886 125.62 cv
461.166 125.65 460.436 125.67 459.706 125.67 cv
459.346 125.67 458.976 125.67 458.605 125.66 cv
453.136 125.53 447.896 124.47 443.056 122.61 cv
437.956 120.67 433.296 117.85 429.235 114.34 cv
429.046 114.18 428.855 114.01 428.676 113.84 cv
427.496 112.8 426.386 111.7 425.325 110.54 cv
424.945 110.12 424.565 109.7 424.206 109.27 cv
417.256 101.13 413.075 90.5801 413.075 79.0498 cv
413.075 53.2998 433.956 32.4302 459.706 32.4302 cv
485.445 32.4302 506.325 53.2998 506.325 79.0498 cv
cp
f
630.504 79.0513 mo
630.504 104.8 609.63 125.673 583.882 125.673 cv
558.133 125.673 537.26 104.8 537.26 79.0513 cv
537.26 53.3027 558.133 32.4292 583.882 32.4292 cv
609.63 32.4292 630.504 53.3027 630.504 79.0513 cv
cp
f
133.786 200.09 mo
133.786 204.96 133.045 209.66 131.656 214.07 cv
129.536 220.81 125.936 226.89 121.226 231.92 cv
121.125 232.04 121.025 232.15 120.916 232.26 cv
120.795 232.38 li
120.696 232.49 120.585 232.6 120.486 232.7 cv
117.686 235.56 114.516 238.07 111.045 240.13 cv
104.065 244.31 95.8955 246.71 87.1655 246.71 cv
85.3857 246.71 83.6157 246.61 81.8857 246.42 cv
81.6455 246.4 81.4155 246.37 81.1855 246.34 cv
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
78.9258 246.04 76.7656 245.6 74.6655 245.01 cv
72.1958 244.33 69.8057 243.44 67.5254 242.38 cv
67.1758 242.22 66.8257 242.05 66.4756 241.88 cv
64.2256 240.77 62.0854 239.48 60.0757 238.03 cv
58.0557 236.59 56.1558 234.99 54.3955 233.24 cv
52.5054 231.38 50.7754 229.34 49.2353 227.18 cv
48.8555 226.64 48.4756 226.1 48.1157 225.54 cv
47.2158 224.18 46.3955 222.77 45.6558 221.32 cv
42.3857 214.95 40.5454 207.74 40.5454 200.09 cv
40.5454 174.34 61.4155 153.47 87.1655 153.47 cv
112.916 153.47 133.786 174.34 133.786 200.09 cv
cp
f
257.966 200.09 mo
257.966 208.99 255.466 217.31 251.146 224.39 cv
250.396 225.62 249.585 226.8 248.736 227.95 cv
245.605 232.13 241.806 235.77 237.476 238.71 cv
231.755 242.59 225.136 245.22 217.986 246.24 cv
216.116 246.51 214.216 246.66 212.275 246.69 cv
211.966 246.71 211.656 246.71 211.346 246.71 cv
207.585 246.71 203.916 246.26 200.416 245.42 cv
190.835 243.12 182.406 237.86 176.156 230.66 cv
175.206 229.56 174.295 228.42 173.446 227.24 cv
167.956 219.59 164.726 210.21 164.726 200.09 cv
164.726 174.34 185.596 153.47 211.346 153.47 cv
237.096 153.47 257.966 174.34 257.966 200.09 cv
cp
f
382.146 200.09 mo
382.146 206.35 380.916 212.32 378.676 217.77 cv
377.035 221.76 374.855 225.48 372.226 228.83 cv
366.186 236.54 357.766 242.3 348.065 245 cv
344.075 246.12 339.865 246.71 335.525 246.71 cv
333.875 246.71 332.246 246.63 330.636 246.46 cv
329.585 246.35 328.545 246.2 327.516 246.02 cv
326.375 245.82 325.255 245.58 324.146 245.3 cv
323.936 245.25 323.716 245.2 323.505 245.14 cv
321.726 244.67 319.976 244.09 318.286 243.41 cv
315.306 242.23 312.466 240.74 309.826 238.99 cv
309.005 238.45 308.196 237.88 307.416 237.29 cv
305.855 236.11 304.375 234.84 302.976 233.47 cv
299.646 230.23 296.815 226.5 294.576 222.4 cv
290.956 215.77 288.896 208.17 288.896 200.09 cv
288.896 174.34 309.775 153.47 335.525 153.47 cv
361.275 153.47 382.146 174.34 382.146 200.09 cv
cp
f
506.325 200.09 mo
506.325 208.46 504.115 216.32 500.246 223.12 cv
497.525 227.9 493.976 232.16 489.796 235.69 cv
485.365 239.44 480.226 242.38 474.605 244.28 cv
469.926 245.85 464.916 246.71 459.706 246.71 cv
445.896 246.71 433.476 240.7 424.945 231.16 cv
424.436 230.6 423.945 230.02 423.466 229.43 cv
422.086 227.73 420.825 225.93 419.695 224.05 cv
415.496 217.04 413.075 208.85 413.075 200.09 cv
413.075 174.34 433.956 153.47 459.706 153.47 cv
485.445 153.47 506.325 174.34 506.325 200.09 cv
cp
f
77.1211 178.8 mo
77.1211 178.8 61.2261 184.879 60.4155 202.869 cv
59.2436 228.872 90.4058 222.844 90.4058 222.844 cv
90.4058 222.844 108.056 224.675 112.938 211.663 cv
117.821 198.652 102.127 190.798 102.127 190.798 cv
102.127 190.798 83.1001 174.043 77.1211 178.8 cv
cp
0 0 0 rgb
f
630.506 200.09 mo
630.506 212.44 625.706 223.67 617.855 232.01 cv
609.355 241.06 597.275 246.71 583.886 246.71 cv
568.466 246.71 554.796 239.23 546.315 227.7 cv
540.615 219.97 537.256 210.42 537.256 200.09 cv
537.256 174.34 558.136 153.47 583.886 153.47 cv
609.626 153.47 630.506 174.34 630.506 200.09 cv
cp
.929412 .866667 .839216 rgb
f
134.516 320.46 mo
134.516 328.47 132.496 336.01 128.926 342.59 cv
128.096 344.15 127.156 345.66 126.146 347.11 cv
123.236 351.3 119.636 354.99 115.525 358 cv
115.505 358.03 115.476 358.04 115.456 358.06 cv
115.186 358.26 114.916 358.46 114.636 358.64 cv
109.576 362.2 103.775 364.77 97.5156 366.08 cv
94.4155 366.74 91.1958 367.08 87.8955 367.08 cv
80.3257 367.08 73.1855 365.28 66.8657 362.07 cv
63.2158 360.23 59.8457 357.92 56.8257 355.22 cv
55.2056 353.76 53.6758 352.2 52.2656 350.53 cv
51.6255 349.78 51.0156 349.01 50.4355 348.22 cv
48.8857 346.14 47.5054 343.93 46.3154 341.6 cv
43.0854 335.25 41.2656 328.07 41.2656 320.46 cv
41.2656 294.71 62.1455 273.83 87.8955 273.83 cv
113.636 273.83 134.516 294.71 134.516 320.46 cv
cp
f
258.696 320.46 mo
258.696 331.66 254.746 341.93 248.166 349.97 cv
246.966 351.44 245.676 352.83 244.306 354.14 cv
241.576 356.76 238.536 359.04 235.226 360.93 cv
228.406 364.84 220.505 367.08 212.076 367.08 cv
209.275 367.08 206.536 366.83 203.875 366.36 cv
201.766 365.99 199.706 365.47 197.706 364.81 cv
191.545 362.83 185.946 359.59 181.206 355.39 cv
171.536 346.86 165.446 334.37 165.446 320.46 cv
165.446 294.71 186.326 273.83 212.076 273.83 cv
237.815 273.83 258.696 294.71 258.696 320.46 cv
cp
f
382.876 320.46 mo
382.876 327.54 381.296 334.24 378.476 340.25 cv
371.035 356.1 354.926 367.08 336.255 367.08 cv
320.206 367.08 306.056 358.98 297.666 346.64 cv
292.596 339.18 289.625 330.17 289.625 320.46 cv
289.625 294.71 310.505 273.83 336.255 273.83 cv
361.996 273.83 382.876 294.71 382.876 320.46 cv
cp
f
507.056 320.46 mo
507.056 328.26 505.146 335.61 501.746 342.07 cv
501.716 342.14 501.686 342.2 501.646 342.27 cv
501.456 342.63 501.266 342.98 501.056 343.33 cv
495.825 352.62 487.496 359.93 477.466 363.86 cv
476.846 364.1 476.216 364.33 475.586 364.55 cv
475.016 364.75 474.445 364.94 473.876 365.11 cv
473.285 365.29 472.695 365.45 472.105 365.6 cv
468.376 366.57 464.456 367.08 460.426 367.08 cv
458.686 367.08 456.966 366.98 455.275 366.79 cv
453.206 366.57 451.166 366.2 449.186 365.71 cv
447.726 365.35 446.306 364.92 444.905 364.42 cv
444.676 364.34 444.436 364.26 444.206 364.17 cv
443.666 363.97 443.136 363.76 442.605 363.54 cv
441.216 362.97 439.865 362.34 438.556 361.63 cv
437.996 361.33 437.445 361.02 436.896 360.7 cv
436.756 360.62 436.615 360.54 436.476 360.45 cv
435.386 359.8 434.336 359.11 433.315 358.38 cv
432.695 357.94 432.086 357.48 431.496 357.01 cv
428.605 354.73 425.996 352.11 423.726 349.21 cv
423.405 348.8 423.086 348.38 422.775 347.95 cv
422.216 347.18 421.676 346.4 421.155 345.59 cv
416.496 338.34 413.806 329.72 413.806 320.46 cv
413.806 294.71 434.686 273.83 460.426 273.83 cv
486.176 273.83 507.056 294.71 507.056 320.46 cv
cp
f
631.235 320.46 mo
631.235 326.47 630.096 332.22 628.025 337.5 cv
626.416 341.62 624.226 345.44 621.546 348.89 cv
621.075 349.51 620.586 350.11 620.065 350.7 cv
617.186 354.1 613.815 357.08 610.065 359.52 cv
609.065 360.17 608.046 360.79 606.996 361.36 cv
600.346 365.01 592.726 367.08 584.605 367.08 cv
575.065 367.08 566.206 364.21 558.815 359.3 cv
558.626 359.17 558.436 359.04 558.246 358.9 cv
556.546 357.75 554.926 356.48 553.405 355.09 cv
553.235 354.94 553.065 354.79 552.905 354.63 cv
551.855 353.67 550.855 352.65 549.905 351.59 cv
549.865 351.54 549.815 351.49 549.775 351.44 cv
542.445 343.21 537.985 332.36 537.985 320.46 cv
537.985 294.71 558.865 273.83 584.605 273.83 cv
610.355 273.83 631.235 294.71 631.235 320.46 cv
cp
f
67.2695 66.3369 mo
67.2695 70.1802 70.3852 73.2959 74.229 73.2959 cv
78.0723 73.2959 81.188 70.1802 81.188 66.3369 cv
81.188 62.4937 78.0723 59.3779 74.229 59.3779 cv
70.3852 59.3779 67.2695 62.4937 67.2695 66.3369 cv
cp
.898039 .392157 .270588 rgb
f
61.7197 75.5898 mo
61.7197 78.7578 64.2881 81.3262 67.456 81.3262 cv
70.624 81.3262 73.1924 78.7578 73.1924 75.5898 cv
73.1924 72.4219 70.624 69.8535 67.456 69.8535 cv
64.2881 69.8535 61.7197 72.4219 61.7197 75.5898 cv
cp
f
60.4443 85.8506 mo
60.4443 89.019 63.0127 91.5874 66.1807 91.5874 cv
69.3491 91.5874 71.917 89.019 71.917 85.8506 cv
71.917 82.6826 69.3491 80.1143 66.1807 80.1143 cv
63.0127 80.1143 60.4443 82.6826 60.4443 85.8506 cv
cp
f
476.956 357.63 mo
475.976 358.05 li
472.945 359.32 li
455.275 366.79 li
453.206 366.57 451.166 366.2 449.186 365.71 cv
447.726 365.35 446.306 364.92 444.905 364.42 cv
444.676 364.34 444.436 364.26 444.206 364.17 cv
443.666 363.97 443.136 363.76 442.605 363.54 cv
441.216 362.97 439.865 362.34 438.556 361.63 cv
437.996 361.33 437.445 361.02 436.896 360.7 cv
436.756 360.62 436.615 360.54 436.476 360.45 cv
435.386 359.8 434.336 359.11 433.315 358.38 cv
432.695 357.94 432.086 357.48 431.496 357.01 cv
428.605 354.73 425.996 352.11 423.726 349.21 cv
423.405 348.8 423.086 348.38 422.775 347.95 cv
428.615 338.9 439.886 324.46 453.346 322.65 cv
455.266 322.39 457.035 322.51 458.666 322.94 cv
462.636 323.98 465.775 326.85 468.246 330.52 cv
468.636 331.08 468.996 331.65 469.336 332.25 cv
475.436 342.64 476.956 357.63 476.956 357.63 cv
cp
.372549 .517647 .341176 rgb
f
62.5937 95.0176 mo
62.5937 97.6001 64.6875 99.6934 67.2695 99.6934 cv
69.852 99.6934 71.9453 97.6001 71.9453 95.0176 cv
71.9453 92.4351 69.852 90.3418 67.2695 90.3418 cv
64.6875 90.3418 62.5937 92.4351 62.5937 95.0176 cv
cp
.898039 .392157 .270588 rgb
f
443.056 122.61 mo
437.956 120.67 433.296 117.85 429.235 114.34 cv
429.046 114.18 428.855 114.01 428.676 113.84 cv
427.496 112.8 426.386 111.7 425.325 110.54 cv
424.945 110.12 424.565 109.7 424.206 109.27 cv
427.886 105.31 432.296 100.66 437.485 95.3701 cv
437.646 95.2002 437.815 95.04 437.985 94.8799 cv
439.596 93.3101 440.905 92.4399 441.966 92.1201 cv
449.516 89.8599 444.586 115.4 443.056 122.61 cv
cp
.466667 .447059 .827451 rgb
f
120.795 232.38 mo
120.696 232.49 120.585 232.6 120.486 232.7 cv
117.815 235.42 114.815 237.83 111.536 239.83 cv
111.375 239.93 111.206 240.03 111.045 240.13 cv
110.835 240.26 110.616 240.39 110.396 240.51 cv
103.565 244.46 95.6255 246.71 87.1655 246.71 cv
85.3857 246.71 83.6157 246.61 81.8857 246.42 cv
81.6455 246.4 81.4155 246.37 81.1855 246.34 cv
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
78.9258 246.04 76.7656 245.6 74.6655 245.01 cv
72.1958 244.33 69.8057 243.44 67.5254 242.38 cv
67.1758 242.22 66.8257 242.05 66.4756 241.88 cv
64.2256 240.77 62.0854 239.48 60.0757 238.03 cv
58.0557 236.59 56.1558 234.99 54.3955 233.24 cv
57.7754 223.89 66.4258 206.46 84.5654 203.62 cv
84.6055 203.62 84.6455 203.61 84.6855 203.6 cv
85.8955 203.42 87.1558 203.3 88.4556 203.25 cv
108.916 202.5 117.585 221.77 120.795 232.38 cv
cp
.486275 .376471 .32549 rgb
f
491.436 113.2 mo
489.825 114.7 488.105 116.08 486.285 117.35 cv
483.565 119.24 480.636 120.85 477.535 122.14 cv
472.686 124.15 467.416 125.36 461.886 125.62 cv
461.166 125.65 460.436 125.67 459.706 125.67 cv
459.346 125.67 458.976 125.67 458.605 125.66 cv
453.136 125.53 447.896 124.47 443.056 122.61 cv
437.956 120.67 433.296 117.85 429.235 114.34 cv
429.046 114.18 428.855 114.01 428.676 113.84 cv
430.186 107.85 432.896 100.02 437.485 95.3701 cv
437.646 95.2002 437.815 95.04 437.985 94.8799 cv
439.186 93.7798 440.535 92.8599 441.966 92.1201 cv
450.525 87.7002 462.025 89.1899 462.025 89.1899 cv
462.025 89.1899 464.846 89.23 468.815 90.3901 cv
468.815 90.3901 468.846 90.3999 468.896 90.4102 cv
468.945 90.4302 469.016 90.4502 469.096 90.48 cv
473.006 91.6201 477.966 93.8599 482.456 98.1401 cv
483.046 98.7002 483.626 99.2998 484.195 99.9302 cv
487.336 103.42 489.695 108.27 491.436 113.2 cv
cp
.466667 .447059 .827451 rgb
f
464.25 81.8071 mo
463.947 90.7651 li
463.947 90.7651 462.053 93.3188 456.178 93.6753 cv
451.802 93.9414 450.298 93.0405 450.298 93.0405 cv
451.06 88.5112 li
451.81 84.0938 li
462.463 82.1372 li
464.25 81.8071 li
cp
.94902 .494118 .392157 rgb
f
462.465 82.1606 mo
462.433 82.4336 462.322 82.7544 462.151 83.1216 cv
459.797 88.0796 453.64 89.0234 451.111 89.1934 cv
451.822 84.2549 li
462.465 82.1606 li
cp
0 0 0 rgb
f
450.094 61.353 mo
450.094 61.353 444.553 73.8062 446.472 80.8364 cv
448.392 87.8667 454.792 86.8047 458.626 85.4741 cv
462.46 84.1431 464.251 81.8096 464.251 81.8096 cv
464.251 81.8096 467.816 83.0449 470.229 79.7383 cv
472.641 76.4316 471.194 72.606 469.16 71.7183 cv
467.126 70.8301 464.69 72.2871 464.69 72.2871 cv
466.616 68.6699 li
466.616 68.6699 458.739 50.1694 450.094 61.353 cv
cp
.94902 .494118 .392157 rgb
f
450.476 76.147 mo
450.262 76.147 450.064 76.0093 449.998 75.7949 cv
449.133 72.9995 451.229 71.1514 451.319 71.0737 cv
451.526 70.8936 451.841 70.916 452.022 71.1255 cv
452.203 71.3335 452.181 71.6489 451.974 71.8301 cv
451.904 71.8906 450.285 73.3398 450.953 75.499 cv
451.035 75.7627 450.888 76.043 450.623 76.1245 cv
450.574 76.1396 450.524 76.147 450.476 76.147 cv
cp
0 0 0 rgb
f
465.221 78.2471 mo
465.098 78.2471 464.975 78.2017 464.878 78.1108 cv
464.677 77.9214 464.668 77.605 464.857 77.4038 cv
468.25 73.8086 li
468.438 73.6084 468.755 73.5991 468.956 73.7881 cv
469.157 73.9775 469.166 74.2939 468.977 74.4951 cv
465.584 78.0903 li
465.486 78.1943 465.354 78.2471 465.221 78.2471 cv
cp
f
468.813 77.2837 mo
468.788 77.2837 468.763 77.2817 468.737 77.2778 cv
466.391 76.9224 li
466.118 76.8813 465.93 76.6265 465.972 76.3535 cv
466.013 76.0796 466.27 75.8921 466.541 75.9341 cv
468.888 76.2896 li
469.16 76.3306 469.349 76.5854 469.307 76.8584 cv
469.27 77.1064 469.057 77.2837 468.813 77.2837 cv
cp
f
456.11 73.5625 mo
456.089 73.5625 456.067 73.561 456.046 73.5586 cv
455.772 73.5234 455.578 73.2729 455.613 72.999 cv
456.024 69.7788 li
456.06 69.5044 456.313 69.314 456.584 69.3462 cv
456.857 69.3813 457.052 69.6318 457.017 69.9058 cv
456.605 73.126 li
456.573 73.3784 456.358 73.5625 456.11 73.5625 cv
cp
f
449.191 72.9551 mo
449.167 72.9551 449.143 72.9536 449.117 72.9497 cv
448.845 72.9097 448.655 72.6553 448.695 72.3823 cv
449.161 69.2212 li
449.202 68.9482 449.453 68.7588 449.729 68.7993 cv
450.002 68.8394 450.191 69.0938 450.151 69.3667 cv
449.686 72.5278 li
449.648 72.7764 449.435 72.9551 449.191 72.9551 cv
cp
f
458.392 68.2085 mo
458.211 68.2085 458.036 68.1099 457.947 67.9375 cv
457.418 66.9082 455.977 67.1948 455.912 67.2085 cv
455.646 67.2617 455.378 67.0933 455.32 66.8232 cv
455.263 66.5537 455.434 66.2886 455.703 66.2305 cv
455.795 66.21 457.954 65.7666 458.836 67.4795 cv
458.963 67.7251 458.866 68.0269 458.62 68.1533 cv
458.547 68.1909 458.469 68.2085 458.392 68.2085 cv
cp
f
451.646 66.771 mo
451.486 66.771 451.33 66.6948 451.232 66.5532 cv
451.036 66.2651 450.809 66.1084 450.54 66.0742 cv
449.98 66.0073 449.312 66.4629 449.101 66.6465 cv
448.893 66.8286 448.577 66.8071 448.396 66.6006 cv
448.214 66.3936 448.232 66.0791 448.439 65.8965 cv
448.551 65.7983 449.558 64.9458 450.66 65.0815 cv
451.216 65.1504 451.699 65.4639 452.059 65.9888 cv
452.214 66.2168 452.155 66.5278 451.928 66.6836 cv
451.842 66.7427 451.743 66.771 451.646 66.771 cv
cp
f
464.69 72.2871 mo
464.69 72.2871 464.109 75.209 462.465 74.1519 cv
460.819 73.0942 464.69 67.7085 464.69 67.7085 cv
464.69 67.7085 460.146 69.2871 457.319 65.5664 cv
454.493 61.8462 455.809 59.5029 455.809 59.5029 cv
449.485 62.8252 li
449.485 62.8252 448.161 55.3403 450.39 53.9067 cv
452.618 52.4727 456.372 53.9067 456.372 53.9067 cv
456.372 53.9067 456.142 50.6841 462.465 51.4614 cv
468.787 52.2383 468.614 58.7998 468.614 58.7998 cv
468.614 58.7998 472.771 58.6147 474.177 62.3394 cv
475.583 66.0645 473.005 68.9399 473.005 68.9399 cv
473.005 68.9399 475.953 69.605 474.597 72.1699 cv
473.239 74.7349 471.487 75.9492 471.487 75.9492 cv
471.487 75.9492 470.67 70.542 464.69 72.2871 cv
cp
f
453.673 94.4663 mo
452.142 94.4663 450.508 94.2593 448.813 93.7417 cv
448.549 93.6611 448.4 93.3818 448.48 93.1177 cv
448.562 92.854 448.836 92.7012 449.105 92.7856 cv
456.916 95.1699 463.586 90.4092 463.652 90.3608 cv
463.875 90.1997 464.188 90.2466 464.351 90.4707 cv
464.513 90.6938 464.464 91.0068 464.24 91.1694 cv
464.012 91.3359 459.627 94.4663 453.673 94.4663 cv
cp
1 .698039 .333333 rgb
f
493.186 111.49 mo
492.615 112.08 492.035 112.65 491.436 113.2 cv
489.825 114.7 488.105 116.08 486.285 117.35 cv
483.565 119.24 480.636 120.85 477.535 122.14 cv
472.686 124.15 467.416 125.36 461.886 125.62 cv
468.815 90.3901 li
468.815 90.3901 468.846 90.3999 468.896 90.4102 cv
469.646 90.6602 475.865 92.7798 482.456 98.1401 cv
484.655 99.9199 486.896 102.06 488.985 104.61 cv
490.506 106.46 491.945 108.83 493.186 111.49 cv
cp
.466667 .447059 .827451 rgb
f
452.335 79.9751 mo
452.021 79.9658 451.804 79.7354 451.812 79.4595 cv
451.819 79.1841 452.046 78.9629 452.324 78.9746 cv
452.399 78.9731 454.072 78.998 455.43 77.4209 cv
455.61 77.2124 455.926 77.1895 456.135 77.3682 cv
456.344 77.5483 456.368 77.8643 456.188 78.0732 cv
454.614 79.9004 452.645 79.9751 452.335 79.9751 cv
cp
0 0 0 rgb
f
118.125 113.89 mo
116.056 115.75 113.806 117.42 111.416 118.87 cv
110.596 119.37 109.766 119.85 108.916 120.3 cv
98.0356 91.79 li
98.2256 91.8999 98.3857 91.9902 98.5454 92.1001 cv
98.7554 92.23 99.0356 92.4102 99.3657 92.6201 cv
99.5957 92.7798 99.8657 92.9502 100.146 93.1499 cv
103.466 95.4102 109.806 100.17 113.275 105.77 cv
114.545 107.81 116.375 110.91 118.125 113.89 cv
cp
.988235 .701961 .356863 rgb
f
111.416 118.87 mo
110.596 119.37 109.766 119.85 108.916 120.3 cv
102.426 123.73 95.0156 125.67 87.1655 125.67 cv
84.5854 125.67 82.0557 125.46 79.5854 125.05 cv
77.8154 124.77 76.0854 124.38 74.3857 123.9 cv
73.5557 92.8198 li
73.5557 92.8198 85.9658 84.9302 98.0356 91.79 cv
98.2256 91.8999 98.3857 91.9902 98.5454 92.1001 cv
98.7554 92.23 99.0356 92.4102 99.3657 92.6201 cv
99.5957 92.7798 99.8657 92.9502 100.146 93.1499 cv
100.716 93.5601 101.266 93.9902 101.815 94.46 cv
107.036 98.9502 109.875 108.73 111.416 118.87 cv
cp
f
81.4819 80.3638 mo
81.1392 90.8726 li
81.1392 90.8726 82.936 93.9551 89.0674 94.6553 cv
93.6348 95.1772 95.1616 92.8726 95.1616 92.8726 cv
94.3525 83.6406 li
83.331 80.8364 li
81.4819 80.3638 li
cp
.988235 .639216 .592157 rgb
f
83.331 80.8364 mo
83.3486 81.124 83.4463 81.4663 83.6035 81.8604 cv
85.7837 87.1865 92.1753 88.5278 94.8125 88.8511 cv
94.3525 83.6406 li
83.331 80.8364 li
cp
0 0 0 rgb
f
97.477 59.7632 mo
97.477 59.7632 102.562 73.1191 100.149 80.3687 cv
97.7368 87.6182 91.0972 86.1392 87.1592 84.5259 cv
83.2217 82.9121 81.4805 80.3662 81.4805 80.3662 cv
81.4805 80.3662 77.6777 81.4546 75.3423 77.8545 cv
73.0068 74.2544 74.7402 70.332 76.9209 69.5195 cv
79.1016 68.7065 81.5684 70.3716 81.5684 70.3716 cv
79.7598 66.4746 li
79.7598 66.4746 89.0684 47.5591 97.477 59.7632 cv
cp
.988235 .639216 .592157 rgb
f
79.5854 125.05 mo
77.8154 124.77 76.0854 124.38 74.3857 123.9 cv
67.4058 121.91 61.0957 118.35 55.8657 113.6 cv
56.1255 112.54 56.4258 111.48 56.7656 110.44 cv
60.8657 97.8701 73.5557 92.8198 73.5557 92.8198 cv
75.0557 98.9702 li
76.2256 102.47 77.0356 106.07 77.4858 109.74 cv
79.5854 125.05 li
cp
.988235 .701961 .356863 rgb
f
99.0234 65.6895 mo
98.8232 65.6895 98.6338 65.5684 98.5571 65.3701 cv
98.4961 65.2119 98.417 65.1665 98.3481 65.1426 cv
97.9878 65.0181 97.3018 65.3218 97.0259 65.4873 cv
96.79 65.6279 96.4829 65.5527 96.3403 65.3169 cv
96.1977 65.0806 96.2734 64.7739 96.5093 64.6313 cv
96.6362 64.5547 97.771 63.8892 98.6704 64.1963 cv
99.0508 64.3257 99.334 64.6069 99.4897 65.0088 cv
99.5893 65.2666 99.4614 65.5562 99.2041 65.6558 cv
99.1445 65.6787 99.0835 65.6895 99.0234 65.6895 cv
cp
0 0 0 rgb
f
92.3374 69.3218 mo
92.2143 69.3218 92.0908 69.2764 91.9941 69.1855 cv
91.7886 68.9917 91.1489 68.5112 90.5957 68.5532 cv
90.3599 68.5762 90.1592 68.7075 89.9819 68.9546 cv
89.8203 69.1787 89.5078 69.23 89.2842 69.0693 cv
89.0601 68.9082 89.0083 68.5957 89.1694 68.3716 cv
89.5161 67.8887 89.9775 67.6069 90.5044 67.5576 cv
91.5889 67.4541 92.5742 68.3569 92.6826 68.46 cv
92.8823 68.6504 92.8901 68.9653 92.7007 69.1655 cv
92.602 69.269 92.4702 69.3218 92.3374 69.3218 cv
cp
f
97.064 69.2559 mo
96.98 69.2559 96.895 69.2349 96.8174 69.1904 cv
96.5771 69.0537 96.4932 68.7485 96.6299 68.5088 cv
97.0063 67.8457 98.1182 66.7881 99.6328 67.5327 cv
99.8804 67.6543 99.9824 67.9541 99.8608 68.2021 cv
99.7383 68.4492 99.4394 68.5508 99.1914 68.4302 cv
98.1523 67.9189 97.563 68.8911 97.499 69.0029 cv
97.4067 69.165 97.2378 69.2559 97.064 69.2559 cv
cp
f
96.188 75.6104 mo
96.1636 75.6104 96.1387 75.6084 96.1138 75.605 cv
95.8408 75.564 95.6523 75.3096 95.6929 75.0366 cv
96.0474 72.6582 94.8076 69.6367 94.7954 69.6064 cv
94.6894 69.3516 94.8101 69.0591 95.0649 68.9531 cv
95.3188 68.8472 95.6118 68.9678 95.7183 69.2222 cv
95.7739 69.356 97.0776 72.5278 96.6821 75.1841 cv
96.645 75.4321 96.4316 75.6104 96.188 75.6104 cv
cp
f
92.769 79.2158 mo
92.7231 79.2158 92.6768 79.2095 92.6304 79.1963 cv
92.5166 79.1631 89.8315 78.3652 89.1064 76.1895 cv
89.019 75.9272 89.1606 75.644 89.4224 75.5571 cv
89.6865 75.4678 89.9673 75.6113 90.0547 75.873 cv
90.6128 77.5469 92.8857 78.229 92.9087 78.2358 cv
93.1733 78.313 93.3257 78.5903 93.2485 78.8555 cv
93.1851 79.0737 92.9858 79.2158 92.769 79.2158 cv
cp
f
80.8711 76.0283 mo
80.7505 76.0283 80.6294 75.9849 80.5337 75.897 cv
76.5054 72.21 li
76.3013 72.0239 76.2876 71.7075 76.4741 71.5039 cv
76.6601 71.2998 76.977 71.2866 77.1802 71.4727 cv
81.2085 75.1597 li
81.4126 75.3457 81.4263 75.6621 81.2397 75.8657 cv
81.1411 75.9736 81.0063 76.0283 80.8711 76.0283 cv
cp
f
76.644 75.7842 mo
76.4497 75.7842 76.2642 75.6699 76.1836 75.479 cv
76.0762 75.2246 76.1948 74.9316 76.4492 74.8237 cv
79.1572 73.6772 li
79.4092 73.5713 79.7046 73.6875 79.8125 73.9429 cv
79.9199 74.1973 79.8013 74.4902 79.5469 74.5981 cv
76.8389 75.7446 li
76.7754 75.7715 76.7095 75.7842 76.644 75.7842 cv
cp
f
81.5684 70.3716 mo
81.5684 70.3716 86.1855 70.1377 89.27 66.502 cv
92.3545 62.8662 93.9038 59.0698 93.9038 59.0698 cv
93.9038 59.0698 95.8306 59.4893 96.9971 61.0967 cv
97.855 62.2788 98.8481 63.9834 98.8481 63.9834 cv
98.8481 63.9834 99.2139 58.6924 96.6763 55.9619 cv
94.1387 53.2314 91.8071 54.021 91.8071 54.021 cv
91.8071 54.021 86.1211 50.4072 79.9141 55.3872 cv
73.707 60.3672 76.0298 70.0518 76.0298 70.0518 cv
76.0298 70.0518 79.1016 69 81.5684 70.3716 cv
cp
.898039 .392157 .270588 rgb
f
89.7749 95.2173 mo
89.3774 95.2173 88.9687 95.2017 88.5478 95.1675 cv
83.4326 94.75 79.7959 91.8125 79.6435 91.6875 cv
79.4302 91.5127 79.3989 91.1978 79.5737 90.9844 cv
79.7485 90.7705 80.062 90.7393 80.2773 90.9141 cv
80.312 90.9424 83.835 93.7798 88.6289 94.1704 cv
93.3984 94.5591 96.6958 92.3428 96.728 92.3203 cv
96.9575 92.1641 97.2676 92.2227 97.4233 92.4497 cv
97.5791 92.6772 97.522 92.9878 97.2949 93.144 cv
97.1616 93.2358 94.229 95.2173 89.7749 95.2173 cv
cp
.466667 .447059 .827451 rgb
f
204.715 183.217 mo
204.715 183.217 191.457 178.607 189.789 192.28 cv
188.12 205.954 208.995 211.611 212.067 199.688 cv
215.138 187.765 204.715 183.217 204.715 183.217 cv
cp
.678431 .662745 .768627 rgb
f
600.666 225.52 mo
567.677 243.8 li
565.127 242.86 562.687 241.7 560.366 240.33 cv
555.276 237.36 550.807 233.45 547.196 228.84 cv
550.656 221.5 558.866 208.75 575.387 204.72 cv
578.727 203.91 581.677 203.99 584.257 204.7 cv
596.597 208.07 600.666 225.52 600.666 225.52 cv
cp
.486275 .376471 .32549 rgb
f
448.696 301.707 mo
448.696 301.707 445.134 291.368 448.211 286.819 cv
450.958 282.76 464.455 284.913 469.253 288.028 cv
474.05 291.143 474.209 295.232 474.209 295.232 cv
474.209 295.232 476.559 295.854 477.104 297.875 cv
477.651 299.896 475.901 303.222 475.901 303.222 cv
475.901 303.222 473.52 300.198 470.112 302.125 cv
466.704 304.052 448.696 301.707 448.696 301.707 cv
cp
0 0 0 rgb
f
477.466 363.86 mo
476.846 364.1 476.216 364.33 475.586 364.55 cv
475.016 364.75 474.445 364.94 473.876 365.11 cv
473.285 365.29 472.695 365.45 472.105 365.6 cv
468.376 366.57 464.456 367.08 460.426 367.08 cv
458.686 367.08 456.966 366.98 455.275 366.79 cv
453.206 366.57 451.166 366.2 449.186 365.71 cv
447.726 365.35 446.306 364.92 444.905 364.42 cv
444.676 364.34 444.436 364.26 444.206 364.17 cv
443.666 363.97 443.136 363.76 442.605 363.54 cv
441.216 362.97 439.865 362.34 438.556 361.63 cv
439.146 356.17 439.676 352.49 439.676 352.49 cv
453.346 322.65 li
458.666 322.94 li
458.676 322.94 467.056 323.39 467.056 323.39 cv
467.065 323.42 467.075 323.45 467.075 323.48 cv
467.086 323.51 469.336 332.25 469.336 332.25 cv
475.976 358.05 li
477.466 363.86 li
cp
1 1 1 rgb
f
466.824 317.83 mo
467.152 325.701 li
467.152 325.701 464.275 328.333 460.479 328.525 cv
455.352 328.786 453.41 324.908 453.41 324.908 cv
453.139 315.676 li
466.824 317.83 li
cp
.988235 .639216 .592157 rgb
f
466.823 317.818 mo
466.823 317.818 465.429 324.882 459.576 324.207 cv
454.858 323.664 453.186 316.516 453.186 316.516 cv
466.823 317.818 li
cp
0 0 0 rgb
f
450.168 295.932 mo
450.168 295.932 447.924 310.109 452.73 316.698 cv
457.537 323.286 463.422 321.107 466.021 318.967 cv
469.527 316.078 470.136 312.215 470.136 312.215 cv
470.136 312.215 475.115 313.033 476.629 308.944 cv
478.219 304.648 475.023 301.332 472.543 301.214 cv
470.062 301.095 469.788 301.555 469.788 301.555 cv
470.362 297.005 li
470.362 297.005 454.758 280.792 450.168 295.932 cv
cp
.988235 .639216 .592157 rgb
f
452.773 302.453 mo
452.773 302.453 445.168 299.504 444.779 305.33 cv
444.329 312.079 452.37 311.871 452.37 311.871 cv
452.773 302.453 li
cp
f
471.012 301.961 mo
471.012 301.961 468.435 303.14 462.779 299.291 cv
457.124 295.441 458.565 290.62 458.565 290.62 cv
458.565 290.62 451.177 295.6 449.683 301.564 cv
448.189 307.53 446.783 287.756 455.362 287.854 cv
463.942 287.952 476.949 293.102 471.012 301.961 cv
cp
0 0 0 rgb
f
453.346 322.65 mo
453.346 322.65 448.436 336.77 444.926 364.24 cv
444.916 364.3 444.905 364.36 444.905 364.42 cv
444.676 364.34 444.436 364.26 444.206 364.17 cv
443.666 363.97 443.136 363.76 442.605 363.54 cv
441.216 362.97 439.865 362.34 438.556 361.63 cv
437.996 361.33 437.445 361.02 436.896 360.7 cv
436.756 360.62 436.615 360.54 436.476 360.45 cv
435.386 359.8 434.336 359.11 433.315 358.38 cv
433.565 354.81 433.726 352.59 433.726 352.59 cv
453.346 322.65 li
cp
.372549 .517647 .341176 rgb
f
501.746 342.07 mo
501.716 342.14 501.686 342.2 501.646 342.27 cv
501.456 342.63 501.266 342.98 501.056 343.33 cv
495.825 352.62 487.496 359.93 477.466 363.86 cv
476.846 364.1 476.216 364.33 475.586 364.55 cv
475.016 364.75 474.445 364.94 473.876 365.11 cv
473.596 363.34 473.285 361.39 472.945 359.32 cv
471.556 350.73 469.815 339.99 468.246 330.52 cv
467.846 328.08 467.456 325.72 467.086 323.51 cv
467.075 323.45 467.065 323.42 467.056 323.39 cv
467.016 323.09 466.966 322.8 466.916 322.51 cv
466.916 322.51 486.206 320.99 501.075 341.13 cv
501.306 341.44 501.525 341.75 501.746 342.07 cv
cp
f
470.837 308.805 mo
470.722 308.805 470.606 308.766 470.513 308.686 cv
470.303 308.506 470.277 308.19 470.456 307.98 cv
473.691 304.186 li
473.872 303.976 474.188 303.951 474.396 304.129 cv
474.606 304.309 474.632 304.624 474.453 304.834 cv
471.218 308.629 li
471.118 308.745 470.979 308.805 470.837 308.805 cv
cp
0 0 0 rgb
f
474.407 307.651 mo
474.39 307.651 474.373 307.65 474.356 307.648 cv
471.974 307.409 li
471.698 307.382 471.498 307.137 471.526 306.862 cv
471.554 306.586 471.819 306.385 472.073 306.415 cv
474.456 306.654 li
474.731 306.682 474.932 306.927 474.903 307.201 cv
474.878 307.459 474.66 307.651 474.407 307.651 cv
cp
f
463.209 304.157 mo
462.936 304.157 462.712 303.938 462.709 303.663 cv
462.681 301.297 li
462.678 301.021 462.898 300.794 463.175 300.791 cv
463.454 300.791 463.678 301.011 463.681 301.285 cv
463.709 303.651 li
463.712 303.928 463.491 304.154 463.215 304.157 cv
463.213 304.157 463.211 304.157 463.209 304.157 cv
cp
f
454.399 304.601 mo
454.118 304.598 453.896 304.371 453.899 304.095 cv
453.926 301.729 li
453.929 301.454 454.152 301.234 454.426 301.234 cv
454.707 301.237 454.929 301.464 454.926 301.74 cv
454.899 304.106 li
454.896 304.381 454.673 304.601 454.399 304.601 cv
cp
f
449.283 308.56 mo
449.128 308.56 448.976 308.487 448.878 308.352 cv
446.117 304.523 li
445.955 304.3 446.006 303.987 446.23 303.826 cv
446.452 303.662 446.766 303.715 446.928 303.939 cv
449.688 307.768 li
449.851 307.991 449.8 308.304 449.575 308.465 cv
449.487 308.529 449.385 308.56 449.283 308.56 cv
cp
f
446.119 307.512 mo
445.873 307.512 445.658 307.329 445.625 307.078 cv
445.588 306.805 445.779 306.553 446.054 306.517 cv
448.248 306.221 li
448.515 306.172 448.773 306.375 448.81 306.649 cv
448.847 306.923 448.655 307.175 448.381 307.211 cv
446.187 307.507 li
446.164 307.511 446.142 307.512 446.119 307.512 cv
cp
f
458.902 311.363 mo
458.746 311.363 458.592 311.29 458.494 311.152 cv
456.494 308.333 458.066 304.662 458.134 304.507 cv
458.244 304.255 458.537 304.139 458.792 304.25 cv
459.045 304.36 459.16 304.655 459.05 304.908 cv
459.036 304.94 457.641 308.221 459.311 310.574 cv
459.47 310.799 459.417 311.111 459.191 311.271 cv
459.104 311.333 459.003 311.363 458.902 311.363 cv
cp
f
461.863 313.218 mo
462.133 313.281 462.417 313.294 462.623 313.169 cv
462.837 313.041 462.982 312.753 463.054 312.331 cv
461.863 313.218 li
cp
462.224 314.266 mo
461.433 314.266 460.702 313.838 460.594 313.771 cv
460.452 313.685 460.362 313.533 460.355 313.367 cv
460.348 313.201 460.423 313.043 460.556 312.943 cv
463.296 310.903 li
463.444 310.793 463.642 310.773 463.808 310.853 cv
463.975 310.931 464.085 311.095 464.094 311.279 cv
464.165 312.683 463.842 313.608 463.133 314.029 cv
462.843 314.202 462.528 314.266 462.224 314.266 cv
cp
f
452.993 299.913 mo
452.815 299.913 452.644 299.818 452.553 299.65 cv
452.422 299.407 452.513 299.104 452.756 298.973 cv
454.774 297.883 li
455.015 297.754 455.319 297.842 455.452 298.086 cv
455.583 298.329 455.492 298.632 455.249 298.764 cv
453.23 299.854 li
453.155 299.894 453.074 299.913 452.993 299.913 cv
cp
f
463.991 299.703 mo
463.931 299.703 463.869 299.692 463.81 299.669 cv
460.788 298.488 li
460.53 298.388 460.403 298.098 460.504 297.841 cv
460.604 297.582 460.894 297.455 461.151 297.557 cv
464.173 298.737 li
464.431 298.838 464.558 299.128 464.457 299.385 cv
464.38 299.583 464.191 299.703 463.991 299.703 cv
cp
f
460.266 329.334 mo
459.921 329.334 459.578 329.311 459.235 329.265 cv
455.316 328.729 453.083 325.323 452.99 325.179 cv
452.841 324.947 452.907 324.638 453.139 324.488 cv
453.369 324.342 453.679 324.405 453.83 324.637 cv
453.851 324.669 455.92 327.807 459.38 328.274 cv
461.753 328.602 464.261 327.604 466.82 325.327 cv
467.024 325.146 467.341 325.162 467.526 325.369 cv
467.709 325.575 467.691 325.892 467.484 326.075 cv
465.05 328.241 462.626 329.334 460.266 329.334 cv
cp
.898039 .392157 .270588 rgb
f
447.365 190.149 mo
447.365 190.149 436.525 198.325 435.718 208.255 cv
434.497 223.284 451.593 216.709 453.471 207.128 cv
455.35 197.547 447.365 190.149 447.365 190.149 cv
cp
0 0 0 rgb
f
489.796 235.69 mo
485.365 239.44 480.226 242.38 474.605 244.28 cv
469.926 245.85 464.916 246.71 459.706 246.71 cv
445.896 246.71 433.476 240.7 424.945 231.16 cv
424.436 230.6 423.945 230.02 423.466 229.43 cv
452.976 208.05 li
452.996 208.04 454.115 207.22 454.115 207.22 cv
465.706 208.16 li
470.516 208.55 li
489.796 235.69 li
cp
.988235 .701961 .356863 rgb
f
446.394 189.125 mo
446.394 189.125 442.481 184.803 443.608 178.104 cv
444.373 173.562 446.394 172.092 446.394 172.092 cv
446.394 172.092 443.315 165.893 452.479 166.268 cv
461.644 166.644 467.035 171.143 467.035 171.143 cv
467.035 171.143 471.224 169.086 473.103 173.971 cv
474.981 178.855 473.103 186.061 473.103 186.061 cv
446.394 189.125 li
cp
0 0 0 rgb
f
454.115 207.97 mo
424.945 231.16 li
424.436 230.6 423.945 230.02 423.466 229.43 cv
422.086 227.73 420.825 225.93 419.695 224.05 cv
420.596 223.24 421.535 222.43 422.506 221.62 cv
435.876 210.47 449.096 208.42 452.976 208.05 cv
453.726 207.98 454.115 207.97 454.115 207.97 cv
cp
.988235 .701961 .356863 rgb
f
466.512 196.677 mo
466.286 208.632 li
466.286 208.632 464.203 212.004 457.646 212.364 cv
452.76 212.633 451.266 209.908 451.266 209.908 cv
452.644 199.484 li
464.519 197.083 li
466.512 196.677 li
cp
.94902 .494118 .392157 rgb
f
500.246 223.12 mo
497.525 227.9 493.976 232.16 489.796 235.69 cv
485.365 239.44 480.226 242.38 474.605 244.28 cv
482.146 235.09 li
465.706 208.16 li
465.586 207.97 li
465.586 207.97 467.476 208.04 470.516 208.55 cv
477.436 209.7 490.296 213.11 500.246 223.12 cv
cp
.988235 .701961 .356863 rgb
f
466.512 195.994 mo
466.476 196.299 466.351 196.657 466.159 197.065 cv
463.516 202.591 454.648 204.695 451.827 204.877 cv
452.636 199.368 li
466.512 195.994 li
cp
0 0 0 rgb
f
450.781 173.807 mo
450.781 173.807 444.558 187.686 446.677 195.537 cv
448.796 203.387 455.941 202.224 460.224 200.75 cv
464.507 199.278 466.513 196.679 466.513 196.679 cv
466.513 196.679 470.486 198.069 473.189 194.387 cv
475.892 190.706 474.29 186.432 472.023 185.435 cv
469.756 184.437 467.033 186.055 467.033 186.055 cv
469.193 182.025 li
469.193 182.025 460.464 161.356 450.781 173.807 cv
cp
.94902 .494118 .392157 rgb
f
467.033 186.055 mo
467.033 186.055 461.04 187.265 456.876 180.595 cv
452.713 173.925 453.095 171.187 453.095 171.187 cv
448.947 178.072 li
448.947 178.072 448.02 173.297 449.929 170.254 cv
451.838 167.211 453.82 167.841 453.82 167.841 cv
467.035 171.143 li
470.515 181.735 li
467.033 186.055 li
cp
0 0 0 rgb
f
451.256 191.578 mo
451.042 191.578 450.844 191.439 450.777 191.224 cv
449.856 188.215 451.979 185.168 452.07 185.04 cv
452.23 184.814 452.541 184.762 452.767 184.921 cv
452.992 185.08 453.046 185.392 452.887 185.618 cv
452.867 185.645 450.958 188.397 451.734 190.931 cv
451.814 191.195 451.666 191.475 451.402 191.556 cv
451.354 191.571 451.304 191.578 451.256 191.578 cv
cp
f
467.607 192.649 mo
467.483 192.649 467.36 192.604 467.264 192.512 cv
467.063 192.322 467.055 192.005 467.245 191.805 cv
471.043 187.804 li
471.232 187.604 471.55 187.597 471.749 187.786 cv
471.95 187.976 471.958 188.292 471.768 188.493 cv
467.97 192.494 li
467.872 192.597 467.739 192.649 467.607 192.649 cv
cp
f
471.619 191.586 mo
471.594 191.586 471.567 191.584 471.542 191.58 cv
468.925 191.176 li
468.651 191.134 468.465 190.878 468.507 190.605 cv
468.549 190.333 468.809 190.149 469.077 190.188 cv
471.694 190.592 li
471.968 190.634 472.154 190.889 472.112 191.162 cv
472.074 191.409 471.861 191.586 471.619 191.586 cv
cp
f
454.588 194.114 mo
455.396 194.472 456.41 194.763 456.883 194.404 cv
457.401 194.006 457.423 193.22 457.36 192.667 cv
454.588 194.114 li
cp
456.274 195.565 mo
454.957 195.565 453.46 194.674 453.243 194.541 cv
453.091 194.447 453 194.277 453.006 194.098 cv
453.013 193.918 453.115 193.755 453.274 193.672 cv
457.494 191.469 li
457.624 191.4 457.78 191.393 457.92 191.451 cv
458.057 191.509 458.161 191.625 458.204 191.768 cv
458.233 191.864 458.894 194.124 457.49 195.198 cv
457.143 195.464 456.719 195.565 456.274 195.565 cv
cp
f
448.571 180.164 mo
448.333 180.164 448.122 179.992 448.08 179.75 cv
448.032 179.477 448.215 179.218 448.486 179.171 cv
450.961 178.74 li
451.228 178.696 451.491 178.875 451.539 179.147 cv
451.587 179.419 451.404 179.678 451.133 179.726 cv
448.658 180.156 li
448.629 180.161 448.601 180.164 448.571 180.164 cv
cp
f
458.86 181.789 mo
458.784 181.789 458.707 181.771 458.635 181.735 cv
454.575 179.679 li
454.328 179.554 454.229 179.253 454.354 179.007 cv
454.479 178.76 454.782 178.663 455.026 178.787 cv
459.086 180.842 li
459.333 180.967 459.432 181.268 459.307 181.515 cv
459.219 181.688 459.042 181.789 458.86 181.789 cv
cp
f
474.604 190.149 mo
474.604 190.149 483.247 197.641 482.026 209.852 cv
480.805 222.063 468.696 220.495 466.153 216.039 cv
462.301 209.288 466.513 196.679 466.513 196.679 cv
466.513 196.679 473.938 197.923 474.604 190.149 cv
cp
f
448.572 185.884 mo
448.523 185.884 448.475 185.877 448.426 185.862 cv
448.161 185.781 448.014 185.501 448.095 185.237 cv
448.788 182.978 li
448.186 182.24 li
448.011 182.026 448.042 181.711 448.256 181.536 cv
448.469 181.362 448.784 181.392 448.959 181.607 cv
449.731 182.552 li
449.838 182.682 449.872 182.855 449.822 183.016 cv
449.05 185.531 li
448.984 185.746 448.786 185.884 448.572 185.884 cv
cp
f
456.146 186.561 mo
456.098 186.561 456.049 186.554 456 186.539 cv
455.735 186.458 455.588 186.178 455.669 185.914 cv
456.36 183.661 li
455.472 182.624 li
455.292 182.415 455.316 182.099 455.526 181.919 cv
455.735 181.741 456.053 181.764 456.231 181.974 cv
457.299 183.219 li
457.41 183.349 457.447 183.527 457.396 183.691 cv
456.624 186.208 li
456.559 186.422 456.36 186.561 456.146 186.561 cv
cp
f
457.679 212.847 mo
453.423 212.847 450.901 210.525 450.865 210.491 cv
450.665 210.302 450.656 209.986 450.846 209.785 cv
451.035 209.586 451.351 209.576 451.552 209.764 cv
451.752 209.953 456.528 214.298 464.284 209.945 cv
464.526 209.808 464.831 209.896 464.965 210.136 cv
465.101 210.377 465.015 210.682 464.774 210.816 cv
462.076 212.331 459.685 212.847 457.679 212.847 cv
cp
1 1 1 rgb
f
356.423 88.8398 mo
356.423 88.8398 355.571 42.7456 339.268 41.084 cv
322.963 39.4229 321.032 50.8799 321.032 50.8799 cv
321.032 50.8799 316.967 52.3276 316.145 58.5249 cv
315.322 64.7222 314.937 89.4443 314.937 89.4443 cv
351.753 91.5513 li
356.423 88.8398 li
cp
.898039 .392157 .270588 rgb
f
373.416 105.76 mo
372.836 106.73 372.226 107.68 371.575 108.61 cv
371.445 108.78 371.315 108.94 371.176 109.1 cv
370.315 110.12 369.405 111.11 368.466 112.05 cv
366.945 113.57 365.315 114.99 363.586 116.28 cv
362.746 116.92 361.876 117.53 360.985 118.11 cv
360.886 118.18 360.785 118.24 360.676 118.3 cv
359.416 119.12 358.105 119.88 356.756 120.56 cv
356.445 120.72 356.136 120.88 355.815 121.03 cv
354.365 121.73 352.876 122.36 351.355 122.91 cv
349.336 123.64 347.256 124.24 345.115 124.68 cv
342.016 125.33 338.815 125.67 335.525 125.67 cv
334.875 125.67 334.216 125.66 333.565 125.63 cv
332.815 125.6 332.076 125.55 331.335 125.48 cv
331.286 125.48 331.246 125.47 331.196 125.47 cv
329.806 125.34 328.426 125.15 327.076 124.89 cv
326.295 124.75 325.525 124.59 324.766 124.41 cv
322.545 123.89 320.396 123.21 318.315 122.37 cv
316.505 121.66 314.755 120.83 313.056 119.89 cv
313.016 119.87 312.986 119.85 312.946 119.83 cv
312.746 119.72 312.545 119.61 312.355 119.49 cv
311.746 119.15 311.136 118.79 310.545 118.41 cv
307.426 106.09 306.176 94.9199 310.036 90.3901 cv
310.226 90.1401 310.456 89.9102 310.696 89.7002 cv
311.605 88.9199 312.576 88.21 313.585 87.54 cv
313.625 87.52 313.656 87.5 313.686 87.48 cv
315.366 86.3901 317.176 85.4502 319.076 84.6499 cv
319.096 84.6299 319.125 84.6201 319.136 84.6201 cv
331.375 79.52 347.155 80.3701 355.756 83.96 cv
361.285 86.27 368.096 96.4199 373.416 105.76 cv
cp
.486275 .376471 .32549 rgb
f
327.982 72.3271 mo
327.981 83.6489 li
327.981 83.6489 330.023 86.9033 336.646 87.4419 cv
341.58 87.8433 343.143 85.3096 343.143 85.3096 cv
341.947 75.4023 li
329.988 72.771 li
327.982 72.3271 li
cp
.988235 .639216 .592157 rgb
f
328 71.6372 mo
328.028 71.9463 328.146 72.311 328.329 72.7295 cv
330.861 78.3848 339.776 80.7388 342.626 80.9941 cv
341.947 75.4023 li
328 71.6372 li
cp
0 0 0 rgb
f
363.956 111.75 mo
363.436 116.39 li
363.075 116.67 362.706 116.93 362.336 117.19 cv
362.966 111.64 li
363.746 104.66 360.275 96.0098 360.235 95.9199 cv
360.136 95.6602 360.256 95.3701 360.516 95.27 cv
360.775 95.1602 361.056 95.29 361.166 95.54 cv
361.306 95.9102 364.766 104.52 363.956 111.75 cv
cp
1 1 1 rgb
f
344.474 49.5967 mo
344.474 49.5967 350.414 63.7915 348.071 71.6782 cv
345.729 79.5645 338.532 78.2056 334.238 76.6074 cv
329.943 75.0088 327.98 72.3296 327.98 72.3296 cv
327.98 72.3296 323.926 73.6348 321.286 69.8423 cv
318.647 66.0498 320.375 61.7681 322.693 60.8169 cv
325.012 59.8657 327.725 61.5713 327.725 61.5713 cv
325.642 57.4404 li
325.642 57.4404 334.996 36.7578 344.474 49.5967 cv
cp
.988235 .639216 .592157 rgb
f
343.554 67.5522 mo
343.501 67.5522 343.448 67.5439 343.396 67.5264 cv
343.134 67.439 342.992 67.1558 343.079 66.894 cv
343.93 64.3477 342.066 61.5137 342.048 61.4854 cv
341.895 61.2559 341.956 60.9453 342.185 60.792 cv
342.414 60.6372 342.724 60.6992 342.878 60.9282 cv
342.967 61.0601 345.035 64.1934 344.028 67.2104 cv
343.958 67.4199 343.763 67.5522 343.554 67.5522 cv
cp
0 0 0 rgb
f
326.988 68.2202 mo
326.852 68.2202 326.716 68.1646 326.617 68.0552 cv
322.878 63.9121 li
322.692 63.707 322.709 63.3911 322.914 63.2061 cv
323.119 63.02 323.436 63.0371 323.62 63.2422 cv
327.359 67.3853 li
327.545 67.5903 327.528 67.9063 327.323 68.0913 cv
327.228 68.1777 327.107 68.2202 326.988 68.2202 cv
cp
f
322.958 67.043 mo
322.711 67.043 322.495 66.8589 322.463 66.6069 cv
322.428 66.333 322.621 66.0825 322.896 66.0469 cv
325.553 65.7046 li
325.818 65.6714 326.077 65.8628 326.112 66.1367 cv
326.147 66.4106 325.954 66.6611 325.68 66.6968 cv
323.022 67.0391 li
323.001 67.0415 322.979 67.043 322.958 67.043 cv
cp
f
346.559 56.0757 mo
346.525 56.0757 346.493 56.0728 346.46 56.0659 cv
343.968 55.5679 li
343.696 55.5137 343.521 55.2505 343.575 54.9795 cv
343.63 54.7075 343.896 54.5337 344.163 54.5874 cv
346.655 55.0854 li
346.927 55.1396 347.102 55.4028 347.048 55.6738 cv
347 55.9116 346.792 56.0757 346.559 56.0757 cv
cp
f
336.111 57.458 mo
335.925 57.458 335.745 57.3525 335.66 57.1724 cv
335.541 56.9233 335.647 56.625 335.896 56.5063 cv
339.235 54.9199 li
339.483 54.8027 339.783 54.9067 339.901 55.1572 cv
340.021 55.4063 339.914 55.7046 339.665 55.8232 cv
336.326 57.4097 li
336.257 57.4424 336.184 57.458 336.111 57.458 cv
cp
f
345.412 61.8623 mo
345.193 61.8623 344.992 61.7178 344.931 61.4971 cv
344.214 58.9326 li
344.169 58.7715 344.207 58.5986 344.316 58.4722 cv
345.121 57.5356 li
345.302 57.3271 345.616 57.3027 345.826 57.4819 cv
346.035 57.6621 346.06 57.9775 345.879 58.187 cv
345.249 58.9209 li
345.894 61.2275 li
345.968 61.4937 345.813 61.7695 345.547 61.8438 cv
345.502 61.8564 345.456 61.8623 345.412 61.8623 cv
cp
f
337.274 62.3672 mo
337.056 62.3672 336.854 62.2227 336.793 62.002 cv
336.075 59.4375 li
336.029 59.2725 336.07 59.0952 336.186 58.9678 cv
337.297 57.7349 li
337.481 57.5303 337.798 57.5137 338.003 57.6982 cv
338.208 57.8833 338.225 58.1997 338.039 58.4048 cv
337.112 59.4331 li
337.756 61.7324 li
337.83 61.9985 337.675 62.2744 337.409 62.3486 cv
337.364 62.3613 337.318 62.3672 337.274 62.3672 cv
cp
f
348.541 54.6387 mo
348.541 54.6387 344.63 53.8579 341.887 53.9604 cv
339.144 54.063 339.144 54.063 339.144 54.063 cv
338.03 49.6509 li
338.044 54.4639 li
338.044 54.4639 336.107 54.7964 334.19 55.7988 cv
332.273 56.8013 331.001 58.0366 331.001 58.0366 cv
329.182 54.3252 li
329.948 58.998 li
327.725 61.5713 li
324.37 58.4297 li
326.518 51.9165 li
326.518 51.9165 331.581 44.8477 331.972 44.7632 cv
332.362 44.6792 339.663 44.2769 339.663 44.2769 cv
339.663 44.2769 345.944 46.7319 346.097 46.9385 cv
346.248 47.145 348.541 54.6387 348.541 54.6387 cv
cp
.898039 .392157 .270588 rgb
f
337.526 87.5903 mo
334.65 87.5903 331.068 86.814 327.226 84.1577 cv
326.998 84.001 326.941 83.6895 327.099 83.4624 cv
327.255 83.2334 327.566 83.1792 327.794 83.3354 cv
336.452 89.3198 343.419 85.3633 343.71 85.1914 cv
343.949 85.0498 344.254 85.1309 344.395 85.3687 cv
344.534 85.6064 344.456 85.9121 344.219 86.0527 cv
344.174 86.0791 341.537 87.5903 337.526 87.5903 cv
cp
1 1 1 rgb
f
331.196 125.47 mo
329.806 125.34 328.426 125.15 327.076 124.89 cv
326.295 124.75 325.525 124.59 324.766 124.41 cv
322.545 123.89 320.396 123.21 318.315 122.37 cv
316.505 121.66 314.755 120.83 313.056 119.89 cv
313.016 119.87 312.986 119.85 312.946 119.83 cv
312.746 119.72 312.545 119.61 312.355 119.49 cv
311.746 119.15 311.136 118.79 310.545 118.41 cv
309.996 118.07 309.466 117.71 308.936 117.34 cv
307.986 116.69 307.056 115.99 306.156 115.25 cv
306.045 115.17 305.946 115.09 305.835 115 cv
304.565 113.94 303.346 112.82 302.186 111.64 cv
301.855 111.31 301.536 110.97 301.226 110.63 cv
300.486 109.84 299.775 109.01 299.116 108.17 cv
298.966 107.99 298.826 107.82 298.686 107.64 cv
298.666 107.62 298.656 107.6 298.646 107.58 cv
301.936 99.2798 306.236 93.8599 310.036 90.3901 cv
311.295 89.23 312.496 88.2998 313.585 87.54 cv
313.625 87.52 313.656 87.5 313.686 87.48 cv
316.525 85.5298 318.636 84.7798 319.076 84.6499 cv
319.096 84.6299 319.125 84.6201 319.136 84.6201 cv
319.156 84.6201 331.196 125.47 331.196 125.47 cv
cp
.486275 .376471 .32549 rgb
f
204.974 295.492 mo
204.974 295.492 195.997 289.407 185.378 295.305 cv
174.759 301.201 178.089 312.141 178.089 312.141 cv
178.089 312.141 169.763 322.58 173.653 332.95 cv
177.544 343.32 194.842 346.27 202.524 334.574 cv
210.207 322.878 198.009 312.451 198.009 312.451 cv
198.009 312.451 207.905 312.397 204.974 295.492 cv
cp
.898039 .392157 .270588 rgb
f
248.166 349.97 mo
246.966 351.44 245.676 352.83 244.306 354.14 cv
241.576 356.76 238.536 359.04 235.226 360.93 cv
235.315 347.29 240.666 338.12 240.666 338.12 cv
241.036 338.8 243.815 343.82 248.166 349.97 cv
cp
.988235 .639216 .592157 rgb
f
229.664 304.704 mo
229.664 304.704 233.499 292.843 232.975 289.843 cv
232.452 286.844 219.869 282.971 209.871 287.632 cv
199.874 292.292 199.201 305.438 201.456 310.874 cv
207.26 324.875 219.325 318.432 219.325 318.432 cv
219.325 318.432 238.549 312.572 229.664 304.704 cv
cp
.898039 .392157 .270588 rgb
f
244.306 354.14 mo
241.576 356.76 238.536 359.04 235.226 360.93 cv
228.406 364.84 220.505 367.08 212.076 367.08 cv
209.275 367.08 206.536 366.83 203.875 366.36 cv
201.766 365.99 199.706 365.47 197.706 364.81 cv
198.216 354.92 198.886 344.72 199.716 337.86 cv
200.246 333.47 200.846 330.45 201.516 329.74 cv
202.116 329.1 203.315 328.5 204.976 328 cv
207.545 327.23 211.146 326.71 215.136 326.68 cv
219.246 326.63 223.746 327.11 227.926 328.35 cv
231.716 329.49 235.246 331.25 237.946 333.85 cv
238.986 334.85 239.896 336.3 240.666 338.12 cv
242.416 342.15 243.556 347.83 244.306 354.14 cv
cp
.313726 .470588 .286275 rgb
f
227.917 320.217 mo
227.927 320.511 li
227.92 326.06 li
227.932 330.409 li
227.932 330.409 228.327 331.404 223.491 331.279 cv
217.009 331.085 214.805 328.262 214.805 328.262 cv
214.109 318.093 li
216.084 318.401 li
227.917 320.217 li
cp
.988235 .639216 .592157 rgb
f
227.938 320.809 mo
227.922 325.932 li
224.868 325.688 219.28 324.604 216.847 319.915 cv
216.659 319.533 216.53 319.188 216.481 318.899 cv
227.916 320.731 li
227.938 320.809 li
cp
0 0 0 rgb
f
228.901 296.254 mo
228.901 296.254 235.272 309.325 233.488 316.892 cv
231.704 324.458 224.84 323.564 220.703 322.289 cv
216.565 321.013 214.568 318.591 214.568 318.591 cv
214.568 318.591 210.813 320.041 208.119 316.605 cv
205.424 313.17 206.823 309.037 208.959 308.015 cv
211.095 306.992 213.746 308.454 213.746 308.454 cv
211.558 304.67 li
211.558 304.67 219.268 284.652 228.901 296.254 cv
cp
.988235 .639216 .592157 rgb
f
228.977 313.271 mo
228.933 313.271 228.889 313.266 228.845 313.254 cv
228.579 313.182 228.421 312.907 228.494 312.641 cv
229.155 310.206 227.252 307.643 227.232 307.617 cv
227.066 307.396 227.11 307.083 227.33 306.917 cv
227.549 306.75 227.863 306.792 228.03 307.014 cv
228.121 307.134 230.25 309.989 229.458 312.902 cv
229.398 313.125 229.196 313.271 228.977 313.271 cv
cp
0 0 0 rgb
f
213.383 314.796 mo
213.256 314.796 213.129 314.748 213.032 314.651 cv
209.28 310.944 li
209.084 310.75 209.082 310.434 209.276 310.237 cv
209.47 310.042 209.787 310.038 209.983 310.233 cv
213.735 313.94 li
213.931 314.135 213.933 314.451 213.739 314.647 cv
213.641 314.746 213.512 314.796 213.383 314.796 cv
cp
f
209.518 313.902 mo
209.282 313.902 209.072 313.734 209.027 313.494 cv
208.976 313.223 209.154 312.962 209.426 312.911 cv
211.915 312.444 li
212.189 312.396 212.448 312.573 212.499 312.844 cv
212.55 313.115 212.371 313.376 212.1 313.427 cv
209.61 313.894 li
209.579 313.899 209.548 313.902 209.518 313.902 cv
cp
f
222.809 315.165 mo
223.114 315.603 223.567 316.085 224.196 316.372 cv
224.872 316.684 225.555 316.421 226.039 316.114 cv
222.809 315.165 li
cp
224.836 317.515 mo
224.499 317.515 224.143 317.447 223.78 317.282 cv
222.012 316.474 221.372 314.59 221.345 314.511 cv
221.287 314.334 221.331 314.14 221.46 314.006 cv
221.589 313.872 221.781 313.821 221.961 313.874 cv
227.228 315.422 li
227.393 315.471 227.521 315.601 227.568 315.767 cv
227.614 315.933 227.572 316.111 227.456 316.238 cv
227.398 316.302 226.271 317.515 224.836 317.515 cv
cp
f
220.291 303.839 mo
220.219 303.839 220.147 303.823 220.078 303.791 cv
219.828 303.674 219.721 303.376 219.839 303.126 cv
220.704 301.288 223 301.68 223.096 301.695 cv
223.367 301.744 223.547 302.003 223.5 302.274 cv
223.452 302.545 223.19 302.726 222.921 302.68 cv
222.854 302.667 221.28 302.411 220.743 303.552 cv
220.658 303.732 220.479 303.839 220.291 303.839 cv
cp
f
227.43 302.055 mo
227.338 302.055 227.246 302.029 227.162 301.977 cv
226.929 301.829 226.86 301.521 227.008 301.287 cv
227.366 300.723 227.862 300.375 228.442 300.283 cv
229.619 300.09 230.765 301.021 230.813 301.062 cv
231.026 301.236 231.056 301.551 230.881 301.764 cv
230.707 301.977 230.391 302.009 230.178 301.834 cv
229.945 301.644 229.216 301.177 228.597 301.271 cv
228.301 301.318 228.058 301.499 227.853 301.822 cv
227.757 301.973 227.595 302.055 227.43 302.055 cv
cp
f
230.114 307.666 mo
229.877 307.666 229.667 307.497 229.623 307.256 cv
229.172 304.794 li
229.146 304.657 229.18 304.516 229.264 304.403 cv
230.167 303.201 li
230.334 302.981 230.646 302.936 230.867 303.103 cv
231.088 303.269 231.132 303.582 230.967 303.803 cv
230.195 304.829 li
230.606 307.076 li
230.656 307.348 230.476 307.608 230.204 307.658 cv
230.174 307.663 230.144 307.666 230.114 307.666 cv
cp
f
221.742 308.515 mo
221.501 308.515 221.289 308.341 221.249 308.095 cv
220.846 305.624 li
220.821 305.471 220.87 305.313 220.977 305.2 cv
222.313 303.79 li
222.502 303.589 222.819 303.582 223.02 303.771 cv
223.22 303.961 223.229 304.277 223.039 304.478 cv
221.873 305.708 li
222.236 307.935 li
222.281 308.207 222.096 308.464 221.823 308.508 cv
221.796 308.513 221.769 308.515 221.742 308.515 cv
cp
f
213.746 308.454 mo
213.746 308.454 219.454 305.272 221.41 301.014 cv
223.366 296.754 223.371 294.652 223.371 294.652 cv
223.371 294.652 224.318 297.367 226.459 297.939 cv
228.601 298.512 229.921 298.538 229.921 298.538 cv
231.41 302.394 li
230.205 293.12 li
230.205 293.12 224.354 290.252 223.586 290.278 cv
222.817 290.306 213.18 292.383 212.64 292.986 cv
212.099 293.59 209.306 301.229 209.306 301.229 cv
209.212 304.64 li
213.746 308.454 li
cp
.898039 .392157 .270588 rgb
f
203.875 366.36 mo
201.766 365.99 199.706 365.47 197.706 364.81 cv
191.545 362.83 185.946 359.59 181.206 355.39 cv
183.605 350.37 186.656 345.86 189.646 342.07 cv
195.676 334.44 201.516 329.74 201.516 329.74 cv
202.063 332.274 li
203.262 337.824 203.867 343.489 203.867 349.167 cv
203.867 354.867 203.875 360.349 203.875 366.36 cv
cp
.988235 .639216 .592157 rgb
f
223.314 331.754 mo
217.515 331.754 213.808 328.217 213.759 328.17 cv
213.562 327.978 213.559 327.661 213.751 327.464 cv
213.944 327.266 214.26 327.264 214.458 327.454 cv
214.695 327.684 220.357 333.056 228.774 329.644 cv
229.029 329.54 229.322 329.664 229.426 329.92 cv
229.529 330.176 229.406 330.467 229.15 330.571 cv
227.041 331.426 225.08 331.754 223.314 331.754 cv
cp
1 1 1 rgb
f
304.036 347.188 mo
304.036 347.188 296.414 344.894 298.732 333.75 cv
300.732 324.135 313.322 322.672 313.322 322.672 cv
313.322 322.672 309.361 316.727 312.399 309.533 cv
315.315 302.628 319.378 301.316 319.378 301.316 cv
319.378 301.316 319.033 295.718 323.444 291.325 cv
327.856 286.932 333.868 291.534 333.868 291.534 cv
333.868 291.534 345.273 289.052 352.311 295.107 cv
359.347 301.163 356.622 311.586 356.622 311.586 cv
356.622 311.586 367.825 315.631 370.55 327.473 cv
373.275 339.314 366.214 345.674 366.214 345.674 cv
304.036 347.188 li
cp
0 0 0 rgb
f
378.476 340.25 mo
371.035 356.1 354.926 367.08 336.255 367.08 cv
320.206 367.08 306.056 358.98 297.666 346.64 cv
305.755 335.87 315.846 328.06 328.306 326.96 cv
347.516 325.27 359.586 328.98 372.285 335.79 cv
374.226 336.83 376.325 338.35 378.476 340.25 cv
cp
.466667 .447059 .827451 rgb
f
342.42 320.751 mo
342.913 328.534 li
342.913 328.534 340.121 331.201 336.367 331.472 cv
331.298 331.839 329.265 329.161 329.265 329.161 cv
328.829 318.91 li
342.42 320.751 li
cp
.94902 .494118 .392157 rgb
f
342.42 320.739 mo
342.42 320.739 340.315 328.292 334 326.709 cv
329.439 325.566 328.893 319.741 328.893 319.741 cv
342.42 320.739 li
cp
0 0 0 rgb
f
325.469 299.431 mo
325.469 299.431 323.55 313.512 328.447 319.931 cv
333.345 326.349 339.123 324.067 341.65 321.893 cv
345.059 318.96 345.578 315.123 345.578 315.123 cv
345.578 315.123 350.524 315.827 351.936 311.747 cv
353.418 307.461 350.185 304.248 347.727 304.183 cv
345.268 304.118 345.007 304.58 345.007 304.58 cv
345.479 300.064 li
345.479 300.064 329.689 284.35 325.469 299.431 cv
cp
.94902 .494118 .392157 rgb
f
328.186 305.83 mo
328.186 305.83 320.595 303.073 320.335 308.849 cv
320.033 315.538 327.988 315.16 327.988 315.16 cv
328.186 305.83 li
cp
f
346.228 304.955 mo
346.228 304.955 343.701 306.177 338.022 302.487 cv
332.343 298.799 333.667 293.995 333.667 293.995 cv
333.667 293.995 326.459 299.081 325.108 305.018 cv
323.757 310.953 321.944 291.412 330.438 291.326 cv
338.932 291.24 351.915 296.061 346.228 304.955 cv
cp
0 0 0 rgb
f
324.799 312.086 mo
324.637 312.086 324.478 312.007 324.382 311.861 cv
321.673 307.756 li
321.521 307.525 321.584 307.215 321.814 307.063 cv
322.044 306.91 322.354 306.975 322.507 307.205 cv
325.216 311.311 li
325.368 311.541 325.305 311.852 325.074 312.003 cv
324.989 312.06 324.894 312.086 324.799 312.086 cv
cp
f
346.142 311.055 mo
346.01 311.055 345.879 311.003 345.78 310.9 cv
345.59 310.701 345.597 310.385 345.796 310.193 cv
349.394 306.746 li
349.594 306.555 349.908 306.563 350.101 306.762 cv
350.291 306.961 350.284 307.277 350.085 307.469 cv
346.487 310.916 li
346.391 311.009 346.266 311.055 346.142 311.055 cv
cp
f
349.662 311.458 mo
349.566 311.458 349.47 311.431 349.384 311.374 cv
347.063 309.821 li
346.833 309.667 346.771 309.356 346.925 309.127 cv
347.079 308.897 347.388 308.837 347.619 308.989 cv
349.94 310.542 li
350.17 310.696 350.231 311.007 350.078 311.236 cv
349.981 311.38 349.823 311.458 349.662 311.458 cv
cp
f
321.849 310.973 mo
321.589 310.973 321.37 310.771 321.351 310.509 cv
321.331 310.233 321.538 309.994 321.813 309.974 cv
323.928 309.821 li
324.201 309.795 324.442 310.009 324.463 310.284 cv
324.482 310.56 324.275 310.799 324 310.819 cv
321.886 310.972 li
321.873 310.973 321.861 310.973 321.849 310.973 cv
cp
f
333.545 313.885 mo
333.315 313.885 333.108 313.727 333.057 313.494 cv
332.212 309.708 333.351 306.588 333.399 306.457 cv
333.496 306.199 333.781 306.071 334.042 306.163 cv
334.301 306.26 334.433 306.548 334.337 306.806 cv
334.326 306.836 333.255 309.791 334.033 313.275 cv
334.093 313.545 333.923 313.813 333.654 313.873 cv
333.617 313.881 333.58 313.885 333.545 313.885 cv
cp
f
334.257 316.461 mo
334.606 316.618 335.012 316.74 335.427 316.741 cv
335.882 316.741 336.276 316.448 336.575 316.122 cv
334.257 316.461 li
cp
335.428 317.741 mo
333.886 317.738 332.574 316.583 332.52 316.534 cv
332.375 316.405 332.317 316.203 332.374 316.018 cv
332.43 315.831 332.588 315.694 332.78 315.666 cv
337.553 314.968 li
337.732 314.946 337.916 315.017 338.026 315.165 cv
338.136 315.313 338.156 315.508 338.078 315.675 cv
338.038 315.759 337.092 317.741 335.428 317.741 cv
cp
f
328.587 302.655 mo
328.451 302.655 328.316 302.601 328.218 302.492 cv
328.031 302.289 328.046 301.973 328.25 301.786 cv
329.281 300.844 331.029 300.817 331.103 300.816 cv
331.381 300.816 331.604 301.037 331.607 301.312 cv
331.61 301.587 331.389 301.813 331.112 301.816 cv
331.099 301.816 329.671 301.842 328.924 302.524 cv
328.828 302.612 328.707 302.655 328.587 302.655 cv
cp
f
339.498 303.128 mo
339.372 303.128 339.247 303.081 339.149 302.986 cv
338.425 302.281 336.998 302.212 336.984 302.212 cv
336.709 302.199 336.494 301.967 336.506 301.691 cv
336.517 301.416 336.742 301.208 337.024 301.212 cv
337.099 301.215 338.845 301.296 339.847 302.27 cv
340.045 302.462 340.049 302.778 339.856 302.977 cv
339.759 303.077 339.628 303.128 339.498 303.128 cv
cp
f
335.728 332.325 mo
335.704 332.325 335.682 332.325 335.658 332.325 cv
329.314 332.295 328.011 328.607 327.958 328.45 cv
327.871 328.188 328.013 327.905 328.274 327.817 cv
328.536 327.731 328.816 327.87 328.906 328.131 cv
328.954 328.268 330.086 331.298 335.662 331.325 cv
335.685 331.325 335.706 331.325 335.728 331.325 cv
340.701 331.325 342.587 328.632 342.665 328.517 cv
342.82 328.289 343.133 328.229 343.358 328.382 cv
343.587 328.535 343.648 328.844 343.496 329.073 cv
343.407 329.206 341.265 332.325 335.728 332.325 cv
cp
.27451 .27451 .498039 rgb
f
325.108 305.018 mo
325.108 305.018 318.427 296.544 323.444 291.325 cv
328.462 286.106 342.913 283.5 349.739 293.357 cv
354.579 300.347 346.228 304.955 346.228 304.955 cv
336.945 295.433 li
333.667 293.995 li
328.186 295.433 li
325.108 305.018 li
cp
0 0 0 rgb
f
339.086 307.94 mo
338.793 307.931 338.577 307.699 338.586 307.424 cv
338.658 305.281 li
337.326 304.29 li
337.104 304.125 337.059 303.812 337.224 303.59 cv
337.391 303.368 337.703 303.324 337.924 303.487 cv
339.466 304.635 li
339.597 304.732 339.672 304.889 339.667 305.053 cv
339.586 307.457 li
339.576 307.728 339.354 307.94 339.086 307.94 cv
cp
f
330.289 307.94 mo
329.996 307.931 329.78 307.699 329.789 307.424 cv
329.861 305.281 li
328.529 304.29 li
328.308 304.125 328.262 303.812 328.427 303.59 cv
328.593 303.368 328.906 303.324 329.127 303.487 cv
330.669 304.635 li
330.8 304.732 330.875 304.889 330.87 305.053 cv
330.789 307.457 li
330.779 307.728 330.558 307.94 330.289 307.94 cv
cp
f
102.013 309.396 mo
101.284 306.137 98.8232 303.913 96.5171 304.429 cv
95.3164 304.608 li
95.1714 304.619 95.0259 304.641 94.8813 304.674 cv
92.5752 305.189 91.2978 308.25 92.0273 311.51 cv
92.7568 314.77 95.2173 316.993 97.5229 316.478 cv
98.7236 316.298 li
98.8691 316.287 99.0142 316.266 99.1592 316.232 cv
101.465 315.717 102.743 312.656 102.013 309.396 cv
cp
.27451 .27451 .498039 rgb
f
128.926 342.59 mo
128.096 344.15 127.156 345.66 126.146 347.11 cv
123.236 351.3 119.636 354.99 115.525 358 cv
115.505 358.03 115.476 358.04 115.456 358.06 cv
115.186 358.26 114.916 358.46 114.636 358.64 cv
109.576 362.2 103.775 364.77 97.5156 366.08 cv
94.4155 366.74 91.1958 367.08 87.8955 367.08 cv
80.3257 367.08 73.1855 365.28 66.8657 362.07 cv
63.2158 360.23 59.8457 357.92 56.8257 355.22 cv
55.2056 353.76 53.6758 352.2 52.2656 350.53 cv
51.6255 349.78 51.0156 349.01 50.4355 348.22 cv
57.8457 339.3 64.3657 337.5 64.3657 337.5 cv
64.1558 337.27 61.8657 334.57 64.3657 329.71 cv
67.6558 323.29 77.8755 319.32 77.8755 319.32 cv
95.9155 318.25 li
95.9155 318.25 103.505 318.8 109.125 325.26 cv
113.775 330.58 112.946 333.96 112.505 334.99 cv
112.426 335.21 112.346 335.32 112.346 335.32 cv
112.346 335.32 120.136 337.88 128.926 342.59 cv
cp
.466667 .447059 .827451 rgb
f
112.508 334.988 mo
108.765 337.355 102.77 340.319 94.3115 342.176 cv
78.4917 345.669 64.3657 337.499 64.3657 337.499 cv
64.1538 337.269 61.8638 334.574 64.3657 329.705 cv
67.6562 323.287 77.8755 319.322 77.8755 319.322 cv
95.9184 318.254 li
95.9184 318.254 103.501 318.803 109.13 325.26 cv
113.778 330.581 112.951 333.958 112.508 334.988 cv
cp
.576471 .576471 .898039 rgb
f
80.4951 331.174 mo
80.4951 331.174 73.3467 327.442 73.7744 325.261 cv
74.2021 323.079 81.1387 321.616 85.5825 322.454 cv
90.0259 323.293 100.534 323.424 100.534 327.247 cv
100.534 330.627 95.7119 333.879 95.7119 333.879 cv
85.5825 330.957 li
80.4951 331.174 li
cp
.466667 .447059 .827451 rgb
f
80.2466 319.987 mo
80.4951 331.174 li
80.4951 331.174 82.584 334.345 89.1401 334.731 cv
94.0239 335.02 95.7119 333.879 95.7119 333.879 cv
94.9062 328.229 li
94.1138 322.719 li
82.2388 320.382 li
80.2466 319.987 li
cp
.988235 .639216 .592157 rgb
f
82.2388 320.382 mo
82.2739 320.687 82.3979 321.045 82.5879 321.454 cv
85.2153 326.986 92.0854 328.039 94.9062 328.229 cv
94.1138 322.719 li
82.2388 320.382 li
cp
0 0 0 rgb
f
96.0415 297.165 mo
96.0415 297.165 102.224 311.061 100.083 318.904 cv
97.9414 326.748 90.7998 325.563 86.522 324.079 cv
82.2436 322.594 80.2451 319.99 80.2451 319.99 cv
80.2451 319.99 76.2676 321.368 73.5762 317.679 cv
70.8843 313.989 72.498 309.721 74.7676 308.73 cv
77.0376 307.739 79.7554 309.365 79.7554 309.365 cv
77.6069 305.329 li
77.6069 305.329 86.395 284.687 96.0415 297.165 cv
cp
.988235 .639216 .592157 rgb
f
95.5171 314.933 mo
95.4683 314.933 95.4184 314.926 95.3691 314.91 cv
95.1055 314.829 94.958 314.549 95.0395 314.285 cv
95.8227 311.753 93.9204 308.996 93.9009 308.968 cv
93.7427 308.742 93.7969 308.431 94.0229 308.271 cv
94.248 308.113 94.5596 308.167 94.7187 308.393 cv
94.8096 308.521 96.9248 311.574 95.9946 314.58 cv
95.9282 314.795 95.7305 314.933 95.5171 314.933 cv
cp
0 0 0 rgb
f
79.1631 315.938 mo
79.0351 315.938 78.9077 315.888 78.813 315.787 cv
75.0273 311.775 li
74.8452 311.582 74.854 311.277 75.0474 311.096 cv
75.2407 310.913 75.5449 310.922 75.7275 311.115 cv
79.5132 315.127 li
79.6953 315.32 79.6865 315.625 79.4932 315.807 cv
79.4004 315.895 79.2817 315.938 79.1631 315.938 cv
cp
f
75.1553 314.863 mo
74.9214 314.863 74.7163 314.692 74.6802 314.454 cv
74.6401 314.191 74.8208 313.946 75.0835 313.906 cv
77.7021 313.51 li
77.9692 313.472 78.2104 313.65 78.25 313.913 cv
78.29 314.176 78.1094 314.421 77.8467 314.461 cv
75.228 314.857 li
75.2036 314.861 75.1792 314.863 75.1553 314.863 cv
cp
f
79.7554 309.365 mo
79.7554 309.365 81.1938 310.309 82.2388 308.674 cv
83.2842 307.038 80.9971 302.205 80.9971 302.205 cv
80.9971 302.205 85.312 303.185 87.9795 301.757 cv
90.6465 300.33 91.9556 296.403 91.9556 296.403 cv
91.9556 296.403 93.9189 300.493 99.8086 298.693 cv
105.699 296.895 106.821 288.877 100.534 287.241 cv
94.2461 285.605 90.8101 288.387 90.8101 288.387 cv
90.8101 288.387 90.0132 282.568 82.2388 285.441 cv
75.1558 288.06 73.9585 296.933 73.9585 296.933 cv
73.9585 296.933 69.7046 297.131 68.8867 301.757 cv
68.0684 306.384 73.4814 309.731 73.4814 309.731 cv
73.4814 309.731 76.5542 307.929 79.7554 309.365 cv
cp
f
89.2017 309.734 mo
88.9536 309.734 88.7383 309.55 88.706 309.298 cv
88.375 306.701 li
88.3403 306.427 88.5337 306.177 88.8076 306.142 cv
89.0854 306.104 89.3325 306.301 89.3672 306.574 cv
89.6982 309.171 li
89.7329 309.445 89.5395 309.695 89.2656 309.73 cv
89.2441 309.733 89.2226 309.734 89.2017 309.734 cv
cp
f
96.9106 309.115 mo
96.6665 309.115 96.4531 308.937 96.4165 308.688 cv
96.0351 306.099 li
95.9951 305.825 96.1836 305.571 96.457 305.53 cv
96.728 305.497 96.9844 305.68 97.0244 305.952 cv
97.4058 308.542 li
97.4458 308.815 97.2573 309.069 96.9839 309.11 cv
96.9595 309.113 96.9346 309.115 96.9106 309.115 cv
cp
f
86.7822 304.757 mo
86.7051 304.757 86.6269 304.739 86.5542 304.701 cv
86.3086 304.575 86.2119 304.273 86.3379 304.028 cv
87.3027 302.153 89.6704 302.642 89.77 302.664 cv
90.0395 302.722 90.21 302.986 90.1528 303.256 cv
90.0957 303.526 89.8325 303.697 89.5605 303.642 cv
89.4888 303.624 87.8389 303.296 87.2275 304.485 cv
87.1387 304.658 86.9639 304.757 86.7822 304.757 cv
cp
f
94.3096 303.152 mo
94.2124 303.152 94.1138 303.124 94.0278 303.064 cv
93.7998 302.909 93.7417 302.598 93.8975 302.37 cv
94.2939 301.791 94.8052 301.458 95.417 301.383 cv
96.6514 301.224 97.8008 302.235 97.8491 302.278 cv
98.0557 302.461 98.0752 302.775 97.8931 302.982 cv
97.7104 303.189 97.395 303.208 97.1875 303.027 cv
96.9487 302.818 96.1841 302.297 95.5371 302.376 cv
95.2192 302.416 94.9526 302.599 94.7226 302.935 cv
94.626 303.076 94.4692 303.152 94.3096 303.152 cv
cp
f
88.2241 343.919 mo
73.395 343.09 67.6362 339.689 67.3984 339.545 cv
67.1626 339.401 67.0874 339.095 67.23 338.858 cv
67.373 338.622 67.6782 338.546 67.9165 338.689 cv
67.9731 338.724 73.7456 342.107 88.2515 342.92 cv
88.5273 342.936 88.7383 343.171 88.7226 343.447 cv
88.708 343.713 88.4873 343.919 88.2241 343.919 cv
cp
.27451 .27451 .498039 rgb
f
88.6294 360.787 mo
88.3359 360.777 88.1196 360.546 88.1294 360.271 cv
88.5371 348.262 li
88.5464 347.985 88.7793 347.786 89.0537 347.778 cv
89.3296 347.788 89.5459 348.02 89.5361 348.295 cv
89.1284 360.304 li
89.1196 360.574 88.8975 360.787 88.6294 360.787 cv
cp
f
108.203 357.155 mo
108.032 357.155 107.865 357.067 107.772 356.91 cv
101.785 346.785 li
101.644 346.547 101.723 346.24 101.96 346.1 cv
102.198 345.962 102.505 346.039 102.645 346.275 cv
108.632 356.4 li
108.773 356.639 108.694 356.945 108.457 357.086 cv
108.377 357.133 108.289 357.155 108.203 357.155 cv
cp
f
108.203 337.996 mo
108.023 337.996 107.849 337.899 107.76 337.729 cv
107.631 337.484 107.725 337.183 107.969 337.054 cv
112.111 334.873 li
112.356 334.745 112.659 334.838 112.787 335.082 cv
112.916 335.327 112.821 335.629 112.577 335.758 cv
108.435 337.938 li
108.361 337.978 108.281 337.996 108.203 337.996 cv
cp
f
82.8286 313.477 mo
83.2534 316.789 81.6977 319.719 79.354 320.019 cv
77.0107 320.319 74.7666 317.877 74.3418 314.563 cv
73.917 311.251 75.4726 308.321 77.8164 308.021 cv
80.1601 307.721 82.4038 310.163 82.8286 313.477 cv
cp
f
77.8164 308.021 mo
76.1948 308.349 li
77.7324 320.347 li
79.354 320.019 li
81.1245 318.115 li
81.6387 311.463 li
77.8164 308.021 li
cp
f
81.207 313.804 mo
81.6318 317.117 80.0762 320.046 77.7324 320.347 cv
75.3887 320.646 73.145 318.204 72.7202 314.892 cv
72.2954 311.578 73.8511 308.649 76.1948 308.349 cv
78.5386 308.048 80.7822 310.49 81.207 313.804 cv
cp
1 1 1 rgb
f
75.019 293.157 mo
75.019 293.157 73.23 295.3 72.727 297.188 cv
72.2241 299.076 75.1558 310.997 75.1558 310.997 cv
78.8564 310.158 li
75.019 293.157 li
cp
f
92.2017 318.86 mo
90.477 318.86 89.2358 317.591 88.772 316.807 cv
88.6313 316.569 88.71 316.264 88.9468 316.123 cv
89.1826 315.981 89.4888 316.06 89.6318 316.296 cv
89.6807 316.379 90.8608 318.297 92.8843 317.771 cv
93.1475 317.697 93.4243 317.861 93.4941 318.128 cv
93.5635 318.396 93.4033 318.668 93.1362 318.737 cv
92.8115 318.822 92.4995 318.86 92.2017 318.86 cv
cp
0 0 0 rgb
f
625.116 221.9 mo
617.297 236.66 601.767 246.71 583.896 246.71 cv
578.187 246.71 572.727 245.68 567.677 243.8 cv
565.127 242.86 562.687 241.7 560.366 240.33 cv
561.586 226.5 562.847 214.89 563.786 212.71 cv
565.456 208.84 576.646 206.12 584.257 204.7 cv
588.336 203.94 591.387 203.55 591.387 203.55 cv
591.387 203.55 606.406 204.15 618.597 214.34 cv
620.786 216.17 622.996 218.79 625.116 221.9 cv
cp
.486275 .376471 .32549 rgb
f
573.016 167.376 mo
573.016 167.376 567.713 173.375 570.628 179.988 cv
573.543 186.601 576.67 167.974 576.67 167.974 cv
573.016 167.376 li
cp
.678431 .662745 .768627 rgb
f
590.851 194.33 mo
591.052 206.229 li
591.052 206.229 588.964 209.686 582.013 210.369 cv
576.834 210.878 574.993 209.736 574.993 209.736 cv
575.613 203.698 li
576.227 197.81 li
588.749 194.832 li
590.851 194.33 li
cp
.94902 .494118 .392157 rgb
f
588.749 194.832 mo
588.725 195.157 590.665 196.18 590.479 196.623 cv
587.918 202.611 578.373 205.622 575.383 205.941 cv
576.227 197.81 li
588.749 194.832 li
cp
0 0 0 rgb
f
575.275 167.97 mo
573.643 169.3 572.499 171.13 571.823 173.125 cv
570.268 177.717 567.13 188.439 569.186 195.013 cv
571.857 203.557 579.56 201.957 584.14 200.146 cv
588.72 198.335 590.774 195.387 590.774 195.387 cv
590.774 195.387 595.155 196.739 597.915 192.567 cv
600.674 188.396 598.733 183.766 596.225 182.77 cv
593.717 181.773 590.837 183.674 590.837 183.674 cv
592.991 179.145 li
592.991 179.145 584.32 160.607 575.275 167.97 cv
cp
.94902 .494118 .392157 rgb
f
591.471 189.463 mo
591.318 189.463 591.168 189.394 591.069 189.262 cv
590.904 189.04 590.95 188.727 591.172 188.562 cv
595.518 185.324 li
595.738 185.158 596.051 185.203 596.218 185.426 cv
596.383 185.647 596.337 185.96 596.115 186.125 cv
591.77 189.364 li
591.68 189.431 591.575 189.463 591.471 189.463 cv
cp
0 0 0 rgb
f
596.355 189.313 mo
596.317 189.313 596.278 189.309 596.239 189.3 cv
592.693 188.451 li
592.425 188.387 592.259 188.117 592.323 187.849 cv
592.387 187.581 592.654 187.414 592.926 187.479 cv
596.472 188.327 li
596.74 188.392 596.906 188.661 596.842 188.93 cv
596.787 189.159 596.582 189.313 596.355 189.313 cv
cp
f
571.773 181.838 mo
571.733 181.838 571.691 181.833 571.65 181.822 cv
571.383 181.754 571.221 181.482 571.289 181.214 cv
571.987 178.473 li
572.055 178.206 572.325 178.041 572.595 178.112 cv
572.862 178.18 573.024 178.452 572.956 178.72 cv
572.258 181.461 li
572.2 181.688 571.997 181.838 571.773 181.838 cv
cp
f
579.312 182.238 mo
579.271 182.238 579.229 182.233 579.188 182.222 cv
578.921 182.154 578.759 181.882 578.827 181.614 cv
579.525 178.873 li
579.594 178.606 579.862 178.439 580.133 178.512 cv
580.4 178.58 580.563 178.852 580.494 179.12 cv
579.796 181.861 li
579.738 182.087 579.535 182.238 579.312 182.238 cv
cp
f
571.342 175.853 mo
571.09 175.853 570.873 175.663 570.846 175.407 cv
570.816 175.132 571.015 174.886 571.289 174.856 cv
573.547 174.611 li
573.822 174.584 574.068 174.78 574.098 175.055 cv
574.127 175.329 573.929 175.576 573.654 175.605 cv
571.396 175.85 li
571.378 175.852 571.36 175.853 571.342 175.853 cv
cp
.423529 .419608 .486275 rgb
f
581.582 177.666 mo
581.518 177.666 581.452 177.654 581.389 177.627 cv
578.319 176.343 li
578.064 176.236 577.945 175.943 578.052 175.688 cv
578.158 175.433 578.45 175.312 578.706 175.42 cv
581.775 176.705 li
582.03 176.812 582.149 177.104 582.043 177.359 cv
581.963 177.551 581.777 177.666 581.582 177.666 cv
cp
f
590.837 183.674 mo
590.837 183.674 589.604 188.627 588.653 188.023 cv
587.704 187.419 586.816 180.279 587.524 177.083 cv
588.232 173.887 588.748 172.28 588.748 172.28 cv
588.748 172.28 575.75 171.125 572.324 168.035 cv
568.897 164.946 576.136 162.954 583.538 164.355 cv
590.94 165.757 593.859 168.539 593.859 168.539 cv
593.859 168.539 598.498 167.847 600.231 170.677 cv
601.965 173.506 598.02 184.256 598.02 184.256 cv
598.02 184.256 596.851 181.559 590.837 183.674 cv
cp
.678431 .662745 .768627 rgb
f
566.047 188.79 mo
566.047 188.79 569.679 184.768 571.527 185.371 cv
573.376 185.974 574.048 188.677 574.048 188.677 cv
574.048 188.677 576.241 185.64 578.661 186.494 cv
581.081 187.349 586.27 187.666 586.324 188.505 cv
586.379 189.344 584.878 189.645 584.878 189.645 cv
584.878 189.645 572.665 191.056 566.047 188.79 cv
cp
f
590.837 183.674 mo
590.837 183.674 590.619 191.705 590.774 195.387 cv
590.931 199.068 580.696 204.811 573.628 201.639 cv
566.559 198.467 568.497 189.204 568.497 189.204 cv
574.797 189.786 li
574.797 189.786 576.249 188.962 577.9 188.623 cv
579.551 188.284 581.751 189.183 581.751 189.183 cv
590.837 183.674 li
cp
f
248.736 227.95 mo
245.605 232.13 241.806 235.77 237.476 238.71 cv
231.755 242.59 225.136 245.22 217.986 246.24 cv
212.186 233.81 li
207.125 222.96 li
204.686 216.62 li
201.986 209.6 li
205.795 209.16 li
208.036 208.9 li
213.846 208.22 li
220.525 207.44 li
220.525 207.44 237.396 208.96 247.076 224.88 cv
247.625 225.79 248.176 226.82 248.736 227.95 cv
cp
.988235 .701961 .356863 rgb
f
237.476 238.71 mo
231.755 242.59 225.136 245.22 217.986 246.24 cv
216.116 246.51 214.216 246.66 212.275 246.69 cv
211.966 246.71 211.656 246.71 211.346 246.71 cv
207.585 246.71 203.916 246.26 200.416 245.42 cv
204.686 216.62 li
205.795 209.16 li
206.206 206.37 li
206.755 206.5 li
213.846 208.22 li
220.795 209.9 li
220.795 209.9 235.045 218.09 237.476 238.71 cv
cp
.466667 .447059 .827451 rgb
f
226.033 191.01 mo
226.033 191.01 229.897 187.021 229.042 180.606 cv
228.461 176.257 226.584 174.792 226.584 174.792 cv
226.584 174.792 229.716 168.989 220.979 169.05 cv
212.242 169.111 206.962 173.221 206.962 173.221 cv
206.962 173.221 203.041 171.126 201.094 175.716 cv
199.147 180.306 200.703 187.227 200.703 187.227 cv
226.033 191.01 li
cp
.678431 .662745 .768627 rgb
f
206.634 197.548 mo
206.54 208.208 li
206.54 208.208 208.435 211.289 214.666 211.852 cv
219.308 212.271 220.8 209.897 220.8 209.897 cv
219.758 200.56 li
208.52 197.982 li
206.634 197.548 li
cp
.988235 .639216 .592157 rgb
f
206.657 196.898 mo
206.681 197.189 206.789 197.534 206.957 197.929 cv
209.295 203.275 217.669 205.566 220.35 205.83 cv
219.758 200.56 li
206.657 196.898 li
cp
0 0 0 rgb
f
222.352 176.283 mo
222.352 176.283 227.827 189.698 225.556 197.104 cv
223.284 204.511 216.519 203.171 212.489 201.63 cv
208.459 200.089 206.633 197.55 206.633 197.55 cv
206.633 197.55 202.804 198.745 200.351 195.152 cv
197.897 191.559 199.56 187.542 201.75 186.666 cv
203.941 185.79 206.481 187.418 206.481 187.418 cv
204.555 183.511 li
204.555 183.511 213.536 164.115 222.352 176.283 cv
cp
.988235 .639216 .592157 rgb
f
206.481 187.418 mo
206.481 187.418 212.149 188.764 216.329 182.548 cv
220.508 176.333 220.233 173.713 220.233 173.713 cv
223.96 180.403 li
223.96 180.403 224.997 175.887 223.278 172.928 cv
221.559 169.968 219.651 170.505 219.651 170.505 cv
206.962 173.221 li
203.306 183.193 li
206.481 187.418 li
cp
.678431 .662745 .768627 rgb
f
221.34 193.211 mo
221.287 193.211 221.231 193.202 221.178 193.184 cv
220.917 193.094 220.778 192.81 220.868 192.548 cv
221.685 190.172 219.961 187.5 219.944 187.473 cv
219.793 187.242 219.857 186.932 220.087 186.781 cv
220.318 186.63 220.626 186.692 220.779 186.923 cv
220.862 187.049 222.792 190.028 221.813 192.874 cv
221.742 193.081 221.548 193.211 221.34 193.211 cv
cp
0 0 0 rgb
f
205.737 193.702 mo
205.599 193.702 205.461 193.645 205.363 193.533 cv
201.877 189.601 li
201.694 189.395 201.713 189.079 201.919 188.896 cv
202.125 188.712 202.441 188.729 202.625 188.938 cv
206.111 192.87 li
206.294 193.077 206.275 193.393 206.068 193.576 cv
205.973 193.66 205.855 193.702 205.737 193.702 cv
cp
f
201.952 192.56 mo
201.703 192.56 201.487 192.373 201.456 192.119 cv
201.423 191.845 201.619 191.596 201.893 191.563 cv
204.398 191.263 li
204.68 191.229 204.921 191.426 204.955 191.7 cv
204.987 191.974 204.792 192.223 204.518 192.256 cv
202.012 192.556 li
201.992 192.559 201.972 192.56 201.952 192.56 cv
cp
f
224.265 182.43 mo
224.231 182.43 224.197 182.427 224.162 182.419 cv
221.819 181.93 li
221.549 181.874 221.376 181.608 221.433 181.338 cv
221.489 181.068 221.75 180.892 222.024 180.951 cv
224.367 181.441 li
224.637 181.497 224.811 181.762 224.754 182.033 cv
224.705 182.268 224.497 182.43 224.265 182.43 cv
cp
.423529 .419608 .486275 rgb
f
214.417 183.645 mo
214.229 183.645 214.048 183.538 213.963 183.355 cv
213.847 183.104 213.956 182.807 214.207 182.691 cv
217.349 181.232 li
217.599 181.116 217.896 181.225 218.013 181.475 cv
218.129 181.726 218.02 182.023 217.77 182.139 cv
214.627 183.598 li
214.56 183.63 214.488 183.645 214.417 183.645 cv
cp
f
224.079 187.877 mo
223.859 187.877 223.657 187.731 223.597 187.508 cv
222.942 185.087 li
222.899 184.926 222.939 184.753 223.049 184.627 cv
223.815 183.752 li
223.997 183.544 224.312 183.523 224.521 183.706 cv
224.729 183.888 224.75 184.204 224.567 184.412 cv
223.978 185.085 li
224.563 187.247 li
224.634 187.514 224.477 187.788 224.21 187.86 cv
224.167 187.872 224.123 187.877 224.079 187.877 cv
cp
0 0 0 rgb
f
217.354 188.293 mo
217.133 188.293 216.932 188.146 216.871 187.923 cv
216.217 185.503 li
216.172 185.337 216.215 185.161 216.332 185.035 cv
217.388 183.883 li
217.574 183.679 217.891 183.665 218.094 183.853 cv
218.298 184.04 218.312 184.356 218.125 184.559 cv
217.254 185.508 li
217.837 187.663 li
217.909 187.929 217.751 188.204 217.484 188.276 cv
217.441 188.288 217.397 188.293 217.354 188.293 cv
cp
f
215.875 212.449 mo
212.027 212.449 208.104 210.276 207.858 210.139 cv
207.618 210.003 207.533 209.698 207.668 209.458 cv
207.804 209.218 208.106 209.131 208.349 209.268 cv
208.433 209.313 216.728 213.903 220.42 209.573 cv
220.599 209.362 220.915 209.338 221.125 209.517 cv
221.335 209.696 221.36 210.012 221.181 210.222 cv
219.759 211.89 217.826 212.449 215.875 212.449 cv
cp
1 1 1 rgb
f
226.152 184.729 mo
224.54 184.729 223.176 186.226 223.084 188.132 cv
222.991 190.086 224.271 191.742 225.937 191.822 cv
226.729 191.854 227.499 191.537 228.1 190.91 cv
228.718 190.266 229.084 189.382 229.13 188.422 cv
229.176 187.462 228.896 186.547 228.343 185.847 cv
227.805 185.166 227.072 184.77 226.277 184.732 cv
226.235 184.73 226.194 184.729 226.152 184.729 cv
cp
226.065 192.825 mo
226.007 192.825 225.948 192.824 225.889 192.821 cv
223.672 192.714 221.966 190.589 222.085 188.084 cv
222.206 185.579 224.114 183.631 226.325 183.733 cv
227.413 183.785 228.408 184.315 229.127 185.227 cv
229.831 186.117 230.187 187.269 230.129 188.47 cv
230.071 189.671 229.607 190.783 228.821 191.603 cv
228.062 192.395 227.089 192.825 226.065 192.825 cv
cp
.27451 .27451 .498039 rgb
f
216.023 184.922 mo
215.14 184.922 214.3 185.246 213.641 185.844 cv
212.939 186.481 212.528 187.354 212.483 188.301 cv
212.389 190.255 213.903 191.922 215.857 192.016 cv
216.804 192.059 217.712 191.735 218.414 191.098 cv
219.116 190.461 219.527 189.588 219.573 188.641 cv
219.618 187.694 219.292 186.787 218.655 186.084 cv
218.018 185.383 217.145 184.972 216.198 184.926 cv
216.14 184.923 216.081 184.922 216.023 184.922 cv
cp
216.033 193.021 mo
215.959 193.021 215.884 193.019 215.81 193.015 cv
213.304 192.895 211.363 190.758 211.484 188.253 cv
211.542 187.04 212.069 185.921 212.969 185.104 cv
213.869 184.287 215.038 183.874 216.246 183.927 cv
217.459 183.985 218.578 184.513 219.395 185.412 cv
220.212 186.312 220.63 187.476 220.572 188.689 cv
220.513 189.903 219.986 191.021 219.086 191.838 cv
218.243 192.605 217.166 193.021 216.033 193.021 cv
cp
f
222.319 188.304 mo
222.214 188.304 222.109 188.271 222.019 188.203 cv
221.615 187.897 220.651 188.022 220.14 188.172 cv
219.875 188.249 219.597 188.1 219.519 187.834 cv
219.44 187.57 219.59 187.292 219.855 187.214 cv
220.04 187.159 221.685 186.698 222.621 187.405 cv
222.841 187.572 222.885 187.885 222.719 188.105 cv
222.621 188.236 222.471 188.304 222.319 188.304 cv
cp
f
211.984 188.777 mo
211.829 188.777 211.676 188.705 211.578 188.57 cv
210.537 187.129 205.932 186.894 204.233 186.923 cv
203.971 186.932 203.729 186.708 203.725 186.432 cv
203.72 186.156 203.939 185.928 204.216 185.923 cv
204.889 185.914 210.856 185.865 212.389 187.984 cv
212.55 188.208 212.5 188.52 212.276 188.682 cv
212.188 188.746 212.085 188.777 211.984 188.777 cv
cp
f
549.729 111.04 mo
549.828 111.16 549.928 111.27 550.038 111.379 cv
550.178 111.529 550.328 111.68 550.468 111.819 cv
558.928 120.459 570.729 125.83 583.788 125.83 cv
585.808 125.83 587.818 125.699 589.769 125.459 cv
589.788 125.449 589.798 125.449 589.818 125.449 cv
594.618 124.819 599.198 123.47 603.428 121.5 cv
603.028 104.609 603.198 89.8296 603.198 89.5493 cv
603.038 89.1992 595.218 87.1895 584.808 86.8496 cv
568.428 86.3296 554.588 95.5693 549.729 111.04 cv
cp
.313726 .470588 .286275 rgb
f
589.769 125.459 mo
589.788 125.449 589.798 125.449 589.818 125.449 cv
594.618 124.819 599.198 123.47 603.428 121.5 cv
603.778 121.339 604.128 121.169 604.479 121 cv
611.368 117.589 617.288 112.509 621.718 106.299 cv
612.738 93.9893 605.398 90.3994 603.198 89.5493 cv
602.748 89.3696 602.519 89.3096 602.519 89.3096 cv
589.769 125.459 li
cp
f
583.607 59.4458 mo
583.607 59.4458 572.843 59.96 572.233 49.6372 cv
571.585 38.647 581.754 37.5938 586.071 42.0371 cv
590.389 46.4805 589.59 51 589.59 51 cv
589.59 51 592.6 48.2866 595.883 51.6191 cv
598.292 54.0645 597.049 58.0625 597.049 58.0625 cv
597.049 58.0625 602.601 57.8486 602.083 62.6963 cv
601.565 67.5444 598.099 70.0054 598.099 70.0054 cv
583.607 59.4458 li
cp
.898039 .392157 .270588 rgb
f
593.448 78.4526 mo
592.329 89.8901 li
592.329 89.8901 589.945 92.9761 583.201 92.8652 cv
578.177 92.7827 576.536 91.4849 576.536 91.4849 cv
577.798 85.7603 li
579.035 80.1782 li
591.377 78.7026 li
593.448 78.4526 li
cp
.988235 .639216 .592157 rgb
f
591.377 78.7026 mo
591.318 79.0117 591.163 79.3691 590.937 79.7734 cv
587.818 85.2363 580.702 85.7842 577.798 85.7603 cv
579.035 80.1782 li
591.377 78.7026 li
cp
0 0 0 rgb
f
579.035 53.8584 mo
579.035 53.8584 571.63 67.6113 573.217 75.8105 cv
574.804 84.0093 582.209 83.3481 586.705 82.1577 cv
591.201 80.9678 593.449 78.4551 593.449 78.4551 cv
593.449 78.4551 597.417 80.1743 600.458 76.604 cv
603.5 73.0332 602.178 68.5371 599.93 67.3472 cv
597.682 66.1567 594.772 67.6113 594.772 67.6113 cv
597.284 63.6445 li
597.284 63.6445 589.879 41.8247 579.035 53.8584 cv
cp
.988235 .639216 .592157 rgb
f
594.635 73.8721 mo
594.463 73.8721 594.295 73.7827 594.202 73.623 cv
594.063 73.3843 594.145 73.0781 594.384 72.9395 cv
598.92 70.3071 li
599.157 70.1685 599.464 70.249 599.604 70.4888 cv
599.742 70.7275 599.661 71.0337 599.422 71.1724 cv
594.886 73.8047 li
594.807 73.8506 594.721 73.8721 594.635 73.8721 cv
cp
0 0 0 rgb
f
598.338 74.2681 mo
598.26 74.2681 598.181 74.25 598.106 74.2114 cv
595.799 73.0059 li
595.554 72.8779 595.459 72.5757 595.587 72.3311 cv
595.716 72.0859 596.019 71.9932 596.262 72.1191 cv
598.569 73.3247 li
598.814 73.4526 598.909 73.7549 598.781 73.9995 cv
598.691 74.1704 598.518 74.2681 598.338 74.2681 cv
cp
f
577.028 59.25 mo
576.868 59.25 576.71 59.1729 576.613 59.0293 cv
576.459 58.8003 576.52 58.4897 576.749 58.3354 cv
578.616 57.0771 580.322 58.2935 580.396 58.3462 cv
580.618 58.5088 580.667 58.8218 580.505 59.0449 cv
580.342 59.2671 580.031 59.3164 579.808 59.1553 cv
579.748 59.1133 578.577 58.3115 577.308 59.1646 cv
577.222 59.2222 577.125 59.25 577.028 59.25 cv
cp
f
578.563 72.2715 mo
578.329 72.2715 578.12 72.106 578.073 71.8667 cv
577.149 67.1113 579.873 64.0571 579.99 63.9292 cv
580.177 63.7251 580.49 63.7114 580.695 63.8965 cv
580.899 64.0815 580.914 64.3975 580.729 64.6021 cv
580.705 64.6299 578.23 67.4297 579.056 71.6763 cv
579.108 71.9473 578.931 72.2095 578.66 72.2622 cv
578.628 72.2686 578.596 72.2715 578.563 72.2715 cv
cp
f
577.021 66.001 mo
576.725 65.9888 576.51 65.7554 576.521 65.4795 cv
576.638 62.75 li
576.649 62.4741 576.84 62.2427 577.159 62.272 cv
577.435 62.2837 577.649 62.5171 577.638 62.793 cv
577.521 65.5225 li
577.51 65.791 577.288 66.001 577.021 66.001 cv
cp
f
584.529 66.7183 mo
584.232 66.7061 584.018 66.4727 584.029 66.1968 cv
584.146 63.4673 li
584.157 63.1914 584.34 62.9653 584.667 62.9893 cv
584.942 63.001 585.157 63.2344 585.146 63.5103 cv
585.029 66.2397 li
585.018 66.5083 584.796 66.7183 584.529 66.7183 cv
cp
f
577.516 56.9722 mo
577.516 56.9722 578.982 54.7944 581.837 55.0542 cv
584.692 55.3135 586.161 57.4863 586.161 57.4863 cv
586.161 57.4863 584.44 62.168 588.07 65.1001 cv
591.7 68.0317 594.772 67.6113 594.772 67.6113 cv
597.685 66.8838 li
600.15 62.9736 li
592.868 53.4038 li
582.875 46.8115 li
577.029 51.1611 li
577.516 56.9722 li
cp
.898039 .392157 .270588 rgb
f
580.94 75.2021 mo
580.511 75.2021 580.221 75.1484 580.184 75.1411 cv
579.913 75.0884 579.737 74.8271 579.789 74.5566 cv
579.841 74.2852 580.104 74.1089 580.373 74.1592 cv
580.467 74.1768 582.676 74.5688 583.823 72.6401 cv
583.965 72.4028 584.272 72.3237 584.509 72.4658 cv
584.746 72.6069 584.824 72.9136 584.683 73.1509 cv
583.632 74.9199 581.923 75.2021 580.94 75.2021 cv
cp
0 0 0 rgb
f
574.012 61.0786 mo
571.876 61.0786 570.138 62.8828 570.138 65.1001 cv
570.138 67.3174 571.876 69.1211 574.012 69.1211 cv
576.147 69.1211 577.885 67.3174 577.885 65.1001 cv
577.885 62.8828 576.147 61.0786 574.012 61.0786 cv
cp
574.012 70.1211 mo
571.324 70.1211 569.138 67.8687 569.138 65.1001 cv
569.138 62.3311 571.324 60.0786 574.012 60.0786 cv
576.698 60.0786 578.885 62.3311 578.885 65.1001 cv
578.885 67.8687 576.698 70.1211 574.012 70.1211 cv
cp
1 1 1 rgb
f
585.587 62.1973 mo
583.37 62.1973 581.566 64.001 581.566 66.2183 cv
581.566 68.4355 583.37 70.2397 585.587 70.2397 cv
587.805 70.2397 589.608 68.4355 589.608 66.2183 cv
589.608 64.001 587.805 62.1973 585.587 62.1973 cv
cp
585.587 71.2397 mo
582.818 71.2397 580.566 68.9873 580.566 66.2183 cv
580.566 63.4497 582.818 61.1973 585.587 61.1973 cv
588.355 61.1973 590.608 63.4497 590.608 66.2183 cv
590.608 68.9873 588.355 71.2397 585.587 71.2397 cv
cp
f
581.553 66.1948 mo
581.511 66.1934 577.976 65.9038 577.976 65.9038 cv
577.7 65.8809 577.496 65.6396 577.519 65.3643 cv
577.541 65.0894 577.792 64.8887 578.058 64.9067 cv
581.593 65.1963 li
581.868 65.2192 582.072 65.4604 582.05 65.7358 cv
582.028 65.9971 581.81 66.1948 581.553 66.1948 cv
cp
f
597.684 67.3838 mo
597.551 67.3838 597.418 67.3311 597.319 67.2266 cv
595.146 64.9136 590.384 67.3042 590.336 67.3291 cv
590.086 67.4541 589.789 67.3564 589.663 67.1113 cv
589.538 66.8657 589.635 66.5645 589.881 66.439 cv
590.103 66.3252 595.36 63.6821 598.048 66.541 cv
598.237 66.7422 598.228 67.0586 598.026 67.248 cv
597.93 67.3389 597.807 67.3838 597.684 67.3838 cv
cp
f
583.063 92.9653 mo
578.004 92.9653 574.229 90.9551 574.168 90.9219 cv
573.926 90.7896 573.836 90.4858 573.969 90.2437 cv
574.101 90.0024 574.4 89.9097 574.646 90.0439 cv
574.741 90.0952 584.268 95.1475 593.101 88.6636 cv
593.321 88.501 593.635 88.5469 593.8 88.7705 cv
593.963 88.9932 593.915 89.3062 593.692 89.4692 cv
590.048 92.1455 586.294 92.9653 583.063 92.9653 cv
cp
f
111.045 240.13 mo
104.065 244.31 95.8955 246.71 87.1655 246.71 cv
85.3857 246.71 83.6157 246.61 81.8857 246.42 cv
81.6455 246.4 81.4155 246.37 81.1855 246.34 cv
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
78.9258 246.04 76.7656 245.6 74.6655 245.01 cv
72.1958 244.33 69.8057 243.44 67.5254 242.38 cv
67.1758 242.22 66.8257 242.05 66.4756 241.88 cv
64.2256 240.77 62.0854 239.48 60.0757 238.03 cv
59.9858 231.16 59.9355 225.74 59.9355 225.74 cv
77.6958 212.56 li
86.4155 206.09 li
86.5254 206.09 86.6357 206.09 86.7456 206.1 cv
91.5454 206.2 95.5957 207.18 98.7856 208.36 cv
99.2954 208.56 99.7856 208.75 100.255 208.95 cv
104.686 210.83 107.085 212.94 107.085 212.94 cv
107.085 212.94 109.166 226.72 111.045 240.13 cv
cp
.486275 .376471 .32549 rgb
f
98.2554 208.42 mo
98.2554 208.42 96.7656 209.61 92.4258 209.43 cv
86.5957 209.19 84.7256 206.03 84.7256 206.03 cv
84.4355 194.85 li
84.4355 194.74 li
86.2056 195.09 li
97.3154 197.16 li
97.7456 202.28 li
98.2554 208.42 li
cp
.988235 .639216 .592157 rgb
f
97.7456 202.28 mo
94.7656 202.01 87.0557 200.21 84.6255 195.3 cv
84.5557 195.14 84.4858 194.99 84.4355 194.85 cv
84.3555 194.65 84.3057 194.46 84.2856 194.3 cv
97.3154 197.16 li
97.7456 202.28 li
cp
0 0 0 rgb
f
98.7632 173.188 mo
98.7632 173.188 104.753 186.121 102.858 193.501 cv
100.962 200.882 94.2539 199.873 90.2241 198.542 cv
86.1943 197.211 84.2842 194.8 84.2842 194.8 cv
84.2842 194.8 80.5767 196.147 78.0024 192.729 cv
75.4282 189.31 76.8794 185.287 78.9922 184.326 cv
81.105 183.366 83.6753 184.851 83.6753 184.851 cv
81.6045 181.099 li
81.6045 181.099 89.5469 161.632 98.7632 173.188 cv
cp
.988235 .639216 .592157 rgb
f
100.697 178.562 mo
100.672 178.562 100.648 178.56 100.623 178.557 cv
98.0664 178.178 li
97.793 178.137 97.6045 177.883 97.645 177.61 cv
97.6855 177.336 97.9394 177.155 98.2129 177.188 cv
100.77 177.567 li
101.043 177.608 101.231 177.862 101.191 178.135 cv
101.154 178.384 100.94 178.562 100.697 178.562 cv
cp
0 0 0 rgb
f
91.1601 179.619 mo
90.9648 179.619 90.7798 179.504 90.6992 179.313 cv
90.5923 179.058 90.7119 178.765 90.9663 178.658 cv
93.9341 177.412 li
94.189 177.304 94.4819 177.424 94.5889 177.679 cv
94.6958 177.934 94.5762 178.227 94.3218 178.333 cv
91.354 179.58 li
91.2905 179.606 91.2251 179.619 91.1601 179.619 cv
cp
f
98.6846 189.168 mo
98.668 189.168 98.6509 189.167 98.6338 189.166 cv
98.3589 189.138 98.1587 188.893 98.1865 188.618 cv
98.5962 184.581 96.9238 182.549 96.9067 182.529 cv
96.729 182.319 96.7539 182.004 96.9634 181.825 cv
97.1724 181.646 97.4868 181.67 97.666 181.878 cv
97.7466 181.972 99.6372 184.225 99.1816 188.719 cv
99.1553 188.977 98.938 189.168 98.6846 189.168 cv
cp
f
93.3564 191.664 mo
93.5171 192.002 93.793 192.356 94.2651 192.491 cv
94.7339 192.624 95.1772 192.447 95.5122 192.222 cv
93.3564 191.664 li
cp
94.6064 193.54 mo
94.4092 193.54 94.2036 193.513 93.9902 193.452 cv
92.3389 192.98 92.1533 191.087 92.146 191.006 cv
92.1318 190.845 92.1968 190.686 92.3208 190.581 cv
92.4448 190.476 92.6113 190.438 92.7695 190.479 cv
96.6465 191.483 li
96.8081 191.525 96.9385 191.646 96.9932 191.803 cv
97.0483 191.961 97.0205 192.136 96.9194 192.27 cv
96.8745 192.329 95.9375 193.54 94.6064 193.54 cv
cp
f
83.6924 190.246 mo
83.6235 190.246 83.5532 190.231 83.4858 190.201 cv
78.2202 187.807 li
77.9687 187.693 77.8579 187.396 77.9722 187.145 cv
78.0854 186.895 78.3809 186.782 78.6343 186.897 cv
83.8999 189.291 li
84.1514 189.405 84.2622 189.701 84.1479 189.953 cv
84.0644 190.137 83.8828 190.246 83.6924 190.246 cv
cp
f
79.0019 191.462 mo
78.873 191.462 78.7441 191.413 78.6465 191.314 cv
78.4521 191.118 78.4541 190.801 78.6504 190.607 cv
80.9712 188.313 li
81.168 188.119 81.4844 188.121 81.6782 188.317 cv
81.8726 188.513 81.8706 188.83 81.6743 189.024 cv
79.3535 191.318 li
79.2559 191.415 79.1289 191.462 79.0019 191.462 cv
cp
f
91.1601 173.95 mo
91.1601 173.95 94.1582 173.495 97.2871 175.386 cv
100.416 177.276 101.058 179.119 101.058 179.119 cv
101.058 179.119 102.993 174.237 98.7519 169.929 cv
94.5107 165.621 86.3735 164.426 81.6826 169.523 cv
76.9917 174.62 77.2788 179.119 77.2788 179.119 cv
83.6753 184.851 li
83.6753 184.851 93.5537 182.949 91.1601 173.95 cv
cp
f
80.5415 171.71 mo
80.5415 171.71 74.5063 160.249 68.3892 165.092 cv
62.272 169.935 69.0835 179.711 75.1597 180.424 cv
81.2358 181.137 80.5415 171.71 80.5415 171.71 cv
cp
f
81.8857 246.42 mo
81.6455 246.4 81.4155 246.37 81.1855 246.34 cv
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
78.9258 246.04 76.7656 245.6 74.6655 245.01 cv
77.6958 212.56 li
77.7954 211.53 li
84.5654 203.62 li
84.6455 203.53 li
84.6455 203.53 84.6558 203.55 84.6855 203.6 cv
84.8555 203.87 85.5557 204.95 86.7456 206.1 cv
89.0254 208.31 93.1255 210.8 98.7656 208.37 cv
99.6958 207.97 100.156 208.21 100.255 208.95 cv
100.775 213.03 89.9956 232.48 81.8857 246.42 cv
cp
.486275 .376471 .32549 rgb
f
111.536 239.83 mo
111.375 239.93 111.206 240.03 111.045 240.13 cv
110.835 240.26 110.616 240.39 110.396 240.51 cv
112.565 229.18 108.125 222.69 108.076 222.62 cv
107.916 222.39 107.956 222.06 108.176 221.89 cv
108.406 221.72 108.716 221.77 108.875 222 cv
109.076 222.28 113.416 228.58 111.536 239.83 cv
cp
.988235 .701961 .356863 rgb
f
94.1108 209.864 mo
87.5893 209.864 84.249 203.847 84.209 203.771 cv
84.0776 203.529 84.1684 203.226 84.4111 203.095 cv
84.6533 202.963 84.957 203.053 85.0889 203.296 cv
85.2729 203.636 89.71 211.578 98.5776 207.904 cv
98.8325 207.798 99.1255 207.92 99.2309 208.175 cv
99.3369 208.43 99.2153 208.723 98.9604 208.828 cv
97.1865 209.563 95.5684 209.864 94.1108 209.864 cv
cp
f
191.361 72.6953 mo
191.361 72.6953 186.367 46.1968 205.757 41.3452 cv
225.148 36.4941 226.315 64.0156 226.315 64.0156 cv
226.315 64.0156 247.417 68.0308 247.555 88.5508 cv
247.727 114.197 222.94 109.886 222.94 109.886 cv
199.463 100.324 li
199.463 100.324 175.948 87.5176 191.361 72.6953 cv
cp
0 0 0 rgb
f
249.525 105.78 mo
243.446 114.49 234.446 120.99 223.966 123.94 cv
223.746 124 223.516 124.06 223.295 124.12 cv
219.486 125.13 215.476 125.67 211.346 125.67 cv
195.236 125.67 181.025 117.5 172.676 105.07 cv
178.936 96.5098 186.786 90.0298 192.125 87.73 cv
200.025 84.3301 212.556 82.0498 224.125 85.3599 cv
224.156 85.3701 224.196 85.3701 224.236 85.3799 cv
227.716 86.3799 231.096 87.8799 234.246 90.0098 cv
241.056 94.6099 246.016 99.9502 249.525 105.78 cv
cp
.968627 .45098 .309804 rgb
f
202.188 77.313 mo
202.19 77.5962 li
202.429 82.936 li
202.599 87.1235 li
202.599 87.1235 202.241 88.0972 207.115 87.7813 cv
213.647 87.3325 215.753 84.5264 215.753 84.5264 cv
216.031 74.7109 li
214.051 75.0884 li
202.188 77.313 li
cp
.988235 .639216 .592157 rgb
f
202.19 77.5962 mo
202.429 82.936 li
205.603 82.5508 211.38 81.1763 213.714 76.1836 cv
213.894 75.7773 214.013 75.4126 214.051 75.1089 cv
202.21 77.5151 li
202.19 77.5962 li
cp
0 0 0 rgb
f
200.12 52.0381 mo
200.12 52.0381 194.045 65.9419 196.233 73.7534 cv
198.422 81.5649 205.539 80.3354 209.797 78.8252 cv
214.056 77.3154 216.032 74.7041 216.032 74.7041 cv
216.032 74.7041 220.01 76.0527 222.67 72.354 cv
225.331 68.6548 223.693 64.4072 221.421 63.4341 cv
219.15 62.4604 216.45 64.1006 216.45 64.1006 cv
218.566 60.0596 li
218.566 60.0596 209.661 39.5244 200.12 52.0381 cv
cp
.988235 .639216 .592157 rgb
f
202.005 49.979 mo
202.005 49.979 201.566 57.377 209.008 60.7388 cv
216.45 64.1006 221.421 63.4341 221.421 63.4341 cv
220.938 53.7861 li
211.623 43.6665 li
203.294 46.3208 li
202.005 49.979 li
cp
0 0 0 rgb
f
215.946 61.9668 mo
215.974 66.1797 li
219.722 62.4839 li
215.946 61.9668 li
cp
f
251.226 103.19 mo
250.855 103.81 250.466 104.43 250.056 105.03 cv
249.886 105.28 249.716 105.53 249.525 105.78 cv
243.446 114.49 234.446 120.99 223.966 123.94 cv
223.746 124 223.516 124.06 223.295 124.12 cv
223.936 85.3301 li
223.936 85.3301 224.005 85.3398 224.125 85.3599 cv
224.156 85.3701 224.196 85.3701 224.236 85.3799 cv
226.536 85.77 241.605 88.75 249.696 100.61 cv
250.246 101.4 250.746 102.27 251.226 103.19 cv
cp
.968627 .45098 .309804 rgb
f
205.71 88.3569 mo
202.766 88.3569 200.572 87.8315 200.389 87.7861 cv
200.121 87.7197 199.958 87.4492 200.024 87.1812 cv
200.09 86.9131 200.363 86.7505 200.629 86.8154 cv
200.718 86.8379 209.531 88.9404 215.582 84.5293 cv
215.805 84.3682 216.117 84.416 216.281 84.6392 cv
216.443 84.8623 216.394 85.1748 216.171 85.3379 cv
212.851 87.7578 208.853 88.3569 205.71 88.3569 cv
cp
.466667 .447059 .827451 rgb
f
198.392 57.1157 mo
198.179 57.1157 197.982 56.979 197.915 56.7651 cv
197.833 56.5015 197.979 56.2207 198.243 56.1387 cv
201.014 55.2725 li
201.278 55.189 201.557 55.3359 201.64 55.6001 cv
201.723 55.8638 201.576 56.1445 201.313 56.2266 cv
198.542 57.0928 li
198.492 57.1084 198.441 57.1157 198.392 57.1157 cv
cp
0 0 0 rgb
f
216.733 70.5898 mo
216.599 70.5898 216.464 70.5356 216.365 70.4282 cv
216.179 70.2251 216.191 69.9087 216.395 69.7217 cv
220.682 65.7773 li
220.885 65.5908 221.202 65.604 221.388 65.8071 cv
221.575 66.0103 221.562 66.3267 221.358 66.5137 cv
217.072 70.458 li
216.976 70.5464 216.854 70.5898 216.733 70.5898 cv
cp
f
221.076 70.0708 mo
221.009 70.0708 220.94 70.0571 220.875 70.0288 cv
218.317 68.9058 li
218.064 68.7944 217.949 68.4995 218.06 68.2466 cv
218.171 67.9941 218.466 67.8789 218.719 67.9897 cv
221.277 69.1128 li
221.53 69.2241 221.645 69.519 221.534 69.772 cv
221.452 69.9595 221.268 70.0708 221.076 70.0708 cv
cp
f
199.249 64.1289 mo
199.215 64.1289 199.181 64.1255 199.147 64.1187 cv
198.876 64.0625 198.703 63.7979 198.759 63.5273 cv
199.27 61.0659 li
198.265 59.9077 li
198.083 59.6992 198.106 59.3833 198.314 59.2026 cv
198.523 59.0205 198.839 59.0444 199.02 59.2524 cv
200.187 60.5977 li
200.29 60.7153 200.331 60.874 200.299 61.0269 cv
199.738 63.7305 li
199.689 63.9668 199.481 64.1289 199.249 64.1289 cv
cp
f
207.632 64.5557 mo
207.599 64.5557 207.564 64.5522 207.53 64.5454 cv
207.26 64.4893 207.086 64.2246 207.142 63.9541 cv
207.653 61.4927 li
206.648 60.3345 li
206.467 60.126 206.489 59.8101 206.698 59.6294 cv
206.906 59.4473 207.222 59.4702 207.403 59.6792 cv
208.57 61.0244 li
208.673 61.1421 208.714 61.3008 208.683 61.4536 cv
208.122 64.1572 li
208.072 64.3936 207.864 64.5557 207.632 64.5557 cv
cp
f
200.907 70.2344 mo
200.676 70.2344 200.468 70.0728 200.418 69.8369 cv
199.488 65.3911 201.641 63.1519 201.733 63.0586 cv
201.927 62.8618 202.243 62.8599 202.44 63.0547 cv
202.636 63.248 202.638 63.564 202.445 63.7603 cv
202.362 63.8467 200.584 65.7485 201.397 69.6318 cv
201.454 69.9023 201.28 70.167 201.01 70.2236 cv
200.976 70.231 200.941 70.2344 200.907 70.2344 cv
cp
f
203.961 72.3672 mo
204.763 73.2007 205.334 73.5005 205.448 73.5103 cv
205.536 73.5005 205.87 73.3066 206.28 72.7939 cv
206.635 72.3501 206.813 71.9614 206.863 71.7627 cv
206.57 71.7881 205.696 71.8677 203.961 72.3672 cv
cp
205.425 74.5117 mo
205.128 74.5117 204.418 74.374 202.936 72.7339 cv
202.765 72.5435 202.703 72.2866 202.77 72.0454 cv
202.84 71.7944 203.039 71.5977 203.3 71.5186 cv
206.869 70.4512 207.353 70.8159 207.561 70.9722 cv
207.738 71.1055 208.006 71.4287 207.809 72.0933 cv
207.538 73.0044 206.402 74.4487 205.514 74.5083 cv
205.49 74.5098 205.46 74.5117 205.425 74.5117 cv
cp
f
188.762 102.97 mo
188.71 103.029 183.935 108.15 184.841 117.356 cv
184.554 117.171 184.277 116.977 184 116.772 cv
183.921 116.721 183.853 116.66 183.773 116.599 cv
183.186 107.458 187.982 102.347 188.043 102.278 cv
188.236 102.081 188.546 102.076 188.753 102.26 cv
188.95 102.453 188.955 102.773 188.762 102.97 cv
cp
.466667 .447059 .827451 rgb
f
588.07 60.8726 mo
587.904 60.8726 587.741 60.7896 587.646 60.6382 cv
586.394 58.6396 584.523 59.374 584.444 59.4072 cv
584.194 59.5127 583.898 59.3916 583.792 59.1362 cv
583.688 58.8823 583.806 58.5913 584.059 58.4844 cv
584.995 58.0908 587.124 57.9229 588.494 60.1069 cv
588.641 60.3408 588.57 60.6494 588.336 60.7964 cv
588.253 60.8481 588.161 60.8726 588.07 60.8726 cv
cp
0 0 0 rgb
f
558.246 358.9 mo
556.546 357.75 554.926 356.48 553.405 355.09 cv
553.235 354.94 553.065 354.79 552.905 354.63 cv
551.855 353.67 550.855 352.65 549.905 351.59 cv
549.865 351.54 549.815 351.49 549.775 351.44 cv
552.706 343.43 557.436 331.38 561.035 329.09 cv
561.086 329.06 561.136 329.02 561.186 328.98 cv
561.246 328.95 561.296 328.92 561.355 328.88 cv
562.886 328.68 560.996 342.53 558.246 358.9 cv
cp
.968627 .45098 .309804 rgb
f
620.065 350.7 mo
617.186 354.1 613.815 357.08 610.065 359.52 cv
609.065 360.17 608.046 360.79 606.996 361.36 cv
600.346 365.01 592.726 367.08 584.605 367.08 cv
575.065 367.08 566.206 364.21 558.815 359.3 cv
558.626 359.17 558.436 359.04 558.246 358.9 cv
556.546 357.75 554.926 356.48 553.405 355.09 cv
553.235 354.94 553.065 354.79 552.905 354.63 cv
554.006 347.11 555.445 340.05 557.275 335.17 cv
558.386 332.21 559.626 330.07 561.035 329.09 cv
561.086 329.06 561.136 329.02 561.186 328.98 cv
561.246 328.95 561.296 328.92 561.355 328.88 cv
568.836 324.13 589.166 325.68 601.686 327.71 cv
604.916 328.23 607.806 330.11 609.746 332.93 cv
612.886 337.5 617.636 344.85 620.065 350.7 cv
cp
f
596.157 286.75 mo
596.157 286.75 595.744 284.115 598.259 285.193 cv
600.773 286.271 599.695 288.905 598.259 288.546 cv
596.822 288.187 596.157 286.75 596.157 286.75 cv
cp
.466667 .447059 .827451 rgb
f
601.013 303.38 mo
601.013 303.38 600.619 310.484 597.421 310.811 cv
594.223 311.137 589.518 307.096 589.518 307.096 cv
591.722 299.1 li
601.013 303.38 li
cp
0 0 0 rgb
f
576.604 301.359 mo
576.604 301.359 566.166 298.006 564.609 293.575 cv
563.053 289.145 582.776 295.851 582.776 295.851 cv
576.604 301.359 li
cp
.360784 .360784 .776471 rgb
f
591.722 316.571 mo
590.912 327.866 li
590.912 327.866 588.874 331.052 582.35 331.523 cv
577.49 331.875 575.794 330.762 575.794 330.762 cv
576.521 325.124 li
577.237 319.626 li
589.032 317.141 li
591.722 316.571 li
cp
.956863 .572549 .509804 rgb
f
589.032 317.141 mo
589.001 317.445 588.883 317.804 588.699 318.214 cv
586.156 323.758 579.328 324.897 576.521 325.124 cv
577.237 319.626 li
589.032 317.141 li
cp
0 0 0 rgb
f
574.979 294.202 mo
574.979 294.202 569.005 308.123 571.242 315.906 cv
573.479 323.689 580.575 322.415 584.816 320.88 cv
589.057 319.345 591.013 316.725 591.013 316.725 cv
591.013 316.725 594.992 318.044 597.624 314.335 cv
600.256 310.624 598.592 306.395 596.318 305.438 cv
594.045 304.481 591.359 306.137 591.359 306.137 cv
593.446 302.089 li
593.446 302.089 584.42 281.647 574.979 294.202 cv
cp
.956863 .572549 .509804 rgb
f
591.722 312.213 mo
591.565 312.213 591.41 312.14 591.313 312.001 cv
591.154 311.775 591.208 311.464 591.434 311.305 cv
596.486 307.738 li
596.709 307.578 597.024 307.631 597.183 307.858 cv
597.342 308.084 597.288 308.396 597.063 308.555 cv
592.01 312.121 li
591.923 312.184 591.821 312.213 591.722 312.213 cv
cp
0 0 0 rgb
f
596.298 312.191 mo
596.256 312.191 596.212 312.186 596.169 312.175 cv
592.871 311.294 li
592.604 311.223 592.445 310.948 592.517 310.682 cv
592.588 310.416 592.858 310.258 593.129 310.327 cv
596.427 311.208 li
596.693 311.279 596.853 311.554 596.781 311.82 cv
596.722 312.044 596.52 312.191 596.298 312.191 cv
cp
f
584.264 300.893 mo
584.113 300.893 583.964 300.824 583.865 300.694 cv
583.431 300.12 582.944 299.794 582.421 299.723 cv
581.64 299.622 580.99 300.11 580.983 300.114 cv
580.767 300.281 580.452 300.244 580.283 300.025 cv
580.114 299.809 580.151 299.497 580.368 299.327 cv
580.407 299.296 581.347 298.569 582.539 298.73 cv
583.343 298.833 584.057 299.291 584.662 300.091 cv
584.829 300.311 584.786 300.624 584.565 300.791 cv
584.476 300.859 584.369 300.893 584.264 300.893 cv
cp
f
573.46 299.9 mo
573.314 299.9 573.171 299.837 573.071 299.716 cv
572.897 299.501 572.931 299.187 573.145 299.012 cv
573.818 298.467 574.445 298.247 574.999 298.354 cv
575.602 298.472 575.869 298.93 575.897 298.981 cv
576.03 299.224 575.941 299.528 575.7 299.661 cv
575.461 299.79 575.162 299.71 575.027 299.475 cv
575.016 299.457 574.942 299.356 574.793 299.333 cv
574.651 299.306 574.329 299.339 573.775 299.789 cv
573.683 299.864 573.571 299.9 573.46 299.9 cv
cp
f
575.415 311.45 mo
575.194 311.45 574.992 311.303 574.933 311.08 cv
574.139 308.125 575.253 305.1 575.301 304.973 cv
575.397 304.714 575.687 304.584 575.943 304.681 cv
576.202 304.777 576.333 305.065 576.236 305.323 cv
576.227 305.352 575.189 308.182 575.897 310.82 cv
575.97 311.087 575.812 311.361 575.545 311.433 cv
575.501 311.444 575.458 311.45 575.415 311.45 cv
cp
f
573.462 305.24 mo
573.417 305.24 573.371 305.234 573.326 305.222 cv
573.061 305.146 572.905 304.87 572.98 304.604 cv
573.701 302.055 li
573.776 301.788 574.055 301.633 574.318 301.709 cv
574.584 301.784 574.739 302.061 574.664 302.326 cv
573.943 304.876 li
573.881 305.097 573.681 305.24 573.462 305.24 cv
cp
f
581.64 305.465 mo
581.595 305.465 581.549 305.459 581.504 305.446 cv
581.238 305.371 581.083 305.095 581.158 304.829 cv
581.878 302.279 li
581.953 302.014 582.231 301.859 582.495 301.934 cv
582.761 302.009 582.916 302.285 582.841 302.551 cv
582.121 305.101 li
582.059 305.321 581.858 305.465 581.64 305.465 cv
cp
f
574.183 296.224 mo
574.183 296.224 575.007 295.111 577.787 295.117 cv
580.567 295.122 582.173 297.095 582.173 297.095 cv
582.173 297.095 582.406 302.135 586.164 304.655 cv
589.922 307.176 591.359 306.137 591.359 306.137 cv
594.11 305.184 li
596.157 301.195 li
588.301 292.576 li
578.859 288.546 li
574.183 293.747 li
574.183 296.224 li
cp
f
578.228 314.69 mo
578.049 314.69 577.935 314.68 577.913 314.677 cv
577.639 314.648 577.44 314.403 577.469 314.13 cv
577.496 313.855 577.745 313.652 578.016 313.683 cv
578.103 313.688 580.267 313.875 581.201 311.927 cv
581.322 311.678 581.62 311.575 581.869 311.692 cv
582.118 311.813 582.223 312.111 582.104 312.36 cv
581.087 314.477 579.019 314.69 578.228 314.69 cv
cp
f
573.822 293.153 mo
573.822 293.153 577.761 281.96 591.722 284.354 cv
605.683 286.75 601.013 304.499 601.013 304.499 cv
594.649 302.434 li
573.822 293.153 li
cp
.466667 .447059 .827451 rgb
f
569.761 292.363 mo
569.761 292.363 574.648 292.542 587.242 298.372 cv
591.583 300.382 595.369 302.729 595.369 302.729 cv
595.369 302.729 580.874 296.642 575.239 296.71 cv
573.076 296.736 571.675 297.547 571.675 297.547 cv
569.761 292.363 li
cp
.360784 .360784 .776471 rgb
f
580.058 331.898 mo
577.576 331.898 575.834 331.496 575.677 331.458 cv
575.408 331.394 575.243 331.124 575.307 330.855 cv
575.37 330.587 575.639 330.423 575.909 330.485 cv
575.992 330.505 584.238 332.396 590.614 327.675 cv
590.837 327.511 591.15 327.558 591.313 327.778 cv
591.479 328.001 591.432 328.313 591.21 328.478 cv
587.448 331.264 583.172 331.898 580.058 331.898 cv
cp
.27451 .27451 .498039 rgb
f
575.785 191.62 mo
575.533 191.62 575.316 191.429 575.289 191.173 cv
575.261 190.898 575.46 190.652 575.733 190.623 cv
575.755 190.621 577.893 190.373 578.672 188.813 cv
578.797 188.566 579.096 188.468 579.343 188.589 cv
579.59 188.713 579.689 189.013 579.566 189.26 cv
578.539 191.315 575.947 191.606 575.838 191.618 cv
575.82 191.619 575.803 191.62 575.785 191.62 cv
cp
0 0 0 rgb
f
573.824 187.788 mo
573.642 187.788 573.465 187.687 573.377 187.512 cv
571.618 184.001 574.147 180.307 574.256 180.151 cv
574.414 179.924 574.725 179.869 574.951 180.027 cv
575.178 180.185 575.233 180.496 575.076 180.723 cv
575.054 180.756 572.782 184.09 574.271 187.063 cv
574.395 187.311 574.295 187.611 574.048 187.735 cv
573.977 187.771 573.899 187.788 573.824 187.788 cv
cp
f
578.76 210.913 mo
575.278 210.913 572.585 210.234 572.346 210.173 cv
572.079 210.103 571.918 209.83 571.988 209.563 cv
572.057 209.297 572.328 209.136 572.598 209.204 cv
572.722 209.236 584.97 212.31 591.089 205.059 cv
591.268 204.847 591.584 204.822 591.793 204.999 cv
592.004 205.177 592.031 205.492 591.853 205.703 cv
588.287 209.929 582.952 210.913 578.76 210.913 cv
cp
.988235 .701961 .356863 rgb
f
341.093 70.5356 mo
341.589 70.8027 342.026 70.9438 342.227 70.8398 cv
342.389 70.7524 342.542 70.6592 342.686 70.5645 cv
341.093 70.5356 li
cp
342.082 71.8652 mo
340.922 71.8652 339.453 70.666 339.125 70.3853 cv
338.965 70.248 338.908 70.0249 338.982 69.8276 cv
339.058 69.6309 339.256 69.5029 339.459 69.5054 cv
344.074 69.5898 li
344.273 69.5938 344.452 69.7148 344.527 69.8989 cv
344.604 70.0835 344.563 70.2949 344.425 70.438 cv
344.395 70.4683 343.692 71.1875 342.699 71.7207 cv
342.512 71.8218 342.302 71.8652 342.082 71.8652 cv
cp
0 0 0 rgb
f
212.186 233.81 mo
212.386 238.81 212.355 243.41 212.275 246.69 cv
211.966 246.71 211.656 246.71 211.346 246.71 cv
207.585 246.71 203.916 246.26 200.416 245.42 cv
190.835 243.12 182.406 237.86 176.156 230.66 cv
175.206 229.56 174.295 228.42 173.446 227.24 cv
190.255 206.75 206.556 206.19 206.556 206.19 cv
206.625 206.29 206.696 206.39 206.755 206.5 cv
207.226 207.22 207.646 208.02 208.036 208.9 cv
210.795 215.11 211.846 225.06 212.186 233.81 cv
cp
.988235 .701961 .356863 rgb
f
219.887 196.704 mo
218.454 196.704 217.273 195.586 217.212 195.526 cv
217.014 195.335 217.008 195.02 217.199 194.821 cv
217.389 194.623 217.705 194.616 217.905 194.806 cv
217.919 194.819 219.321 196.14 220.588 195.547 cv
220.84 195.43 221.136 195.539 221.253 195.788 cv
221.37 196.038 221.263 196.335 221.013 196.453 cv
220.631 196.632 220.251 196.704 219.887 196.704 cv
cp
0 0 0 rgb
f
89.3057 66.3706 mo
89.2134 66.3706 89.1196 66.3452 89.0361 66.2915 cv
88.8037 66.1421 88.7363 65.833 88.8852 65.6006 cv
89.3979 64.8013 90.0513 64.3198 90.8267 64.1699 cv
92.1113 63.9214 93.2241 64.7021 93.2705 64.7354 cv
93.4956 64.8955 93.5483 65.2075 93.3887 65.4326 cv
93.229 65.6567 92.917 65.7095 92.6929 65.5518 cv
92.6768 65.541 91.8594 64.9878 91.0102 65.1528 cv
90.5166 65.2505 90.085 65.583 89.727 66.1406 cv
89.6313 66.2896 89.4702 66.3706 89.3057 66.3706 cv
cp
f
324.042 179.882 mo
324.042 179.882 319.581 183.625 319.159 187.38 cv
318.738 191.135 318.738 191.135 318.738 191.135 cv
318.738 191.135 313.391 192.842 311.776 199.303 cv
309.584 208.074 315.563 211.124 315.563 211.124 cv
361.999 216.138 li
361.999 216.138 367.456 211.354 366.364 203.669 cv
365.271 195.983 360.773 193.538 360.773 193.538 cv
360.773 193.538 361.515 188.597 359.027 183.634 cv
356.158 177.905 350.267 177.849 350.267 177.849 cv
324.042 179.882 li
cp
f
372.226 228.83 mo
366.186 236.54 357.766 242.3 348.065 245 cv
344.075 246.12 339.865 246.71 335.525 246.71 cv
333.875 246.71 332.246 246.63 330.636 246.46 cv
329.585 246.35 328.545 246.2 327.516 246.02 cv
326.375 245.82 325.255 245.58 324.146 245.3 cv
323.936 245.25 323.716 245.2 323.505 245.14 cv
321.726 244.67 319.976 244.09 318.286 243.41 cv
315.306 242.23 312.466 240.74 309.826 238.99 cv
309.926 236.5 310.096 235.09 310.096 235.09 cv
317.625 211.34 li
318.366 209 li
318.806 207.6 319.706 206.43 320.896 205.65 cv
321.505 205.24 322.196 204.94 322.936 204.78 cv
324.315 204.46 326.036 204.11 327.986 203.78 cv
328.596 203.69 329.206 203.59 329.855 203.5 cv
331.875 203.22 334.096 203 336.386 202.9 cv
337.766 202.84 339.146 202.83 340.535 202.88 cv
341.155 202.9 341.775 202.93 342.396 202.97 cv
343.115 203.03 343.825 203.1 344.546 203.18 cv
345.346 203.28 346.136 203.4 346.926 203.56 cv
348.726 203.9 350.485 204.38 352.155 205.03 cv
356.586 206.76 360.436 210.32 363.605 214.31 cv
367.646 219.4 370.586 225.2 372.226 228.83 cv
cp
.313726 .470588 .286275 rgb
f
342.538 200.744 mo
342.538 200.744 345.803 201.814 346.792 203.334 cv
347.902 205.037 345.826 209.522 339.92 213.011 cv
335.606 215.559 331.963 216.46 331.963 216.46 cv
331.963 216.46 328.207 211.264 327.486 208.104 cv
326.766 204.946 329.41 200.803 329.41 200.803 cv
342.538 200.744 li
cp
.988235 .701961 .356863 rgb
f
325.25 185.72 mo
325.25 185.72 321.322 179.722 321.353 176.78 cv
321.384 173.838 331.192 163.472 341.451 166.354 cv
351.711 169.236 354.404 181.662 353.104 187.197 cv
349.757 201.45 337.249 197.192 337.249 197.192 cv
337.249 197.192 318.007 194.609 325.25 185.72 cv
cp
0 0 0 rgb
f
329.377 200.542 mo
329.41 200.803 li
330.225 205.684 li
330.848 209.514 li
330.848 209.514 330.627 210.448 335.072 209.614 cv
341.025 208.473 342.647 205.659 342.647 205.659 cv
341.809 196.607 li
340.03 197.175 li
329.377 200.542 li
cp
.94902 .494118 .392157 rgb
f
329.41 200.803 mo
330.225 205.684 li
333.099 204.976 338.256 203.068 339.844 198.219 cv
339.963 197.826 340.031 197.478 340.033 197.194 cv
329.419 200.726 li
329.41 200.803 li
cp
0 0 0 rgb
f
324.657 177.545 mo
324.657 177.545 320.624 191.001 323.507 197.936 cv
326.39 204.87 332.793 202.947 336.538 201.084 cv
340.283 199.222 341.809 196.601 341.809 196.601 cv
341.809 196.601 345.614 197.397 347.647 193.701 cv
349.68 190.005 347.7 186.284 345.505 185.643 cv
343.309 185.001 341.01 186.81 341.01 186.81 cv
342.504 182.86 li
342.504 182.86 332.029 164.98 324.657 177.545 cv
cp
.94902 .494118 .392157 rgb
f
327.164 193.803 mo
326.975 193.803 326.793 193.694 326.709 193.51 cv
325.497 190.849 327.085 187.788 327.152 187.659 cv
327.282 187.414 327.585 187.321 327.827 187.45 cv
328.071 187.579 328.165 187.881 328.037 188.125 cv
328.022 188.152 326.613 190.886 327.619 193.096 cv
327.733 193.347 327.623 193.644 327.371 193.758 cv
327.304 193.789 327.233 193.803 327.164 193.803 cv
cp
0 0 0 rgb
f
342.268 192.821 mo
342.165 192.821 342.063 192.79 341.974 192.726 cv
341.75 192.563 341.701 192.25 341.863 192.027 cv
344.86 187.908 li
345.022 187.684 345.336 187.636 345.559 187.797 cv
345.782 187.96 345.831 188.272 345.669 188.496 cv
342.672 192.615 li
342.574 192.75 342.422 192.821 342.268 192.821 cv
cp
f
345.813 191.366 mo
345.801 191.366 343.355 191.31 343.355 191.31 cv
343.08 191.304 342.861 191.075 342.867 190.798 cv
342.874 190.523 343.097 190.302 343.379 190.31 cv
345.824 190.366 li
346.1 190.373 346.318 190.602 346.313 190.878 cv
346.306 191.15 346.084 191.366 345.813 191.366 cv
cp
f
328.957 196.434 mo
329.199 196.889 329.567 197.396 329.934 197.51 cv
330.041 197.543 330.19 197.561 330.417 197.41 cv
331.103 196.95 331.727 195.831 332.144 194.901 cv
328.957 196.434 li
cp
330.074 198.533 mo
329.927 198.533 329.779 198.51 329.633 198.464 cv
328.532 198.118 327.898 196.555 327.83 196.377 cv
327.735 196.134 327.844 195.859 328.079 195.746 cv
332.858 193.447 li
333.04 193.36 333.255 193.391 333.404 193.522 cv
333.556 193.654 333.612 193.863 333.551 194.053 cv
333.509 194.182 332.503 197.215 330.974 198.24 cv
330.686 198.434 330.38 198.533 330.074 198.533 cv
cp
f
333.972 183.455 mo
333.813 183.455 333.656 183.379 333.56 183.238 cv
332.872 182.237 331.384 182.748 331.368 182.753 cv
331.104 182.844 330.822 182.709 330.729 182.449 cv
330.638 182.188 330.774 181.902 331.034 181.811 cv
331.126 181.778 333.265 181.044 334.384 182.672 cv
334.54 182.899 334.482 183.21 334.255 183.367 cv
334.169 183.427 334.069 183.455 333.972 183.455 cv
cp
f
323.044 183.404 mo
322.927 183.404 322.809 183.363 322.714 183.279 cv
322.507 183.097 322.486 182.783 322.668 182.575 cv
322.768 182.461 323.676 181.461 324.819 181.457 cv
325.397 181.457 325.925 181.712 326.355 182.196 cv
326.539 182.402 326.521 182.718 326.314 182.902 cv
326.108 183.085 325.792 183.066 325.609 182.861 cv
325.366 182.588 325.114 182.448 324.826 182.457 cv
324.236 182.458 323.61 183.019 323.419 183.235 cv
323.32 183.347 323.183 183.404 323.044 183.404 cv
cp
f
341.01 186.81 mo
341.01 186.81 335.072 184.667 332.542 180.913 cv
330.012 177.158 329.679 175.154 329.679 175.154 cv
329.679 175.154 329.2 177.891 327.248 178.771 cv
325.295 179.65 324.042 179.882 324.042 179.882 cv
323.224 183.79 li
322.925 174.761 li
322.925 174.761 328.054 171.114 328.791 171.019 cv
329.528 170.925 339.039 171.4 339.649 171.891 cv
340.259 172.382 344.114 179.229 344.114 179.229 cv
344.735 182.464 li
341.01 186.81 li
cp
f
333.901 186.58 mo
333.712 186.58 333.531 186.471 333.447 186.288 cv
333.249 185.857 333.009 185.619 332.712 185.56 cv
332.121 185.444 331.347 186.012 331.101 186.242 cv
330.898 186.43 330.582 186.419 330.394 186.218 cv
330.206 186.017 330.216 185.701 330.417 185.512 cv
330.545 185.392 331.713 184.345 332.902 184.578 cv
333.334 184.663 333.937 184.956 334.355 185.872 cv
334.471 186.123 334.36 186.419 334.109 186.534 cv
334.042 186.565 333.972 186.58 333.901 186.58 cv
cp
f
323.916 186.61 mo
323.856 186.61 323.797 186.6 323.738 186.578 cv
323.479 186.479 323.351 186.19 323.449 185.932 cv
323.816 184.966 324.315 184.453 324.933 184.407 cv
325.938 184.329 326.632 185.545 326.71 185.684 cv
326.846 185.924 326.761 186.228 326.521 186.364 cv
326.281 186.5 325.976 186.414 325.84 186.176 cv
325.652 185.849 325.258 185.371 325.007 185.404 cv
324.87 185.415 324.625 185.653 324.383 186.289 cv
324.308 186.488 324.117 186.61 323.916 186.61 cv
cp
f
342.251 201.384 mo
342.251 201.384 335.895 207.377 332.172 207.411 cv
328.449 207.446 328.971 204.351 328.971 204.351 cv
329.585 211.492 li
332.874 212.57 li
341.095 209.257 li
345.708 204.093 li
342.251 201.384 li
cp
.988235 .701961 .356863 rgb
f
335.527 212.932 mo
335.527 212.932 338.314 216.745 338.881 222.728 cv
339.448 228.71 335.975 235.434 335.975 235.434 cv
335.975 235.434 330.405 229.118 329.668 224.352 cv
328.931 219.584 331.482 212.815 331.482 212.815 cv
331.482 212.815 328.958 218.558 328.334 222.071 cv
327.71 225.585 326.849 230.102 326.849 230.102 cv
326.849 230.102 323.47 225.622 323.672 220.304 cv
323.874 214.985 329.585 211.492 329.585 211.492 cv
335.527 212.932 li
cp
f
330.92 207.95 mo
330.688 207.95 330.622 208.042 330.588 208.089 cv
330.169 208.668 330.582 210.534 331.141 212.162 cv
331.607 210.708 331.956 208.959 331.523 208.249 cv
331.411 208.065 331.25 207.974 331.002 207.953 cv
330.973 207.951 330.945 207.95 330.92 207.95 cv
cp
334.814 214.688 mo
333.279 214.688 331.301 214.153 331.019 214.074 cv
330.982 214.063 330.964 214.057 330.946 214.048 cv
330.834 213.998 330.741 213.907 330.69 213.787 cv
330.354 212.992 328.729 208.954 329.777 207.503 cv
329.981 207.222 330.368 206.893 331.084 206.957 cv
331.651 207.003 332.099 207.271 332.378 207.729 cv
333.213 209.102 332.282 212.011 331.822 213.248 cv
332.902 213.507 334.742 213.853 335.592 213.606 cv
336.491 213.347 337.001 210.25 336.642 208.502 cv
336.586 208.231 336.76 207.967 337.03 207.912 cv
337.294 207.854 337.565 208.029 337.621 208.301 cv
337.945 209.878 337.733 214.027 335.869 214.567 cv
335.57 214.653 335.207 214.688 334.814 214.688 cv
cp
.968627 .45098 .309804 rgb
f
334.226 216.393 mo
333.899 218.501 333.751 220.913 334.335 221.641 cv
334.423 221.749 334.51 221.793 334.636 221.793 cv
334.762 221.793 334.814 221.752 334.863 221.682 cv
335.336 221.004 334.869 218.581 334.226 216.393 cv
cp
334.635 222.793 mo
334.206 222.793 333.832 222.611 333.556 222.267 cv
332.228 220.613 333.461 214.917 333.606 214.273 cv
333.654 214.057 333.841 213.898 334.062 213.884 cv
334.273 213.859 334.487 214.003 334.563 214.212 cv
334.949 215.271 336.813 220.634 335.684 222.254 cv
335.438 222.604 335.078 222.791 334.642 222.793 cv
334.64 222.793 334.638 222.793 334.635 222.793 cv
cp
f
324.146 245.3 mo
323.936 245.25 323.716 245.2 323.505 245.14 cv
321.726 244.67 319.976 244.09 318.286 243.41 cv
315.306 242.23 312.466 240.74 309.826 238.99 cv
309.005 238.45 308.196 237.88 307.416 237.29 cv
305.855 236.11 304.375 234.84 302.976 233.47 cv
302.996 233.34 303.025 233.21 303.056 233.08 cv
305.605 221.54 310.446 214.44 314.446 210.32 cv
318.065 206.6 321.532 205.28 321.532 205.28 cv
321.492 205.4 320.936 205.52 320.896 205.65 cv
320.505 207.09 320.326 209.14 320.315 211.63 cv
320.286 220.22 322.246 233.98 324.146 245.3 cv
cp
.313726 .470588 .286275 rgb
f
84.5107 194.297 mo
84.5107 195.066 83.8877 195.689 83.1191 195.689 cv
82.3506 195.689 81.7275 195.066 81.7275 194.297 cv
81.7275 193.529 82.3506 192.906 83.1191 192.906 cv
83.8877 192.906 84.5107 193.529 84.5107 194.297 cv
cp
.466667 .447059 .827451 rgb
f
92.644 185.001 mo
92.3677 185.001 92.144 184.777 92.144 184.501 cv
92.144 182.205 li
92.144 182.073 92.1958 181.947 92.2881 181.854 cv
93.3042 180.822 li
93.4971 180.625 93.8135 180.623 94.0112 180.817 cv
94.208 181.011 94.21 181.328 94.0161 181.524 cv
93.144 182.41 li
93.144 184.501 li
93.144 184.777 92.9204 185.001 92.644 185.001 cv
cp
0 0 0 rgb
f
100.188 185.001 mo
99.9116 185.001 99.688 184.777 99.688 184.501 cv
99.688 182.205 li
99.688 182.073 99.7397 181.947 99.832 181.854 cv
100.849 180.822 li
101.042 180.625 101.359 180.624 101.556 180.817 cv
101.752 181.011 101.754 181.328 101.561 181.524 cv
100.688 182.41 li
100.688 184.501 li
100.688 184.777 100.464 185.001 100.188 185.001 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2112.w037.n003.71B.p1.71-temp_01.eps)
%%CreationDate: 12/13/2021 4:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3X+mo/QZ\ra"-)#9,u;@+5Q0,VGGqC4JQ1&[hZE\%!]Q]_I!MB4ao$j=50tEEQr+fG^;ABDNJd/M(FIm:rn*^!5(+h+T5R
%F[K"=QE;HtJ,X@piC3"\DamBq'`;U%Jndnt'U+g-eI(]$?Yu>jC'DB*bgsqE7WUAJrS^`iLYaW<nIfd=Ek1m,OXYX2H`3.b1U$AG
%ZCe<X.UFW6V%a!r=&f!<'5Bf8pm]1qWeGK*kat+g^UR?rqb=Y3?dZi\heKu(TiVt!FLmqJ%gFD;s"1uMol!LJ<l8^<C=S@q=>[^(
%YtiXC]#S\RA'b_`[gY2/3WI*7QWn8_M4bR\ConteM:KOa*?e.WAO/g9rMT/bfTk_mJG=%g`W(R"h7rHgQI$9Llf[=SLOEj;J>FM"
%'5hTuK%e`U6C)>ILr4;K;D3AKT,(DXXd#5Uf+\D&_AAq#X:>tM\#km1\dkgSj/02:D)`u`:p^@3n\P;1ptn^CpW^Vah^eO4^<l+6
%l`B^l(0$G+ck*s9g+N8^f@<b,OCo0LA]o'q/,EhcS@ji/fu!t'UBpmW''ET]eo(TFf#hi7NQm,$HT>hB%_Nm4UF@+'YE%ptot5H6
%UKofWNbM^46AP([\s:W?[[U*!<DTQ^D2>$p*Ole(dfT.'Yq9c`oO6cpSH)e62bLQUlK5[X(b&NF%-WP/ahHJGP_oLp!p;T1%s<tS
%66B9Vps9$RXd3</F&B?Gls\6RXPr+mn)O>K?+I+a,t+O5m99l%LR%rnW91aY[gAj@3A)l7^PU0q(@`*E\ZXt"bJM#sMgr'9!S)>j
%#)]\T0Ab6%FuQ%klE$Fc@55sB/'Ge=QA*://"[W;\h9:g>qG$Q5H=._=Nkom)#hCe==fr\@bE;5c"?K@2N)/;H+]Wm>8C5bkHR99
%cRQ1cZQZXeYs-iHX=EZ(3`O-Q/;Ec5^K:p--"b?giM>rrQGH/O?^eSl#HNgT_S:>LPJY)e'LNXO)CL5gC$t`u_)O+7Q/Rse!/ogc
%n1U*Lk7K%AM$D9[c#Cd$Kn!6*2L@=_2LIDDeisUM/<qX#ra@OO,Q>ZZfKum3Z[7)Yn-9`H3Js)6W*ts2NqaEoE.X#Yn1PkGK((E/
%_`?^`[[<"Y(in:8YYROm1jD;X@d2MV)=FaH6_;(&Rm!5@%A"#gouu,*bJoEqIoln&-tj;B8CcD;fkm6(rl&?*eo?]Y0<?r.`A0D=
%W%P#RE"YM[l[r'G+D3tsK'm=AN+<c&#UU.!bHT=4a)K@NB#pa`MhMc7A&H>rU4:`VCOk5Rs7kLiUGBu(CX3R1R`NrB7`kc+ZT:og
%E,WO)!a,OG0M3-D&5XQN&#`'=I^%N-f>24[QioILH@QV_>VTd:1M`@X<E6>V'`@*f;W[p8NSOrUfg!A^f>0EC#LuP4JV%h6caMML
%nBLqm%_Hm(ft50%V:4d3nBLrD1@.'sB)eNM0#p5n2uC(j_leW1p.phN\=CSs`4p,:fsS>!h`+-Na;SYKSTZ(R5pc44e],7J>(r##
%m$k#q/)'<Y<WAnqJ$X@7LX#?%qA-$qE@]<n<r^.=U[4OjU'@"bV9ed5+!64XIJ(FXKI%\\YXigGAD#0W0uV&(.XcUb?=atkk0jfR
%l83r'lC:&n`o5-r8Q1mrYL\&#iE\heY$Vnk19.K0]#4bPalA1Z:P2+oLuTJ+JS`\hh,uA;E,9-0cF-CU$hGkHR+:=u#=Gl)H<QH,
%g7Q-TUWHI-=B3de)S-J[mI%e$&fGu'\73kHioU&X*%PW*q4(pTBaeF%&g'=4TL)]*J/*n_!UIeOG`N`7l$UP@H<1^Q?*NKs*Ns#H
%4p%LWO9k?:F70,%W.Ju]#Yi^2]S$5u2K^EFf3-()<RNd6,"%tZLH.X\lCD"5&-UEfpq"L6SFFC0X;<(@^/[33LG)n_5/Jd+_Ub*X
%678rsB[<,N*ilne5oTQJ'a.ccOXeefjWY;CKc=8#H&uGRHHV4$$0`+c2BeMi!>fJ@i6n/r6DC<3\<)N!@HpBhCnP&>%<3@XLLt<[
%c4%F<4R?=]F/@Cmh*JB#3ojl,ZE9_AeklTBbV0/XR'c*,bG*dG0YXIdI(6Zt]Egk.2?kNXCKjo$Tp_s<c72d&#fFa!."HtiC3^&f
%UAQHs<g&DrX[<i=7TR]IJRIc^q4`)P9cFsX6R%QI66duGZ@_AGVuC_6O0Ba#=;5./&ZjW9-eBLu!fUeN;EIPZ3]&V%FLZ9T+ScN@
%$ojfr-?YDN@F;G1>m0;@*E5<u>PY@4jYb$,,bCc:KXD4gFW&J=Oo!4g#g52j@Ikbr10L,)Lpo3.B/d;rSWF2pl5Jl#6jG7^M%-u_
%AC"Yo1a"l>p`l?Ondn=<7oUT;N^K[1"M3h'&]qS-<Io(TPW$oW(YqZV+Tuqs^sHAH/X))L&E1C*1`A\a-C[KX$(AfP$6V1$:>m%N
%fG0Q\Cst;a[X^Q#$ne,R[SBahIP>B#L-"/e^"]\$+,94q=`]>bYa9YDN3o%q&ht&.V7F.PKiPUt+Mo8o#Xck0d=?$#VO7u1jh%T%
%*28:C!McLK.e_E9#)H@tC!APeUYJ,Gop.>6)/)'dPX3";=Z_tYqcOfM'JgC>=VT@N*5Ka#!uAb5?m/F%+V-#nLS[Q,6?NF)$tW*F
%?>%308[Mm*.!=3%?m@1(3P9=>&/K!)2!c5.,?$N1dg0(tG,PclW0,\+8'@;1@KG37ZlEE6H^[PI//-u#-`b*Siu_:&7(,bc"".gt
%QX_54o0\HTWIi3$1h"OFA/W&(Odtb&"aa"VJ-cHEH2+o940>bVk*!0J(PcECq@V?cQP]@CQR,E2>f;;bB,KUbDO;apdKYDtRpl#4
%k6HgDdusg(JEi\96/S-%"&a0NW]4]%jDbB:0?C"`f#\f1d;LULB<r35Lfa%U'>CnYL^!oa#dIBcCe2<k2:n<-3i!c4?YnOCUd3g?
%@cAH(ip4@s^9RN05SCaWOX<a%;S0ZfYZVgBdQ<K)3$S"2\\hKuVk:mp<Z#E7)_f[WRpbRITR\jS@6-XcJc9\F"B))+!)bM51"^\R
%lT#jpd$t:c4eR8M@3<?Sl#02t2?eK?N!=7h6:A?=`p$bt79./X^clEqpL)Y3)l,_7l%!1CEPbeVLTodOfK2V+p`G?I*>"W6YGS-D
%Ke*jF&;M*tB9c6clJae=!.B0MOR<Xc0$&p,/5lKYBX]fJ$FOO8SJ$X)!sV#@E-`?XGZi!TSjP@uAFM`N7Ej(rXPP=Vn<\IiB2&g0
%Np-4mIs6d.#Cc^KhYV:s%u,MrGLRXXnFti/I2L!fi%khm@rYT]L@3*d0mWeK&Jt7uMi7RceqhE2a$SRNj_d__)^kTpY,gHoZ-'4!
%*?,H?`!'p:l:VR''mC"P&)5ic$@VY\+nB3knRfImLfD^iB!2aH<UV"Am>P>LBj4!7#)`j$0<n[H9N7.\mNF37,,$-.GEm!cb37nG
%LP9XqEosSK9Y)bH-pHVg3&V]b9n<fFkbo]V!Q/smncFT<KpdZp&]&U(W^hk'r/h#a2#;GY=@%s&AH.>FhT\*?#0>f#?kgWH6BpGN
%m6q4V6SaE:AeaspIL%j]#if;gk6D\;4TfgfO_>mN`o&>R0*I:J)j0?ikI+,%e*pp;,?]\d_>MS5WXCet7htrp@>qW?,HPk[kYA(h
%ARql)Op.to-,VhWLI'9Li>V&sb;P!$!83Uj=bZI%MP2eaS7Ej4d8d"b5@XPJ0G!5PnkbY+,:4GaWt=DJL.H-N]5<>s?b>;'XGVb[
%@FNB*3&^Q1Hnd^+6DYOAA*=F^2iN]HGOiFY&lG2>(ncN:!mSlCRd(Mq!HSDPa(NP]b+c+!rj=g5I>!;W`,(4GD%tn2-b:O]h8T%P
%&P*_rh.A+ODGZsXX/&bN!+<'?MJC5hUK-XdZ0"a91$kFr#4^0(1(!+"c"Uui=9p<'UL6oj7Bcr>7Q<"M.`.>=?8<Y1,6fB9E+Z=n
%RU?o>"4gb3FedVPfSEu:AVV\j&`ClW#V[(H.I2`,7GJmq(<%V*-l?JQ10i+oRd@AY>sY'hMF$CO$HRa%:aI4O"\FRA(BsMdcBC_L
%'NQEjNX0/n'T72(]ET"*lZ_>n*0q8T_N5cMZ&nunFs"t82-%)QJ:4auia+\j>Z@ud#:6],nC-d4M%[mT;Zdc"_h`Tha\o2@BnQ#(
%cTRCI19O(c.(B@Hs+U/7Upp^)65nCm9uF'P@O6WSHJ97`bs\u^Ps]sAKHG2HPVj]M6C&-U,DCi$J37obSf7MC2%E"OO'PS8KggjS
%]SoU#XHs4m1L:2m:8(]R1K,ZiP#ao(=_&.Z`pIRDTMHtVA7R+DSdQkWR<rl6N:GQGE29]n\eHu*Zlh8aTh*Y>*P,!imT)l5AJ%Kq
%K>l8r#X=`a(-P,UjMQS/]I/qR+DmVKk8gj(m>@fNT[dT2*b!S?<]ore%)A"8?mL?VPrk^;/&Mh:7U^foL#[25:(^n&W05KMR'\@-
%6B+C4m9noBVpZT>jY:HbQ1)(8<4TONbU*#g7:^TH5GOY_D+tctm"&*R71Z^M*Jp)g]graD7SqEEW?^EN0_5iUBK9>-?D1%OZ9K"^
%cb"`j$99>I-aH7Hh-rHH]kiWKm_><(ETu\Y"Y@+u6=bj7Y6:=B5WjQqdmsR*7gno'Y]9UZ*T4eG)+!1M(@Huh]/.(cJF]GH1_c_Q
%*LX.<h-2N(44hB]kT@X6X>;a1&Lh9Sm<KfaQ]nHj:dru"FL\o@</3XSV<pDilGA[1'9Y@4^1GjdP?&ten.2c4B8>p7rPB/HBS^Tm
%E(?[A"G89I;?o49OqRqHmh&m!h#WLRiG_'q/_=^,:u2<%+EF(edPsD%T^&Tp^)*&EVEhd"L01rNnOC!T#0.1D0\HjB20P:,L*qN[
%'eSgBkktuuVI)!i],7S*lp"XdkDi8<p&5BRldJ@/9M+on18'8.+8Xf#>f?L<gV"+/(MTd+UCJ%U&$42*/fn&)R(2@E/-CRY@#j7Z
%S%pEncELT&%d/%:Zq#)/c\K[),J+$[X2rZk?1aIArRaX:H4GW8npR6d_'b\Eh&3urafs_RTrJ4i>n2agljU$0:?5l*G6@$>Vo\)@
%6?6E;e%7%9LKTjIMq?p!E9t1l2%c$+3jS<<HGKg-K=A,];"@pGE?PTf"Be&km*:Ic'?Y\Fj=t]m>_>3TU'qaAk?5/9LfJ*b,X_-Q
%!2UZCF^6=>l!TJ4Hc6>Dcsnp,1E=$j>64c!0Mo26VA0g^lk]2]%;?1D%)QWR=VmfLFT/O@EfG/)E+lk9h_E3I@(pmLP7E;U3gj-j
%WEG<c&]&<%Vs8FrAFHC-j`,d#mgb!R<)9J[+]$k$1e2U!,@S,Ae@Go0Lmm]JPch#o\Oa*3]1OnC%9$(l"K>003!1D_@FtnUD.2di
%$`5OgQG$32aMK>Zb@1tCFS6F_QsYj]$Iq#Vdsl%+-\G7&&<R!OU%OZCgdL=dIUi`m'SaX?s3icN5Jm#J#te9q!-"#.gEA2dC4P\N
%+?#ti]:k'@K&:jLPi\bec@L1+0u<KYlU#K+E:iBcmla%m6EmDI-N9\`!qbF0#I-P-2c`Hn.p:S!aCK!hLM[QF<sc;nGSEkB-S;uf
%gOE^eJo9MeBdhB'<JF]o!RWlk=0%Ej$rfcqJjp<$`.U:[PNIoike.E=5o2;tN!OFP<h@F\aO:84"p.O&Oc3-`WF5lt&Mf;U/=^E3
%jRj'Qo\PAjjti-$Mog$r$/<C*G+Lo?f8J7tq5cu$3YS&]hNXlL$`OK@BOn5-mf&"O7=8^If,b7e*<RB#geKB`khFd^1+'@uK&Jq\
%4fuVn%uC,4Lnonjc6!i4'8rOj;[9/;#1d:FKTl^M!^q3,_oRsTMg/N<d:<u(Z5>UMGF/l$q90uK25Cj70-Y#%D&&YUanI"3D[HMf
%D6!eb(M`FZ&:^?D8A9Y%,f7.N=LJMZ']Q$/<7Sj[Ooe>`%)<'aj!#k+U/e32afSqo<D4F[S7jOY]gJ0"H(9FG`;(o?GLKuU1cW(f
%j(5UF)>[_kcP)C/[Q[JZmpX.r[-;#6k:m.4rmR^3&f>K5B1D[-X!F9%3(;9!<GJVQ^;)<qBT13L>?Ha4G'#Y*F>sPnlfAHS98[9?
%NoY8p;^)@FhrP?("FF;lYsA4J/4=&l@SIZ2_#Uo@K1'K_$ag6>3T2=H\r3.RPGbKMX'i9&8L>Fp"m^mgX[r^`a2%94)3l88Ch3#;
%/.#Q*LXt8fBL$rtg9>q6s%$'Z+FjbM=FXF,/)-?=^o38l)"/\;?bJoSBHk-R7qi'/,qlJSj5\PWoLM>^p0K_khq*Sohono`H.FPF
%?9XS$1Xns9(qbfX)L07^Q2@I@cRS=8SH6QDOr>NMnENn2U41AA=c%p:$3;c@#6&%,lcA6&e=K\:q"-t]p'sm4hiS;s57E(j5iZ&f
%%]P9c`GN'T/t25]dokKbklCdSIon8o*XSge&0[_:eL-+!`DTtmK<$G%1sST#T$E6oKf?4.m_/X58F.N-VQI]`l1Pt9Y]*r-/[tH5
%"rm@HHT:tPpEg*PhWJ,1dsJi9dXAPc,'34l/q^oom7e#bmMfs^IIDeKXr"u>n2!A\j)NiV4qh1LU)*1C<t>NUL4@BSA,Ih8msda>
%c*'"pa*Z.cii'DASSA`I2<@'/[0dsHMas5A"&D]2[;tZ#h[M4%hO389f<MYFo83NL7l@5AWoB_Ps8:ad]B<FiPhU.u[o$qmpSp0[
%J,X@H?*%?/M$q)FW\mC5rF4d]q?pQ0,aR\&il$,[.mP%m/^'s&;LN+IKDDh)n.Y.@e>5h.*N+A3^Ss(?5m%P,;uPjFC\:NAXB_82
%:Wd"oCF&+uD"++i%ISIkVk?U4kdTEeC=@)Xl[TacL!"ME5G1:*<iiInbhPZFYu<3i.eMtB@%"@i?E8$h:qCPakqD@fbGEsJ=2-7#
%&t)5$H'^Loe]P2$*qprb_tW@1ef<Ho%/oUk<%[s+`*'_%nq2C+Pr]uISN+7Ql3IklSim'la&T4mCE`go*HOb1>-(KC$&kT;=fYV"
%E-%1g3@bYQHM%l`-2ZZZ1$jT;X6`oG:"_Y@%,+.l_dKahrM+C=/!l]i@(7B$M:ZF+$>'8(8$h:f&V`u:-haPcHr*ElC5Hc=frA%k
%0r:B^=CUa[lC6c]=6Vlm\GFf4Xu'/+'K>Pj)5M6rS&ODb'&Q>^bP8:S%*-!^`>)EIlg$o<QE%0YB,A2U;RqKoZ>[hAM+tL+F*MY'
%/,Jm"="<.Ul!EDjOBYqGjaSfB.bn9aj_^6bgFXMuC(1NI)\'!W9]<-R/iNVWQ-^-_H_<%Q:&NK:J[/u!f5'h)?*<(1=6`Ceis_BZ
%hF<EPo?(oV[T)TlVWq/`&JtTc=rYk"<(0q,5)hY=FF2Vs0bmQ)<7?[[R=A_jj586YTgmU9kg^HdB66MR6LQ=Y0t0^<nYWqeV./aC
%`ft_YEMg;h0rFJ.P2EK`Ngi^Y[2[`8ER=3Em;a1$+ps?F6#er&:u);)pnV#oTi7,6O(:T2n9J!fQ/b3SqrYq]+lU9_j1:Ia%\M=[
%fC\YDs(`QS1Caq=PTSH:WjT06$(SQb'5UQ,Hl5\LKo;1U.;\k*5TM\6iC_9X+3%lcJIc(BOY"m_XkbE#]?CSA@1$&qR"El9O^-cE
%L*fcuq[F&uL)<hqMN1Sla'"aX_D/VUg;s)D![UPJS]"p&5;W^&*et86,Nmr0[O0"Z1M3dpk>Z&rgru%Q\T5B\13;P(aHaAOGi5Nb
%O(tNRZoE+]PgomtF"sDg1LG%^bKYFFR4gMjj^u5304-?lJ+LirG@%QJI6':LN2cC3f!Qsrl/JheKQoTK<b/f?Sa1=.T+%5XIj]tl
%ctjG<rjS&Gj,%>ZL5V+-?Hba2B\i-bcUMUPm!A&2ZfG+BrFp5`mH3-I:"+"i)#fc*:bdu(/<8*?N&-5KR^P1B<?"^h:C=9I'<=eP
%QcH>,0pAhIp);Uf[Ft,NES.q9b/eB[-2n$kriOePrduO7<#O3hE?rTlIUes;)''snUY0P?GQn,Ki0E?@FJHgQ8*5eA)J/Ot1&n^Z
%/(Y]/hs^D33[0=CO*F=:b"\hPZ#2$`%"U4sIPA9lZ)7%I`\`.)E#NK(C&D9ZpeTQ[-acj[FV$2G[.`[;EQ/aN!LEj$C%P)kcAXo]
%Yu`SW\%V=Ikf.`4Ef?Ij.$n-0i91l3J/FaC^7VkNSd-#LRC<rA%WN?H?5kc::X=Krf-n&p.XinnA0so&5<rjF6n"*JoCn.^7Ms/_
%Ds#[3bX%jBjZ&)ln3])D-7-NUkVmC-`8m.e44C_]IrlC2/>(gdjccgsb*e"Qs,7OeS>H#YmFZ$0fo12eo0;fqL,r%S9X2*@](;:u
%"HFfU9G&WX2YN:s(#u"bL0#q6j2_X+E3oY(5EL=OP1^OBAM;>`jKF:f7V_VI)YH0S3\Z;u)acPpR[u[#o>JL>N/a<9R0g'bnG6.>
%NtItR*9f<iO3jt(6S`S]-f66q-9&bDYh*k/iP[EoN6.#AF&1c$rA!kH-go[e=GgYEXY(o[*BZEV@!4fOT37o;(h*+(SQDrijYOYF
%V`MkTZ?K:d'a^aIKPqqr^[<QrPC`[q&gl%OLbY=&2]eh_/&bVHB&)QV7f;1;*.r?B&mo^VB"dOGI!i]PTi[jWQ#dt`Fe0S82%:oq
%<]k%J`cguBGWN*oaLKE#,pE7\FT#/`5DN%#I`=+C7DTSZ\1BhtG;tC(a'??tn?jW6^;ZJ`fZU``c^@Sgfd3nfcYj<ONZ5H-CXj7V
%3j2@n=5!cM\&-c'(ER(L]kPtGEO*H[fVmqP'/Q?QVGo1g95uJC:b2:hU>\q>IiF=-Ge$[GV;[U[&VG.^`=fn!0Fm!]U8+/W$t[th
%`N`fdURQm;rpK`@6"jXD[(Jk%)hO=pfs8P`:,1$c<NO]KVGSsGI4rT],mCJW33:)E4<RUF<0N2Jpk5Jpkkp5`0jGtlbE(/Zn>`<W
%/-B;I:Q8`h%V@4b;^P,,ac*oSZgQ$m;1?KHR:W+7o><CrU;WJDfJE79Atm4('Q;u/;.=7&Yn&nA?@97@b=.i\UAV"d9m\Kb@@D46
%i_3tNc%i8p9/6@6$->VmAWk>Z;?#^89N*Q9SB6`'aI9,6PZUOggu\!d"I*%AauISRC!&l$1RYM7Dpt/5&ki$o8-ns6ma=d<:/*9/
%Ruk%Jm)/F(V;KNu@e*9=R%/m*USA[f#c@"e_Ao-(EV5g]<g0Jsikuufj^acn44/Cub03P^rK:ElAo]I-$>+<q-J)jMD'J&p:'2Up
%F)>NlNO)aYO[s+_D'mdS-Il_Jg<<Zg8[XscRhht=h@[?qc"RrW.,8:)i.'S%S>Zn4)&k`/NU.N%`B_7uNFm"Va[RYSJ,Sq0g&#bH
%%1b/l2r9I'.L@n#JfG`qBri;b:tZ/?IoCZ<9>ds_qOX'/Bnr:EW^Zrb<:0]Ld7>`qh=k*`=@YB)b)U4OZh%E+ZdQq@F&<V9QDPp,
%'E0Hfph[cbptgTAM*I2@4?N/rG<P(M*J_?clZhd>n>T+2TeF<bN;qgm0B6X_?,q8Fou,qZa.(B,q^R*3@38p.rsubsEMC;\j!Fj8
%[7\-`"O$\P*TQhWdj>IBI1rUK!.VlrdU__8:!/[B=i!TA0*S6;oX,O`Ykrn@%F5+aNQfS&0o%_nEj(I?%M.#D@kX.]7]CN3nQU!$
%fE@)pfJ_GNK_*jeJ%pEo#k&Vjc2[aj)^BFNVaj<Ri^UigFmPoK5dMj:eu!foG8ec:SF-@%p4$`P^U*mr&Qk^4rSR/%s!=@q42@;j
%'iTY.p3]Bo%8Fs9mo7$bA%(Q))tunlCsR;FrKGp+mfZ'A-@X:M=Lu%Wa*H@U`/&us1E(U3&0isO-_%5<_%s)k=e;c7,;Zc<aLQKS
%#/#o$\ArGVMN>:d)Y\Z^++Cb*q`]BOjjNO%$OWsOnEejGPNo5'`n\O$=^:NUP`D`0`_@Jt,%S"cfdoJ`HUr#m,@jIuCu%!s^UaT;
%cJJ\</D\mc^6NGE^U;V]Md*TD=7*U#2[c198*Fd_Nnj.6S]*@`B(<3i)b[1E@tVSo=fSi5rS@Vm=VakT<-2clR#YO.X-dn):tZG9
%BlYM?Fq9\>7[fg0A)?q\kO?S=q\WklXSW1*q&9hM9QX>RST9ZR_4?)Ai%dH/JjGZ!9i-dZ\t8ML[;<1*dKi"1IKA'X*);q+?=nbT
%5;AR/i+3[K)'SBUR"Y]MGSGnl0=/I;/FYD&]Z^F1s/!M(H%6u$;&fG>!7EEKoWWn:ES#W5,=p9$IsB>A`njpldc2\RaRdWNPY@9h
%fL3:"3q5gj_l&\H#3%b?4mqK,`-GC4gs;CU[[0NYm6MEU'6\#D9T7.7rbI9_N)Vg_:15%om5PQQ0Z>u`Ar:Rp*6O[i*#%3/Y:7L`
%gi%[mDOm#)&SJ!pXo1&0V_=UsH,\M3frK=GjliO4PY>$L<.9cN_e+t9O,F@5prD''2`FIGKu7j(`L)Q>0ru)L/XXKoY@47oj#i*G
%C*>?fIn)GQhk,rk8tJ6oQME31!5B^/-=p1!jp[4'b5B)hS&nftR>3\'*niFjNiVHf_XM9pq=4$KAAM,;B3dB)9IGk60g]sA^N!Yd
%C;cgYn"jKp<(L>5]]h&/Xo;fG`u#?MbF6C)-HFK%`A,B#Q(0:ZA&OeQ/<2HC@uRImR$:UA`A&]g;.ag,8Vpra]N@a)@ir[Wm5)dJ
%;B\NBC19lZ30P5,ZFsssKpGe(Wg2RS_m=YV-R>0'gU!WSmE.0-qcg-H$,VBd7Voh"Bl#WJR&LqC-!bjl5MttF[f'qaN^qYtIT1Bh
%f$7Hq<hWln0G:\-Ep'9>/E2SPSku[VV$@IK,3PFbXV+.9;mB3EA9MK]/:1mf7j^sn3C?Cg`qsCP[5`n2D03+O_LmJQk6CUKcfi[a
%MIS"3#EK>j;h:S4G2p/>#$ar9:b\3=3puFRm!+UOlSE7qK?OCn_[.X&G81CVX+&Ck9iBb<<Mh81/'_[;.:;+sneI)N-7%\'c;^Z&
%iN!,[EJh1=>/RGc8W1R.86M@j:qVrhAmt&@&]UF<ErUd9RsB()HU9N,DW]4BJi=K5Qd!+Qn[#9/hV?>ERsB'2DskB*>8?0HKaID7
%@a&TLcHY.TR6*?Kk@X/;ban'Ck:UPXibcSk_ZSrfbF);jbH7g$Df/Ic\QG(T+l6Hd\smSeDT[uLM#$E.\-r'KhTc7r.PZ&V^<Y#h
%(h]75)fu.sPY$S659OHZd-%nFYMXCd`b88Ij1ULt@O+stq2E"[\g`9<c/+c!H!U+NpKIq.Wn"dLWV'aW<]mkEqGE7dDWg+NbXQlJ
%i'_V5<%Itq*Q"58'#oeZ+D-c"$/hLk%7lPLI#IqIab^UEnR%89mK+u[OVrPPfijZt[3!@Ikc?M=fu;#OCUP0@?GSiVGk#U@8Fbqa
%J4;;Rmru#H+=Q:<#S^A_Uj^.%lDu\Zbf(i1>j@63NiA5^9cMI=9Z+,3WZFO?GX"idG-&@o=`RL5Z!s40jd4pUB#Hc1G/WNAY!dU"
%+Pq;.g7K>j.E2HBT-i!TM]pTg$W8'S13?S8)-b-h"#8N#J*XMBs.BZ&<CZ,55NMLF'4[3O9YHjnf9gBLBP%q&Cngs$9m"D*d6npB
%e#?7fpnIX?=$]b$o:BN#O.dg10<h&m0bD7_]C/fJ4:`u"W]A#Ej7dO1jB`c_^]0GW^!W>Sg*jAs.XnIC)bcK(Nk[aL+JCp+N70GH
%,f2O\GgE)@JT6f4kVM<[;iVBdX`7F&E>8>\/'%F\2:IHsi_RjAj-]?8In_js@K^uMZGFXAHDYaHrobaWOs5XP`\E=)n._JT1R2lM
%qdV8p+3A>2kKK)t4Zf$E1eY1`[@79h8L@;r=$1.K`p"?S+i5=qC<'Z5W<n:YfB\cV%%f!IN$Bf?_3'(fj]^\`&7(=*R$c<7qkj7T
%N%&hB-iT'`j(Ws9G!1Qt48*;[XA?am'%7^bS)?X\0W^1jE^!bV+$[P`(jj/Bl;Hqs7G#a=m/F^]M")JD`!?K'cE#A@d[koT"J6Bn
%3q3D30$B_'^QC0,VC?ueLD9&"D@3kclSrRFLe+,'Lp7md'>B8Ah27F<Yr'S3X+f#Z'I2'pA19U6,c7-VG%Y>DC,/_c?^PCoRN+XH
%%R+NThXIPiRlG=a(djb4=g2<+PhB^\1HfC@O2!iO#<ur[$[qr4AYG?tFLh<^,f(aP3"M:9P7h,fZkU\J1kGtH"DK$mV^bb0eY7F/
%'#@6E>ohIq-dW3k(:)6E)?7-E%H%!Es,QAdcXHQCb&-p#9^e9u!Mt^^CHmqq[$u8r6a,e2qMiF5UBk?LFu-u&B"`5qFN`_p07$s*
%PrIW>]5ZB^p;T]K`<QO0L^rSY9WcY9E!H81\3cT4W^d"=$@P8@rVl?!ls@9N3l@/ZS%t*^e_9aI>p3-!^B])S5cfA:dQ%@a+eChI
%<U+.&(/bdcpd\lBi.#Z-KUfoOP\mq=#$-&mZ<c!<k_B3npu*^&@G8BRRl".X8N:X;i71Kqo`\a\!>UI/`;>TfUA,8S4@OFD?A^ER
%ap:M#%F_J<a9YLU3.=W8ZJTEmCa(7Y%iP36qbq1%fkO?&(bgZmGk2TR(VT@bs.'k^P6o5RH[XO5*C-B^`T`sN/+SU?!N]'Uc[Jir
%CLq>IrsOa<%VWTupn2]96G!<u6dBHJ<@hBl#QW9_?:GVK!(,DCa6il;":@e=o!b(`9tg04q?p@,Q1i)Fnm]"Pp!%8/[t\X6.#^*>
%HGFPXc049-U[#Ei`>=sPcg$.gJC66gF[S3GJZ`t^[BZ*8'n#^7'.qfCp\rOWY\5;VkjKdSruD[Rm@o<8G\^U%OA@FQLpOZ;?[NOp
%Km'e&X8G8g0G_!BR-<<&(4VWPp-FrB7nIg/l(Q@U3YV]kHqO>VHuh2.*U7R(B=_3UH1QI^eb_>18[DYO9TL#L_#<"IotBpH)97([
%/e'#sDVWXcD>;>0B",)&a(.B"Xele&0o&LSedH&'+MfR>7mF][34(Y%WL=%\@n`a&dO%nn%@YUcXT]KiJUc-0DNo$oa#duhh3H""
%L`ks'6G2r2kOGc#5e2ln3%BC#.tW'>)[>@%c\%W=neaqLRL>Bm_T4QVPE-m#k9di2lal49M?u>t3M@e&K<>p)#3e9N9o+N:V.Qjr
%[<sCePLJ=';qPgmpOhd<"!?o)gbqdD7'lO7moYY=mKM!^1;"St`G==S%aHSk"Lf5\AS=cEV-?8Ee\.\r:j&")<3fUZV)k$Y=g,47
%"K(o+l#s+n3;&^l^Ce],e-sUdO%:kMOT+`GS-MK<[X-]t,qXi%a%b's]&*KE=5)aY&N*%1_q4e"$I4(%h1E@Vm<[PJKa4VI)Eqm1
%9u$5C:Rq=^[Lt[@;Tl[)PtN\PrDcL7FP4$W#\Ld82m7KB/:^\\RBl8t;6!rIOh$/5St^KD^+GW?DRjrXPu%@)]A*h!(9N!kX,$!F
%Ce)s:+\V;Vg@[iTd,4DpYSK(A<[&7ROj,)i%fPO\UafQR`2O9KeSb$s#?Eg%\*C1)_lIb#FcYq*X5::u><d+*X36dp[V_d#kKGTo
%n640O2![*oE_X.$><g68#IT.b`gK=hLJ+/44,.#K\Y^5n/JV%5\PM\UgZ>`._hI!`'nX&,%3::s'=_-<@2e&$?'$sG8.@Z\[K<]m
%TIeJ[Ui;\3XMg*':p8S&,s^71boR%R:dJKTEiJ=OR]T'HhJ[S@N-9=J6A@XB>:]OjiX6QlP7]"u<SKn/80%E^r,U#Q>JOE*BfSO=
%8=5pbb\8HMg@[MRD)60gmh//2J+FWP7Oa970o'_W%ALu;Dh(krIUFRbScp2qe3^]F#AJa_Mgn"ohSRu)HOM?.V(O#`9an)UO,/A:
%jQ6O!g;#Y!1am]$h#slsme[#^!e(Ka7aWm_BIg?-<,4qkbL)k\]fMemaLL2W%hrGcoOm#>s0,dHQ!fbh/g6_KEZ)@e:aMre<'K`?
%S0bIsS1I1UBj]q7#uFD"atCFnoS]Ph,pXg$Y&q`<lu%X+$?60J6Y(g+Z9^2-:a&O>`6Ls=?b[!XGN/pU5'0=PWBhb,_g8Li$`G4G
%WY.bjgliesa3"#n^D`E,=Qm8Y_N_2\3p+(u*q5V8G.,;aou70qN(em\_PLtpK*nY"AHr^,Q098r([[#6B+[]mN!"_IfEhD?NA%^*
%'^1"Q%(l.BB/sBOJ<bBFY7,<TH!dRY"![/g[T^^VJ5D/=T,%`K?F`1ois(=o7anP<DF(oN`OnOr1N)_*EPAM[mo=:@M3-0OB)H"?
%OPWNB[`WE"IO!nf/EcpMkb4BRrfP8Z5RW<F5Jkr:&Yqbd**l>X6C2e[.ocTF.H]QGo#")/C@ts@\dK:XjS'RBUio;>]1=s2Yu8m*
%c5WI-QSrM[YIQ_WOB/;jmA<i(7a4B:=h:_]4m]SZ.?P,U(RJ\eGQn^.;F6Kl"E8sSdQ!K0d>J9lV1#)O??U/Z3eRTl"-teY^G9(N
%V=g<`\6uLs@2V86!VjT2CsPc4dnooT87W5/3K#asY8:^.>o"EqXS$$+be\=UlhZOOC1KK=BrKfX<<Cp\B9>eY=B)]ZSYV*Kli9J:
%C]Zu.f5*hA'e2G$^g8XYIWuS\EH7`*Y4a>2<\K7s@[FKmAL^;:g;EX$>h-G'k`KJ!H2A"&KT6'bH.?X]1s9bTTi/`UD%70fXCSqH
%(kC:hl_u5?\`rcm;CE#0PWIM864Gaa^P_`g+@FEA8J@(mWn&SLnMX?;!J(u#<R;g>N0k$j!u@.k)CY3/TFJ6R#fqT:gc`k!r@tM!
%%dbE[BMQ#c.7f];`TWFR=g1]:I+BG_CM8X`##Q_4.TDmC<b+_8?%,f"VHTg:*.5O1b$J@K<UW)'H8F*ao=tFmnmWi?DCbH%e2=Vn
%DhHaGIKn2W4>E3/W8f5eZjl)3.`NaP:h`7-6,'d"X[&AR1p\QQYUmk>[+N6aWp`al%E[J?.,h&W8eoN:Uc()PNP>=p6B+frTa9EG
%SOUS6gc*',$C_\,kCGDdg1rMMX`cBpCj(WB(G-UI_m%Qt>;!nu,9uG95BJ2D@&q=dZk9]mH7j'@IGGlDVHBu[DJF`(VtXeaE[V^Q
%dk5C4Y"Rt2%-FjqJ*UMcC`"gWEEaG]#cqsoM*j*D%UDN[p'.PL3`E8V`e';#LJVeDqF*Z]ASf%bO?mKb:OBQVmIe>7TESGV095lH
%U][j7EbQ(j6A\mZ:`D/[&4Q9(>3"eML73`qP=cPDEI8h2H!P/b]KlY?ZE-m+Po@Zs&XP6W+%FEIjGZY$mA?MV'dtikgM'HARUN[2
%0]dl;Cl,CQ?7noS,&5Gu/@u@pLaH-=Wtp!9^Cq>*r@;V'?lT08VcpH/dT%gO(Q0Cu\2./;7W/go=pTnZb^iVW)$oJcc=;g@.g"jV
%p0RKn]gCaB_ls)-N2opk0/m+Nq<_ptK3IuKpBaN?mhsrDJRX#OEF>:G)oD1C]lLYX)B:l:hr^ltGY`AU/$ZQ@J6='bJO8c0n@9ro
%!`ZB?kg&-SaFm]>:s8$];WSH-4[rTF1,BLMV,pfZ[HlB/rZFEhBU)_s5YT$f421lY2rQXl"Luebmd);d)rf<Vc,B?<^RAh^hf-9A
%C'#2nL$FM+7>!GU2=W#?3!fACH`sEelR"ItJ"*NGUu<E'G+oIA6)%CSJ?t&UBGdhu>H_"#PcCfk,",(>$0YJL:k^btZte5i_,$:D
%MXDe5*io#;GCBQWj\gZs3&^:-,oH,X2+PKaTJ>"Rmgk^(KPR<*'+Chh9XLkpp^g<&%hX^7JX-\';LO?6L=-9kjq<&\;/5m-"l]ue
%5]#FB(i0Y>Z?ae"Qi?YHao<EWoVm>p6,u>^E>l,8#LR2IG28gs@N.L!(H[S/Z<j*haHuh@k*KcHYZ@k@mM`J?.+@WbQB'b&Ws1*_
%gY0XVk%]fEL/<bue:?h;`R`KgI_\/.+C*i=7`!IG9@^k`\fntO,tL9`AHO$@n*u:^N7MXE6/>qUHPc`X?e;(ghpY2\'LHg14KK:=
%Yj]!>I@pS!==Y@0F9kZ^#V?MBn$Ub.n:(.1/.\=dFBQ1%)J=&q[;(gj8UEm.Us_tOi+A"JbEiGCI%4l'%NgG^LiVepA;Qr6nZ]_p
%ZHMIrmY"Yc!1nQ78q"c80&QC<*5eaJ@oPnp[T>&2q!)+Z4r&k9BFGOeI9G-I!4*3.@E^ijLQOqlM%!Y;.,PL)3]bAB:/]OC!o$Vd
%b%qo\%5;&0$8VbU)%@f#H1W<Dcs$+#!d:$1Qf7lfboB=npl:G4?J?SWS>F:u.?Z;Bck^8`I5n7u?:h"KjCTClLTSjI.-WOBeI@fr
%%IZD!Y9%EoMY0(M]\bFpF)0-sFRXRC!of-'cHUpS]q)R7O\KWAegX?F(*<7Gj$,k$(eeR%V%,7".-Y\#?HYRJCKI[>?E"p%NPKt^
%K3@GXp2tQiCZtLt!Qj2@AM80ACAPF'nT:&.pOA^<UfJSD!Rou+H&[ng[ui*G#<I:!h:m"p*&u>73fRMjR8!%Uh341nX5r%&D*>@J
%r5.:4HOGh2RBrC#q#c'2.%+mV.`k->`Td!=j6&#'PX#*8dlDm3^<81t*n5]=r0^6]I*O%%O-f!lalSk1d&^^ull?$6r]rJ7m<RaB
%SdI\'2=U0!D1B2M_iKLQn7U&"brk`Efn^F4Y^lQIioAW*pp%1oQTLfIHS=o0M_6fsZh4_[O'1H5GD/c(/C7t^H)9-Oa7:3.rZpm$
%I(=f8.o5^+*4jg/8u:.ti\?af45F2P5LSNBg(@BCad/CY)gFqA205bGod9T==6XTdlSlQ;j_MM6htaq`FW#[RnAdCBg>-n(0%k&G
%(n5);Jcbc7c,Z_HX`mhEDWgk$REIh:[F6T'i7VU'Za"tB56'>AaR<X\COkm8O#tsS2W*\8Q<l-'p=oEk_A_B3LZW:S<n$Z^4"[q>
%+)8>Vml-NX([C82T8WA4NTZW#Z?0lQYJ5L`m3L:>)g@S7<O!lI*PZ9]E=$"0n0NI0s,I+IG98[B47dNLld[Ke@Wd49KW-TkIffCn
%8JIcN`$IIYJie=W_16AHR`qh=B9)uM.&H?DhS)'GT,+%NAp-)p%3!W7lLsPAe_Klse"+J3S&`./&(]pfrFU':q:E*P9SfEpAri)2
%YiQE'MMq49e!8X(49$S@GALFZKo9d3l&3g:S\kR&q:B6_HZeKoIq7f)g4c.`2st&@-Wdc]%@^k,qJnB?[e@A&/_q34+:,UM@64Xu
%opNMbmO"QO^3TA4IUiCieZ^Rme^ki%3S`>(^,Xu[<n?!hrO;AWYb#3&1[FJ0pURush@_Z3.6fKORBjABD;-#S)a3"*m&@&[mRLfP
%\Q:GXmt4g?XI[".c0T+&]4n[X^A9t(FIdU+;ffL=oac@$F*P4N\ZgHMIhFL99[9i?lcJs^67"WnI.8MNbZu,P]T$__q<VZ#7ln[,
%Cut3-\`Co\S$0rSS*jc1G.+tYKQHVQ8%b;:0@q3*VffOV?@C[8\TRDm3YH^Y0fc`<EAKViQ9.]&dT3Q8$T;toimVBN\R9,MfhF(`
%/&+l_m$uUhO8$+]ajjI6RH3)@Vi0X4LRg*?eFiZ1EoXV#1oXGL?7".!m3hT&et]%tIVgCU`@!=&f%U&"Uodr\P0WYd4mD*g(WjqR
%a\U$\!hJA7I(FQ:-b$Ql*[dRc4M=HQYH"YFbi[qj1AcP"._2n<Ga-FEI!qT6Yu(I^gcM[b-hl6Il/[E)E0WP3[^qVa=g[mcYHH?N
%jOrC`OaO:DH(DT]J!isDWNGP5hd&CY_eqZNH#4on]deM&IQf^BP1LMJB?B/&qP3+GEVgl(=7]V;qaKU8ZEj<"CU/,Rg.d#J>^fDU
%f!H67aZZgj2dalNc7NYj([%+QhRoFabs#(gesd&>kEJ>PCJIqA/'uP2q.90ZS9)'E4L__$r@k^oj?8oXhK\p?/pheg2OFHNDp7Ts
%gag\kI!BWnG?d6ek"a+'WcP@J([#jX'kleu\i_oqFdB\/]<4EN2d:X_>j4+&:mnM:S?&8AHe;&.l*WB5GLh!q^M#aARpRUM?d>jI
%=YJo;rN.ko0']M/:;q"o5P_s71]RCFbIdT*dECSG(M??hro!AHl28YY=2t16Q`'0@Ds(2fk!-HM\U!Y^CWu[bB9i9GgAVoPB"iS[
%]pipmVJdR$*C%/]['Z.4IC/ibp[40L[K#?NR=&:cjF4W8qIk5jSpZdIWCr:Ykiqb1LT?d(UXQX5dmob(c.tl32D.`GH(4Eo+5Iq)
%h`\RNgh]3T[rt[XafY88k[n8nc-aAEC4#3_JpQKX(T^Y`FlCHiiq>].\N*mH]mFn2E4GpiA`:j.4^WFqf6XdmWI4_gU%kHp/UY,*
%I'QS`.9%(H7F,(@\hCd$9J'<1MhXC([CCLV^0c7o8hWOjMn@QZro2n+qs*2:inDl#GHZ1n(HnU*/Dg6cqo*=<1:>b@?b'EFCgO7t
%Xns&UQAg`_WMQ^u>9B.dq__ktn+`uoFRil;g!XGG\\@^8I<W2CA%c/RWZ:A2/[b#=5=9.p[/DhlS@W^t/6f9b\bu)XdotVMDnT:;
%"<"at?9MLtrp[`S//M[E&!kBV`EI.jp?,JB14EYC,J/9-@NQS+Y<;^39WdZ1br&Qt;YS.q2_VM(/"^V!rKYh)3Hhb"[Hs9A(NNka
%+/]n3cTej%k.X$.p;4=hr'Gno5CU"Bo,bZKq4A^8Qb<ojmn4b[5Ao#ShQO)`gjWMYSD)NYer.*)e_Fg!B(]gh='iR&I+)3jk*c[Y
%?OiXVC2<7eL2PS.YN@WV>(5pRmE'\ArRt"&?WoND2!<KIIQZ$0$D7!^[EA1@jn`6Tr-j'B@=*.QhHWj[ViSPuY4%]qC?l\u#CZRB
%LWdU.qpaldHMdE,P$6,C5>54<fB(NR]/k,!g:pb(9O/W#H'Imn?b]-s?WP>hF"d26)saE"f,IJ)hV?2\?[UQehJDEqmp<d,ZiT6$
%DL=VCFKI)IVk5C6lhPnhRH`guQ`ZHsjl/1BWEd3d9r/1;Wsa9t#LJI1*j'7W:X<)0e3-Sf<+"6n9taT627<;?j?d)G>"WSae"p&]
%]=(Yhp9UCJC2Y/kG."&oAnt`ak*P_*gf[XdN0V_8f)5GL5I!!tooJO9kPCNt>K<,C4BA*oA##;p24d":(QFc"=6GN$Nutb<s6ZSY
%dF96qc.2^3/^qD?kKMauG/8R>EP,`reo);ple5k'HMfbob];4Z0<BP5j30PK4hJ#&bKFJ_X8@(fIf.$dCj2_C7h)s)C&a0@Z)uj:
%`CB7"h(5;+3BY#tT"K;FGP8?\_g/`)Fl\e\T7:kDO.U3jk3nqPRDk)qqeG<^M>PtU"J"pC=ke=/HM_Gu1I%3/nb$^Bo<!LDh^k<_
%bs=9mO7pc)/L.lshob&HRTnscNsAn.bEkk+/Pip)U+FW[:S)46Pb+E#(&"5DcA.Z4?Z4eLI_,OFD>*5fj5S51,O_f)o]kG`rmU^:
%;r:p9h/@*oc!>hS52(M![sdr;&4p9A?E,YB>@5_55MJA:I!g*B5<*rNjk"P!)KjAS^2^ftnN:[S9@(qM(R!+&Q2>kgq<?pf>5-m?
%dQ>FW\*;)jbFA-j-1<Imo]6!E`dQC?AG5=],P*@j4.iK2$EMNJ2KeXoc_e+&mHduVoeLl8]mGlgoVPp<fuHV-grn_W.eiK(/tK%m
%5!7TQ=PPOrA=U[j40LjodlXDHQ+-Rcb:h-<f#F8M5P"8MkHBqNc/%ICb0sX;h>+Fi[rR/Xm!`1f*:A8]?"prJh#6Stge$Q*`LFK1
%m2)&.jkIJVoDS'ioZG=C^";]\ftB',DWBhN><@/AmE_uM4?L=Tq"!jihqh^(Ic&q1qX2hO5'Z9D#gZE7@+f8,4a;:LiMfucB1qL0
%#Bq!Q^DsDTac"((;C6a8rjnmGI`ZCPO&kZ&];)a@oD[t%S3K'74Sb(#:*&K+NcUg,mJ-WbHgUUocMc1JG3@,Blok6m5.PEVC;!5g
%]P5-$o!Q#0a6rL"FS"d0eQOt=hDeA-TBT_LdgKgKfkKR3oujZNJ+<3bm`+Mafr*kqqK[,L_s4dRrp7c&al`0aq/,H[qXrmc`Vf&G
%qu+dkn'7N>HJLR<]"]p`4]O-Fn$W`[DAIH1>cqV_%-Zh/I=(S^nt!*@GM0LZhK`VEq"Wsqn`o\rS(mhX_V<VeO6j?dO0>bEIXJ=Z
%muh#Ak2#1U_6\@KCR__UQ(=1mpZbKEnb[b5p=&ouVsE^\.o-Pp&(uZb]+6!dle<MF+&e*Ec,Zr]c0LFo?_&3bXIY^F:PNN,Il^?=
%]D5F3+2>N^]mdY9[C<6k=+rSWX.NIP^%UW*<PAG1l$]Vj4kdOIi&uF9ETt/`IWFSYpJ,%#Dk3Ji>[J0u:9GOsY>5PO;<n:p.@`9G
%pP%?#Sl`;MDSHlm'pM1mEq+Ut2dRu2J+E5;`\1u6:2fb@?OJg5QZ(S:pG^Fk>@#_PDNE*ZYAWfu[H*nXWk*=sZ;J0B/)N9(-0)nc
%<pA0#c1e("d/b/_?`]I.hNtPZX-G@2gV'NZmUE_OJ!!CYpWY@6YP_qoPuE.d<rL1rS'#p9q3/-Wjcc![=^>3SQ`<,?lA'+_6[;j>
%ZW"![b8:"dmI#;t8R58TkNaL.=.efde`9Bek,\*!g\cB.kKPlIHHL.g:OTlh>WoN>Rk"k*mf2#O[Z.]ASi@*j-?AaG0oHgJ7drfJ
%YHf<iI]LN_ETjpENcWben>%tt3<(@Jg)J#mg#73+5ALf0g297-S:kLCE+'s_i;0)G>GfjD(<hC\H/\!WX4J4,YP3(qRBt=C:n#X5
%\UrhEA]=i_oEnCGULX;[I)eOKlf.ELP\QR4*jqmpY,`N66aJ?R8!n<*>;9FY@G@5bck"#o1k*MRlk9K_&IiiL5m;U8n=Rr*#9a(Q
%an!h0;>@"A8qmC.%u]pLS"$X`/['J)p,=o`6Wo/(lDf8iAUP!a]bM-u@,%BMgl$-MEd=kbbq#-t#C^e05K.7Yi!.162`LET:eg*q
%n5-@XV.Nda6>*i4UZsd5]jdts$sJ)CB[d:[U;ZJReRO%*=tT,-,L_*]r`VQ%9$/t)D'3Q*q8H[)+`g68f.UP]rjml#4`&Y;Bp$0\
%;0]9J_M%J]D%E74$YB*@\V&<hs6S%K:;Qbt.e41p80].M%TRi6<JtG'E>1F(+]9X:%GN->lQgaL92SLeWg[P00)o@j,QV2q2*a0P
%.(%nS*^K#SY,5AJ!``N%foBbmenl4l6-0mm*'L-ME//5RTPHWcJ`PFjP_RTHFVc<cSgZi=blpCk+?FdK1S?CEAZ%crWN$%&,(Q\k
%*1*\((A,XTB$*"FFA$$B4(W(*:fE+k!)C\A=Y1b%QbhIADM+U*;mmtP%Q'q?cm8]L-,i?OB[@e&_:8+1CSheP`(U2$?s]iJ\qW8+
%OYWJH&P\3"Xpkc'?KaT2%BA'(b2KH@TPY<"9[FC'\s'AgY8@H%^k-j;)/C_]aT?k$@`#^E0MR*g^l=%*9I$BSUqqS_KW1eAI][!"
%VJH:[5W&t;Lr*3tasIPXI9Ja0P?)YEQ6.U_LoCLQ/?oD`k_:-dMI"YfBH5n<'Mo=jn"d,gl+Yd9Ug-$6f1ITt,i2dHE^'K[W*(p-
%hQ-u?#9XjFI"@]KZ=lKg"f;=PC<GNaK*eJ96A1b]J3bOgi+iPt=!n".!EC9iTis,c;nsA1JH1>oJUt<s!2h$[jK&G>9KA,`TcF::
%>87-:-\/0&JF+Vf=A)F-CkO8pm3X[G&-*i"5amEqAk@#!W%TEG?HAcPVBf7d-3S"b!!&1e$?27R$!i84!4NkiLbgkq;r*7MO,?a"
%kolGZ!+BVo\UdCj`2gfZWs"0:^]]T5"98E][0+us"=R_5$EOe=Z7O:D/dNIBTj#6Y)II@r?Lh:J?N=OLlBkhP0EMaH,ACE3D9c1p
%LnlJ7Tp+d@/</s<MUW3\<l-!"JJClBE5s*>\JE=&*CLDS9aV4=*2.6PN<W>cAMc[l$=Q[7m$kGJ,q>&u_Dme]$qLs2\gd\FAI)+X
%/N9N3SeP$k`G$Z@b8#%.E37"P/4VB$MD[:U=BO/d_U!l9>,H,U5RQ*p?-$F#,oZ:W_/o_,2(E.X66K25&<q-:?TQQ,J6CM@+@?_@
%i-,=f\tEDqf)g8@,u*DV,^*/:"TX(\FG)n\)%$E,">GT<fb+:4M#bg?W!92`kt4t>&dh@3X%9W'XdBkP;8N8ZM11*]1;VP?OK&Zg
%eM<uH'"V<Q*MZg?#22r[-0&s)#:rsWJ42C#^h&E46AcunUkf2\0YgdEKeU>W)'D/>\?R#S9+,HC*W"2)3?SqSd&%A';S)'7lPqua
%#^Qbk_$E?mR"7_>o)dbX24_Nu7CE8d;:ef."d!__ScGWJ+W(6UZnlM"W,;lk[EomkjKr=_RNjBq',aWuCtZA8/L"K,6K6V:6G_GC
%MZ^pCg_'UaX)qGFY,aCbX`QCH>QFhO9h-[2jn^\G!a2#@oK\A77YlL5=:*nH@@t*_0$Xi5Opo/Ndo#p&&n!JF+T[OH<@M&NL1I7*
%+ToMX$)#JU%,R<hWeDig=eQ53Y[O9+,+EQT2F-K9dY%\8JcHrtCs]3_!')>c=Z9G7>>>:q+.<C!@%<sm;(QF+R@*)g,6XBC#agKt
%R<%kke6E&7]ItV]5l@)!U-io,RZ8mo^juTt!DTIQ68i"pGcEGK:cI>Q<%6oo_Uo"Ljp1rH]dnZ>7-ct/\U])WRR-`l5aB2j-,S#6
%8!jaA'X/e^+S:>H,=I(D#QTf;bA(1cQGj6"'#:ZHFtoBoj4_pUYRlNh^;:4sUuk8MVN@'1"&ugQ`6r%BJBDA"(k*;kkZTIr!(?)j
%8V5oPC%FU.8;3+f>RM@1$C8*HTn<<G_D`4ZA.aM;J5G3W)ZXDZ$&&n+#T\FP(PkuqE<b?ZM`7SOKBWn9RP*hjdfH+sB[>VE^edt+
%C3C3qi(X<h_S0!K:dNr7--$`WK46-83.\NDW"I&_@MP;mq&PK[ftd*M0FS1X=c+Kg#s9b6p)5O`eNuW$H<J$p#!,b88qC\[d]>jI
%cNXZZON3-a'JTok;@Lp^[LrXL/V$8@>m%I<CNfc[TGDUaJ7MX41t_C(BLYM7H-dC_+[rMffVVh[Ek5-iA(/"GcI'.P+`"6bYlVs?
%O<I;[D?1Rj"t1N93Xk(p":4$S8#_Th>(AA0$6^g-$#^'&0O1*;g;s6T4W./KO\pl6^3n"/FKI!T\ekKKBbMmCbS,^\$ni#\3MGcS
%*L.aV4[]Ci$ffH=SL!fYd,S#VJHBGW(-:,_+S/(>beMH?Q4D@GY2Od1kuPYdA5Xd`!M0:g$>P/=21[+p#Dra/$j**l#:;mLTT5C^
%%FJ3q/NUgr&r;???ql6=&60Vc\j;AYJoM,X1'%g'/t2's@c;eDF$#8]Y]`?Q]:EuQ<,Zr6YEb\j:.kLgbA4K%&P!X)=hU:5#L:F8
%mp5:e`m27'\(\<@I&0S>mqU1sO[-NgTH3A-SG\j__=aHp7qc0;"Z0ea?Opf?-@T;UZ`irt/c6DQTes!25Ta%$0T]i]KrUO0e<&N!
%TQ707U%#EXUm($c%@%R?E6I>9U]t;W_7_O2MeQ#FePO+,9][s)T*?$.,QQ=07;Z!)!0p<eJ.>icdiI4',&JH2L.`8L(Q8?PXpo[$
%K;LQYOW'ZL:^3e,o$5<K7QJemDC?p#.;F`++U0aLl3)0ZW@bnG>1,/AaKI=5C3%9:MWii?^hZb_N_m]>D%LG%PoGG\_@hU)!PSnG
%X0RItn/=U-i%mD<8eekf6e>/R#!K'p&>7ph\/tmW*8o%!\Fk`G$I&^t$ItE*#D"6b3Ym!6J<aR6(27Jb1m^Wp&>X"HN(h>;TP39;
%i:dfm<5fEE@c.H%_U<\M=OT"k"tG2i5$B=;(6I1m<mYprI6pjl-5ZadVEjU@dg&JaWhOK?%g`l$`!Wu'2%:!5Yi*#7Tn+A[3_Y<L
%ZN5p:6<d-B*NiDTA<);>RDL)N\I5QSbjr!V35DDrd52KK"Ji4W.ngW+JcVE=BNbK[_)B0^MD/M9b@d$`,K%t[kTM/ja_04f!&]N8
%N6`I-Oq)sl80%u20[(]Lb;?ceWhG-J;T,"!*/J!.7[sXFag@m@Yp4r7>_Aq*Qe#a)&?^[171[D)<C,@^*aks$ghB<bA"8OSA"/(=
%9oL`pP0HZGG9!M2=d;i*9N_o6^eC,L.O$_q&\p,Se^81>+P.\[Y\mRK+M]`o!4iaD?shtsL'qE(=nW"C(""UdMi$GK,1R$Ed?1^(
%eVW5=)&sUZT-dN!i%Tl>oYBYF\4%0"M$fKCnWe',o?%gLHGhq`L2%$a*i&"43&n$k&WL"1!C0Ol!#+EC"4j!86P4Q7og-Z&'Ts0M
%S*;-7^D40eW'1W"_-'9C5n"'6$/HBb$Bgb#@TVIl._60;i5ef@gD"IS5rr6::uZ4L\qh_T9nIuG8E_aWT`d2ol@E#i^14tt_[t64
%kQcaC+I&EN>m?FDJ.+1)kh)"a)NP^JKk%b]ppHpg=K#8A6c=nMJ:X2qQ::mB;\HF2M1D:;$[ThNO_/Y6$3B'\@DIsL(]XsT\/Q.O
%/bZ"3r?_Tm2-1S2Z"4Lq7'n;j+\#^fJ6c@Z0[tf]CI]jFL'e[l<2<"5.F,tf)X9D:68;_8l6Q(J#Z";#%$gr>G$Gh.7lh?Tj*Ze,
%%Bj=M)UL(i;ZQEC,=eZ&+cNMm+mY:a>ZY#LYUD1lN&Wht&>0kk1AE1%W\GjL5[k!OB&Z^CQS]II$NgNE"Ye5N5no24BIM:\\N#C4
%M*dA86o1BMos\C-!>gN"\;pacKd!6UgOq;T/8"uXk8T<rNoI^(Wel='@X2?R<W[nE_YQ,e1N:s;m7i[n`*u,<fFB^aQ;[opC<W%G
%j%Ynj-A>2[U^!7gGVk4#"H7.6*VQX%A0\'4&VNDG3NAANMm,/R.17Q!b;'F1/HRm>!6ataKdP&.5_Z=-+[rU=Go$bhj5d@>rZX%*
%nu*"T7PJS08-uF$:,<$7#*ad\!X\uYSA[aV01gpb8;4s52<W5+&]R's$qN,H$[t62YQ2EEj!133*2Hu$U7euLj)As9#X]9$jE2Gu
%"uHa*IKLM-La!$N80QX$l+k92jrMIok\hhtT[+jbCYY\jdD&$>;$TU0SZEA6gt3[ei';!B^D,p%h2RPDbpF"uD)SeX.5VCNF9#*o
%!Q(j`(>f<!8s\'0S!F+V8]]N/AC?/u]-9QR_`d6K,n=&(-RoTm0GO7hUB:sHk/+5dn8]q-.9N/:>8Uht\a!'AZN]EB(=o631)8nJ
%;f3S56K%hKTg:DM'@j'3H&Le2.)IJ\/]NES_@-P,/Hh0R*5D]r;sZ'Z'68U(j&"ef/CXdg#S3dGKn!-RX1E9KEM!eqFX7B9R"qJW
%d@u7K<A;K;*,(mGrtGcZ6rJ\HYRlQ6%;">[`V9c9MC];HhP$sT=upjcBbrcq4+R6tr)_Z7j1@$^Rtq%O#G;a3ap\sc(^seEJ0eqb
%Et;[tMg=eS-'P\M!^t?EhoET12,j7ZiK*G)f>UdQ76+YVYenbW<(OX2L<,GX&D/hBfFQQLgkR)6M"^FU%$N)E<cX9Rp0BAm!H])H
%%P0=A(3d'+mPeQt!7J8G\3i('eM%EiE3,0\7U]coUZash+I>cmS'ng?Y@6^``]=,RdU]TdPnP\9k1_GV9GQ/E#,^#u6!IL@7%f&>
%*Go=`-am,.6RU,)fM;a\Ah$^Aapnk%%CME;LISPId'^`m@gPJC%(P)U2@h.>kQ-S:20o/30X;QI+EH=0(FT,pYM\:g4CGf59W)0@
%%E4YWd"QaW(hp7n'"H/!"e</i?m4=r7!=bElX2;s)rAY8b_/Kkb":?`m6@t\9ht_uCQq(?9@F$'Z,f.TZ\i,jgdK_H\DjlR6=-pl
%oW?N$:UgsRnEPTsE.j,<Oq=9jXHq!L11UJ$"g6Y8Ypd"H"no9Td4g.2MHi;T(5M!m\V?IfHJ+<.)8YBr'21"<"#;Funh%CdU`5P#
%)?;%.">E,/NjO*LPm,eG8<LP#2-`[)4)_!S2ZC?>cB0bO0atD14[uN`![3rG@uD1sDU:Zs"dT[rk^obKks?7/Q>EKaR+;\E"$>&M
%,XdJ';LZ5/&\t]jl<)j/dR9NFBQb*t3C:-J6VVHb"@t'J0TKm?)GrhZ&WADG0m(%_YWrN!,F[jbiLb;*6p=5I@UU*L!\f>>7>D2g
%[48!Zl&dOJ;Rs8t0\)g_Q6QAJ]9\^==c"Y2J6=oJi^2A7$m5W@_16pbR9P:_#+?)r(AL(RfOm\!7-+EWYe`>+7kUSsZ6_=Hn2PYu
%E%Nmg7H/k&H)LiH-M)q-OjQmLg*AW(OKH$kQND_JEa&ZT>+g)U#K:3T<sfq2!328KCj]W2l;DYRItGtA&LMM?,mZ:-,lrgt),\J>
%66$XZ&R\5!Bjl<$:E:":_YQ%,h?O)^UP9_n*/*3ao2lH59Yr&O#>;&\@P.A<!#>es.'=fBCeu:XluAB/,(M"UZ"tT->d38j\h'+4
%eHGr:9TWWr!T7/cW6\HeZE]](XAPQ83i*>4CI_E9q+R"bi<gD7!f!Z`!C5OG\"p""0O#Vb[OFHW.q;.<atsC>`>YluATko&q9B*U
%.]a)Z"K<kN((/Eb1!-kR$saJVRUk'VE9e*D?o+gYJ"-<uP`Htf2>R6KQmQb]p4`#sBpEDFQ7gZB)IQO!G@f-G%,,f3!"nur(e;2H
%ZfD[[8u:"n)dWaR]ZK1;Q?39M=rR4(#0&32/HQ1d2?Dk/&i%J:+IPV,Qm<6TQkcEOQ"M6!GV`WGnBZtt$^3aHW7VQs/E+ur5=fGa
%IV?cB`FQ;+FUO*3Ah]M_4+E'$Eg!7:K.G(c&&CtL>HGJoG-BQa7@RRo!(@grbYc1RA4P@&i,%`7qB2L7k<]XCi.D3M:$"'eFK'tF
%&4<ad$NM^$I28l[LeN)Pp.\7_PG3j/1*&`&^CZ)Gb%`G3#Xt-q/=K2&[2?3mU=KV0\fEemAZckYlP0Gh+cQb*>G`]cMQqVoU''15
%_:3/^g6?tqR_mH2!tUYr#6G%F0Y.5a9up*DI7VqUaO/MZc[nK@"Ak\[M$?)GV':+l/OKk/HK9_dM5aD\*We;G1Lm%lBgV;,Pi7P*
%$.fb7W*<\\jHBQjQjM/VL"T2'<ksni/UH&3$KthVA"?:KO=*+&WdrpiO^(feQGal*U!O<=d8ZJ=i6ZT\*QoR0@Q4q+Ugc@p@o++$
%'.ArbF<Ygb`Ld:W#"j&XZQGfu1,0LN1[)V,_S%u>>*+79AI'\B0X$.,idhcM,-F@1"dXs0+H2V:U6TR<e_7GFF<gk=OVj(."`rVH
%FA8bh-p@q5(*ng=s"E?Ip2=1J1bT14BVg8c;[L>]BGZ@/7crZVh8*%j'Si>'9gH8m0LUJVe,gIV8R0LGRL&u,0<?I.R&L:A68jH6
%*2[TVI0i/ij^HMdA0EsDhFuP6->HD.0B""G'":(>[O;cCTcI5K9^N(++!9c)*LkJYJFK*0J9\qY&Pu48B&drj[O,2bY'EgQ,SGj2
%\sOrq>&dAq).q6\!3gti)ilNq#:u>.SCQM"P*#UI5jGD+I9eR88T8)hMM@7M!>Yjq'#tKt,$G1'%%%%aP84@n)kP:])@A;mL&!KA
%&Df5ulO3ZQ+JtiJ"RC.H%V?3gb[L9`%RZP+V$bu7AQ\+rKn5[6a\=lI8N'=pPGKR5+Hd.3Uhe>P8h*JsQR,n&Jo59H(lpbUkX:p2
%+V"-9K-fnHgbI300@"@t.W`9DJIBWV9]4JT?O/L6A["FQYr,-klf>plJ'ikaW0Zl"e&VlRKh<0dmXshg^9ek^l?,d%E%r;/Qj<c/
%A?uAOOWY@M"r\DSPlSV3ij+ug0NB0ob>q//Krbpg@+pbS7hh*g(9M](lL0XC`ACsKn[&9"o;H@>)/,<tH%n9n"r%Bb81'9W+2b$N
%j'rq=UYq8U>p[>)-`'Xs)bEZlOM#H=C!,FeoJT`;#.8H-%D$0."[7^djdXF<[]WB=(^ek=0's%A<+d@.(O+/=AE;nt#bN5K.RZDY
%CLVskF,@1Wr-qOU\D`KE`I_F8e[I4?T?[`E*J<MX_.5.EV517[8Rnti-acZQVO_GRQ![>)k5,.iaUYg7,f$:Z$WZOci9n#*aAQRj
%'*V)B^iL"eTo.\gH!:a+)AT^Z.6"pLPXGZ4\YGNkbP"gJnH]ou+G#&e9bBO\V0l'6au>%\Cmj9W%gCuYG]jRn*'-DYi's6U<^f(L
%%#!5e]N4:NOk3Q"-:e.?QIZZFs*,!2ipaH;?8C%M*6s/X3I'\Ebh9rD6T`]7CN13h=(Ha"6]75_6]2"".1\#iVOr5E)4SY/qkXp(
%[,7e"=>qir,X=t\/Z5X(%FqT!0V:ZO6%\u$)@m&TJUraW(0ArBHX%&-nCA3Q:R>V`"Z(!9EDDS29"<kY'd[*f675]5&WIXOoMoE:
%i[!=K@]?af7A5i%q;>uac+r+Yp)(%Z8C\:_70*[^6K]9'`Q5+]6@m6PfB!kP\B-*>1FB)OHmK9TER4dOjLp*qhX8H$<"qj#@(rJJ
%%f+tIU0*/mK)'Mo+3`:>(Y]6IDW5mT]I$(2*5uO0*P.no7`#`#IHElVEaeee)(gkC4*@Rj&-.NJdf7[rFo^1uK[0'I<)Bp(bttAV
%MG<Dq#rH%:dpq)Y\7Pu?.U(=3-;Nm4;u"uZge`-_3VXU>*cu5V12.2'EIN+thug7k4.#4UWLXFu4M%:kMT+-Oh$KW[nEgc;l'glK
%`&?!F`DdsY[FeVnRVE1lB=epH]407O.V8dn%Z=8"(urEI#ga[V8nM\^g1[KZCP1eQ*qUB(UohP<ZO@mV7;a*b:J?a!?S]`c5B&\L
%5p:hL*%j';l5VLVM*Whqi2R^;5fZ3&7=-C3OuO:M5R1!OBVnE'4MtdW$nud5_CUQ[>^aTrZr4h&#,]qF_M#J`[-ig&YnA!3_&`7I
%Z)p)+%0I=s1?1E_IteHH)gFQ/CH*$]L"0-o:;XSO7?$atHl/6IMc!q&-\XSe]j;K[L(BV15[?2TZuLZn0G%XnI?iJd^CBm=@NG4,
%/D!L9j)JJHmhh/5YAc0B#MPPANR(7KJP]c/5b]c;KF&%]('0;E.3Q,NjuOCaenp`q3e:.#A:+f4\h<#D9r%2>>5jn%LtSQ'b>q?B
%\U):j1sIf/Wjue5+\*Jf)-qWg^dMamq;O:qOiuhiXJeJa@@WFTK>o.a2Ynn`9+AEs<WjRti;L3Z*?!4(fMVe`1A9(;&j?$"#W7Y<
%qQ?cpkU(r8./1!26TYj8(k_&d$Z'4*3rVM[=V`p<+p@2$ZqQH(<+%\k$ul^>LIl7)&l`,iL=$F'8TFJ=Q)"E.,8R`(+c=G5A/lO%
%l"tfoPip".=4o"%d1juI@1csG0cSA8<mO1YMV1<'o*Hf`BIXo:6]T,R2=:e*2?>DK@:k^_B*0@]'X>e)KVl^<g5b*74CQ<C>D0.r
%Rp7@<0mp29_jFQR[VUO4Y,S^8i,0+o0&bZZ$gu^L"+m^aZAH/'RUKH,\&7Fo`8^5m-aY=FL,R<()+,T3*(LNi"9HKW+Y&92[`KZ#
%c1-dSo.#^#>`<bG0H_bQSUc5_2GmOs)&ZWsq'`bB_*n@^JC-(u:TGD3FrTZ_G:+rU^ZGM>&B)N:%"s.[<lM@;2UNM2009JZ2@Nk]
%/n@%;CpYPW[Lu!5(rUtO'?eZ_"_k/BX;KU1:)#oi2#d3&6MjY,rI_h[AhqJb/uKZ(#[e5\+@Kc@_r@J/o&MeEUZNIJV;]E"5YTp@
%!_K^QaUJcr<9^%cP-3$u_.O*PN*)Hbi&JqY`O&=mLiu^oJe:'XZahptd8^BYoM6=eIOaKS'>l#Ua9&gN9U5"K=us6>[%Do*[O<ZC
%&Yi`o..6)0Q5G:3-_-8``D&6/"O8rXRj\Jjq\l.p6N'206\/.o5RTM/"csj]Aoe7C+,$RNgQ-LeQZ%JLDeHQgW6d.6*LFa&=XNt!
%PS22@$*5"MKL]#M9d-<;9kA2DDXr<P91B1h2JeT'+I,=RcZ'5"PQ!t+b<7_HD,Lqld;]6q/Jad%q2RMb?D)42[[%b+iPVm-KkYA#
%AijH=TICb9C`AcKLS5Z1#C[k1r;Fi-G,I]KdM.Hm'Dtm22#nQe,`0JoUae"OV/d#M.""Q)`?/Lo__S0K0Lo&-e=%`9!b`^N*D$g-
%cu6813?MEa1'1W-<AF0:Zl^VXiVj6O1o+<4)Y,*bB_Mo],Dn]b)$hDK#9fOg?90i%R4AQj("o@A>)@bZRu_8k+Z(o-VN9t*]#@-H
%fK:MmK0d;8"LL&#3sPu%6)[XG4E<MhiQ*d"Ej(>G-Sp?PJVL-<#YR+6jQKeFrmb$QROt0m`g)o<7G=*GaAUO8<'Xra/K&.OTp0(Y
%ecM>bi`NSo'+10D%.bs:'.,q'*?g:l2Sqb33=9Or;/BjnlDi!]A`.;9i@>7N$LD+uM?-eb3<;r1$'8oVC^fCr1I$cC&D]6A&PXQD
%&0`V@!FeBg:K]g_%7FHMd$(b&15:l9>_`d<1sp-7,\`J4]1':F/NQDse%#A%g/:Y!);ga<#>(VgA'lVV7SO.i^^^j8SY9?6a/Pc:
%-aT8[*$QF-#?fEBc03u(FA)8HPR9TNV6MQUgY`c!ehj]%^YaA&o_'aC#f8nSP=/?jRM<R=)rnH4jQL^F$*Pm]#^fQ_s,#<gbKsGk
%_2>4H`KVfoJNTu375QNWB.;>`jsEq3@`;e3a?e8edl/#$3MH]udqhhrRA5<7.C8[O_[&op.AR:qC#._qJ:YJPK39&+`@NkU*I3uc
%=IUGGe.6Go(^'u[3A`6@H"8p.2;%!;_LrZ?ehiq9gk3nh;3:3Sj!?"&%"Z8a`CLJJd'd%;SW<^@2mu_)3Z@#t0[TFp%q2JCgVKD/
%Y[T5^D397?Yk3Fo[?s-Xd4t[@U7W>aju+P](b?M3csX*Z"4SMPL+M7<-djiY?EX;ns8BDRIo3qAD<`[m!/.Q#hRWaj&m5D1O39m!
%;<ek0#5agb'-Y]L\d9KN0nfWbdq,tB_fEN]HuN((.C]IP@8BPX+pB8(77J:SiXk*g#fsWN*bmeEOJD&W#eblD_2?C!OMjUB*PB:l
%7PG9.MT*JrTuVlM4&\Rq<ZCXl/3N&-A"jef[tG,\:Nit4"k@a`Vl?DfUbhEJe:!^Y`9*$H0mf]/JL5Xc/u"QhMhiR0^"<=u"c>G\
%$A5:CCP[:oWj408>rQ'CG6'@'%HFs.-2uO\<l^>n\Dkt]A>aDF6@0s_nb,Mlq&V03CTtbs'o;F,Dg3,Y-rlUSh],:,/(#j`&2X6g
%@)WZr?`ndVS*dC'L0]($]$o\Ue_b9Qd0\na`BRXt]-nB]UA1XE4$?9rP2K_V;NiPNLTD4O2;XTJhdPJ$h#B-/VW!rXM'f";FM=mq
%/0WWQ%?(%$R.Q)e#6?RH_o-&,Gi#UHT6)hjO9"20_9\r#Y>jIX#CJZ8):f^I]N*#6DOtaMHFi3/B2^a2"uHe-1dW`7j)@P%?q&+J
%i>42pGXYk"K:S+g.V.(;Yh6/^%!LZQfNqQ#Zum2@BKUGYd*A7@E?*b[:f%L.ME,;">E6[5GLnoS.Y$n-.53:(i?A=/QfXCA:@OPc
%2rQe[blb05P.sEg\=2#^Bp10?oHV[(G3PP9\6164Nj5o@F+]8\>rU\7(C-o.7i@G+9_N/63&h*6K;$_h*;O%WeL''bns'hG7ti*n
%j?Y0ae!^5`-X#^0C7>,Pr+B'DA,RlUoo>Lm-01PI0H:F%i:GXgKe*Gr)0\p6`>DLE_B51gFZSh_55^;-^Fig8=-2nV`>+O,MT;]c
%N*,2R1i0jpDh!K-g0O>`(b4r#;"g=ZSo05\/G<Hj&sqD5_qZbtn(iQd9Ct`r<%bMT*1MY.*BXJFACdDhK!C%,W"f,L8R7LeNg:m.
%HdI@3YDb"mQ*3?ZoTkN\d)gsY9EI&Q%d8uo?'cLd%+I;AJ\/)[X8k3lk,>`4@^"13<-foq.LZFq$LNPIpfNH,WG*+MOJ.ME<HJFa
%/=&Q`i+msaqZ2BNW5Ji0NfEp3R$Rg@'rJUAZm_;e_q6Hq3_dGZr!M>k(dbRN"h0'F8Shm+)[;o`HEH3(Mb'/,[nT9WO?\dr=QgMn
%%^L'F"FU`GD2SMNYoHCMfal'.Ahlr[A%7l%LUa?R=d93):QenYGQMcLfbekPHQXLGpA`IqS*X6t-/"SknG^8D%q+>fc*6+doP#&%
%A"V2#RM5f%IHfHiNo"P`*d#hEA4/Oj`ZX)jWd7\,FOG!YK%$od2XjR<H$O\]b&?58?1S;&\1)X=l#g:6r(_:2^1VdTfRPD@oJg,@
%GPsq=M$7?HqtDaD#jW\]j(2?kI(_JN"Oe)h(_4KnHM`^IrU2e"If.!2H_u8j)u@R*#9C:=;cICUn=VguW56/!$s&"]HdBMf3M>6!
%j4@%$*UiNh[Phf^Eojf'f0O?hFlF,^rVbqN1'P46X,kSVoGmd[I<>o"jETh&ZhQ"#@[5Xg12,M'n'2Wemc`,Nd5miu^LV0lb6eg^
%"=eO=;@;[miru>KJlZD%Cd<`8PU;P$o]8V9Nch+d/jUt9]geOrpJBh6r89lRPg1\X3gP,``tLaUasI,QGLbn'bBrX_k$Gdf,q)]!
%c:k9b9MZ#V;TPBSDiHe/lbrSOZ6kuA+t`-7RaB;QISAV$[b>3hQ`.3*@<bcUEPWAsn$@jImWb/\#Vib)b*E)8G]M2f:ie!Y^I`<3
%)WS+Zc<XS%)R?pG>=n#44a:m8pnPOiNFR32S;c-&aU3`Z[u@Q7G+iUn+XR<"3I@*ZYpUC%CO'^O^nV/l[I*a$^K)jQKpTL<]ZNfH
%./[W_I?"V]WNUsJkK?Y+Ua..j\%?KT"aH2;0;Gq_*<mM#TRoR;botSP\8'f^L1]7^q?m=\*;qX,$,CUlqc._LpoZ5_()X18+51cs
%)<Rn`Zp`SZNWkaSWM4Jr3Rok>90cd-Ep"d7I6*kY04H;4`G[QR9-DlLW4H5mqP&dU*+kQ3e)RUsS"-c:IVtXS]c+?2A,G5KBDt9n
%42!rKEqO.r[o.Lm[_bc_+R1+^g3Ba4;i@Ijq'&jHeLo5Bao#Ilm>Da$MWo4`h8BT_*["dKi0SC&A5g:^:d\8HK%GsNZ07K)%L*M\
%@V_!L&9kUaV.d!:I4dV:K&V'/>2*6+Od9H3-b3THE@,+*?=R;3VC,0b[Mo"@Sqh)oD4,6Z.jlW!!$buo`E71UWU!-LDmfT'_b-.B
%ODH/>(;lS2SIZTi.V).16j\FM,8,6Up;!bLoJ@<A80&OhBtGj-)a'FdnbO1YaR"I"\6]5p5#$P+[@9qp0!%m,`11$+DJR9d#=U.-
%+D,'I>97#f-em'bNn:>bqpB01@E7]pfH^YB220#m$`Xoi"<s>/Hn5='A'Xa4&26mG3Ufn'2o\/5\eWr%Q)N@FHK:>L?`ErVf]VF*
%U.m+Oqq:.F&YLdflmTlXEEI5Y:s>@PG^@Y*C0tOt1HdBcZ6.]bTO]'dWADQ%OF,/j=I7PC#c^R*1fC:1g)dH40,rf4j4[+HgiV5=
%Sofr(@07RWLRPNiDj->G`5BL0TK]GH(tIC#>!2k#7=T5#P/oN$6$t[RZPr%^nN^Q^`''ZN=:K27^N&r!Ih`6u8d4#2ahj$"eG3;2
%+$HR4Y;7+NQHE*oClr$3TWhs"Gj/Y]Y=hrT_N.ftCF`jMeO7fcY2lg;YMIcTa3+P;0>a\__a\c*:O,IMReC8M6GRUGYedlZQ^k9/
%A.e2VY;r9nG[,6j\J[hU,qTXKm^Bo29345=.US1.%!,s<@F+IiYP=%gmNjb]p>XiZLF^COnYD/r.f8Ea5m=@o%%-,U=34X(=-X2*
%N`P1M[^:CP>Q3D9O"Sm$^':#R>n]feI2U$XI]???f8_Z)$b>f"A%MSiCktbp4<M9X#<+Nh`f.l5mRWh!)JqZl8/)c7MD:*gmTQ1o
%jRKFe'p#717b[UZ0ooAZXNTZB0p,_VLMUSIS!d_L*bE"8f^B]@5@(JlcLY]9W3\gS/6D:!!G__1qhr_\/q]4Z.4eMM"X_&W_iOjn
%]c+1'0*B3CiuZW,<+1\E]')0FJoh-4Gp[l<!>Y)@EXcO[#pbNCXCP-=RjIQ^:;6%_+bW3k<brN(>i.uYMYP5qr[opJK;hUE6amq*
%i"WDf31rT!q58d44uFgh"T&bQNlXad@H20ipH'[M0+;mGnNB'j9]cSCbY&XLfgTu6L9E<JHdR)ZaGL?(Kn*PCTg`"?K##CT&Zes@
%\LiuaWA:$GaM,NPPAG(n#E;cO(Y!"4<`@;Jg+GYpafUdiQua%mXA7gEeP=%tlJSAAlhVe`YV_5ig=O<td0`E_h3Dhr&5:8edC#Vd
%_:5=Z+2A-hM&&ptm6lGq@>&!cSdmH#7EB-DBBDb,jT3Q5R0>)E5tT,=^AK@R,Vis\k3<5g[5?uf2r[B2Q8`gu6Pti1AM_u:e3ouI
%>Hp2$Gg)1,cIN/I;MFSmeL*;cO0ZsXfY&<`hm8SQ#$Db3hDI>HRD3o<N:Wj)IU/6XrtrtT(GXq]@MKVuJiJ_'LVu(A0F9b,";"kc
%if>@*>tCpa*\od-KF?pjJ-go2@UX`JM]4#96dSUDP?<'tcTa]=4P#C%7!'th*:d"nQ^@G"o'>2K-SWKD0Y4kXF<,KEYA-\\XuXN/
%cj:R)Mc=HFiCI)e^^&8pkP4K[S?#qk5b.RF$GZcl&>LkPI0DHL!*=:HA[\`W#L_-S]2i&g_s&Mr<L3],@d*qnApSH1\GUej[.MeG
%l^tXoMbgMJq_$]Xa6I#-@f(VPN8N]&q'"r[`rK^/9p-7)(3Z1XTS=#.Gcp3H7%)`b$]pEb4rPD2q$ongU#p;6\l\lc:qjMSTZBEo
%aie69"h?2_*jAt.69<*!8W!MEKnY7O,J4m:eC?,c@S5_ffEc5SbfUWI%EFrPNha9f^>&Hi\p(#d4SZ+7\b3W._#U31<c)(W@S,s`
%90<c(?a2J7jeQZ6H233#If3$@>#-a=5C#(K7F_"FXT+\2lO?5NfDkM.%)Mt]&H!!S0<dsrl3Bs#2;>_.6&a]+HiKD<l>u1gR??dU
%k*$4<g>SXb`-3C)4Og%C`U4#o/a.*VlP,Ziq%gZPnp?\&s8HC*KEgkhCA>^"P)m_62?DD!4Y!fKQtKe)=d`#E5?2iR\IR2_NKu+N
%/taX0<)qCsEY,:p=m:\(@TBJS([52\A_Sf+DJZ4bjKP"#FE?k.m!o#s)u][TN%T#%LH!cZf)c/X"Yp2.6B;#-SZ6(dUW92L5G7%X
%KPF/c0*<Ip[;hY%@oP7s3EgJa8Hc9g.=6O849&r,qhGr>b.O.(SDX3a+DbF^c`4kt@P3p,?[L/$`9u"6!Mt!,ln_l/MY-s_DP_"i
%>ambF?3QNBV4c/k*`:6LMI*Ms*gfnH-PmcoKO0#W*W+dTF11`3-7]2!!_o0bg?\-<n34+jCa&.0b;Mgf*$'sqg7Fan]\]l:&1M;^
%`N]06#U7]m3h*CF:6;DQH4p"!N+<ebkqY>*1s_kS5?Wf\D/>@/HMpUlr3b?f0)YaCPDjgE>&;#\J*l!J<Db/&@Ac#P1O)YHG.?@Y
%g&C!;qq>&JVo:NgN-;<ZBnB[ZpIqj(^AFJiXR$"l7f2pYqN#Hb:^MfC%'*/f-.B!)@3[j45=4>PPT,Y:$[)KSOu"7gbu[A:'l]KY
%LJ+m@-Mjd*e_)"tL1GeG:su=;XV:IAJjL]/+K$*E8Bqrq,-[J*,u>=n%&28_Kgp4W6IO%5?=p]`HF7K9chhYZnup]^?]EU.Vpg'0
%gO6IJ_b,X:FkX8U\(TJ7-d_;D@+_o+m,'k\)oSBJm1!OmqKHPeeP2rj">8HjMrrhNVZ0SIr<EqgIt!-cCT6puIp2-m%eHS(54%n4
%eJB5:3f=LC/X>uFDnIfKBk(R(ZY4skl/hmlm(`.>(*,?"l\NDFlY9/bf$X=.cIY,gm@=d^m-("PnrY5&AG^NfQiG@on+`l)2mt,+
%!O;91kQ/b.SOkQ:dZHE5SnNXFR'2"GNRM6pO_`r>P&3bk;[Pj`$.@5!7S$N3R2dtc"q`&"@3))Ic@fZ[*GHnE+O2;;iSENSfmmr!
%BAqLt+AQBL%DbFd9SK&6D!=j8"cd1TbGladWK0H<C.%KSHd'"/\@7@m"HRe:V']9<HAl2K\h/.@OK@@G,:/iBq)BGifht1NU]iM$
%I*%tc\Xms:7]@K#8(B[K;OQ`e5aCuldRr,CLK("PoVUSG&p<LCT#>c$YaLR%GFLY;pu'>LM;N;5.(O%h3?cOq::.5?,GrN9)PoW`
%Hek"]V3u;fbn/DO68'[4D&0N!';=72@i1!ng!X"d4i!1j&*C$TNIkgb%_qF2]AF-7k"Gp,'']#[/hPNAYE\]LWujNEFSJPMpU]_j
%E[^F#mINn!lSC'8_A'10%+;XeNdJK#eO<pn57Krli3OADL>eIko'K'f/0`*_Ce$`PqN9QVAa>?m>Gul'a0RPW3tXW)PgI5ohtlts
%kjNR`+(%pCDf<e'qKl4SY1BLH)MiUJ4O<pt0/Ziq?Ai.UoYZGYjL[MI&MZ+i[Ie8?V"shl:3kOGL9=5nLZmN?\]eYeU$04\&3Pnp
%T9!rFV?N(2DtMcnYN"`]2B>SV0B$(Ji<^sRX83sp:G[PhHhp`%/j;]hk^GfP,^hl)qb'u\h(!W_Q1,6rI(8Gb^00;8Y^Q8U=aA04
%:JtGJ/P\,jJlJd!I@dKmI?R)aJuqP\"s3]K]kl4]8Lf)t(TJ0U'A!a/(JBQboWSod@TOsJ$PP:H-E)><D.[[7RRo3GU8.U;]YYDq
%n\iZ_RN47InbK\iS3F[S\pp1!A+n8B)\I0-6c;!#0?68$8q8f_X6Q6N5CV6]nrE+F;gB@VN--44Os1hC5%9C_9ghMn=/?e62S.F-
%S8#o5gORP=o0`S(NS3@A+kun9mU9f[%[9;^oOgfY6R-<"^C8L(G$ZO1].S.qV)p_\>-J*bghH+rn<Emim\GJT2H)!QF6JjYp-&A?
%(D^kP7h@2%+`4]#P!?pU%St5nVq$jcl9Ko9_h"!mJ8gT#9b8T]WPT_1FePfGC7sDBP2*q^TE`B`Ur7ddRDuMR]NWfqr@CJr&ui1b
%:?#1.RXVQ6*@TNN>&+9Sj!rq8Wp)Jf0(61s'V=?lDo'-+<H6q&p3uED4clI6G@Dho=F-Ds,26^_'_UjK+UCIL-mqS6`?,_l;FE"V
%ftV8M[+$uU>dg&#D=uJ)];24j=lF9gju3PFJ,cI(!]3?3?uC-gAYS6Np"WFX4B%JT`1&E<G>%"_+Gf1U3lMWTKk!!t>=XNPojrOf
%MsQO2,/LA?hV.+t<9B_BWpqpNB_&30Rr-14$kn(XO#N'=L.WttOk*]#UL_PXGaT_Cb4XB%<?k[1VNi>c/Yp!*kBtbD0hOL],mkA@
%^qmmB90SkS;2'W9!6_pSS&_h'&/>qXEpbJ`[R9SaR#e2("SZU]h@5q:7Xk.d&)J3^ZsDV#%]_C7%duOcf2'WBH3c5u0U*d(,Q'#K
%iH@tJ1%798:k0(HKTu;&fSVK(((iWQs"4fSr9s[_2n$!kqSBiRm_]qdgl3TtF;`Jfj%)lO;.mZsnoEg(G6MGA(\Q8ffp/Qh&IL+g
%lghS=_\9*?\t>$T'(&dTd%J]=gk.k2[.d0RJrkij8E!l88\2.fi6osRie_CBRnTT\=tK?gab=Jg=&digpD/WA,atLbk,/Y+I5$VN
%@=O`VbNP-\%45*=]Md<"Xo9&Qd[#M^e/c7eR,!s1];8\!irnTOTC0\1@k>Z&&_]gmM2E2is8$PG(E?F)>k1U>JJp<IgM;TF^mkus
%N'r=e%Xs1J$rMWD)NlF"`0#[T;&AmZ7hd>2GF9Fa5m6*)ldj`a>;3O#DNtbj>TAU]6HAe?RHOYjlH<^K5%e3dlA\^A(,.IX.COqg
%ap#HaJPaON$_aoWntq;if.Kp?Ss,0IUYYR?233P!b'28beP`>\T2\J-daTgG.9rt3Fb:.WFM;qQkq>GZ_MN@0N]Ni8kZ^`6>#PlE
%ot&'t4urA'\ga>=GR48Xe"3<UHbM>_8JBu,]ugJj2f)Qs'Hi8g_m?*eAZm6t5`CE*&EOl*%dc8Kf#sYI#3JX!DT5a,!CRm$g&f!N
%AUUQ>brE1mIGYsg4HM_)[h(uUY#$.42kel*a(Z\WI:BY@VA5`NEf!_*4HK3J8b)<la:(t.9]]e@fa_/E%Q*U:Z>%`a7$UHb@)^Or
%2HKqMCRlnaD[*&]hIS-K+E]2r/,8nkXjcV-bYMR1qMD1$J8`*Cmsq)18DuQ3?`14?oj_lbe)T'1I)u4kjgiEo_k\'p,PAh^:2?]o
%epJil(-S<3I:s[MU?(8"kDR-N7WY@>S][H>-l!/[DCR$/Fra0S(i!9"Y&TMhE`dlF7uJuJTAj\]K@>gMd[Ip^%[H,=6o8W6o\Z71
%n_/Ykm;FM@I:Nq6I]LV@Srrkh(V.s$pa7cB.bpAKHs%::$boAXT+[)k+:9usP8P+"m2$.P2HdCS%.V98WoRQI<)2ioMC#X^5Z'g9
%((4l!;';P<S6OFhAGiF6T6DILIG+XTG!OO&gJC+*0dn4ASBe0OOSHRMk.:L;.La4GHX+(RH;#ZVI'8?us.\WFC-HIS,i6hfcTa00
%23%&O?Y-f]B0)$hkh^RknnF8.l0f^VoI,J"8fQ#4B?T*PXq\;A+k>W[>Oq"k<I89<$<.KF#Gle4[lFDZf1/qkZeV1f?Jar,2f[Mh
%6#1tE9+R^6:diuJ45l5s7<e7bK<!&B+%K9h_YY^/g5M1l7.pE>+ZR.DQ"B3Y`U+WPeSj%Q\"3Hsp4\slWZ,X$P/Qg2+YhWW'32')
%^\ObaD%'@G7J&8%lL?+"USegj=/KFLh"KP7n!_a1%#6R>.Q&e2n$^=k5BPm5O]hh=bEL@<>o):6f&PhrA(#h7[F-,&]tM)5d0!Sp
%X4gi8+V+1Gj4i^_G7++>S)hn)37#73Z#;.*"Z.ql1#'io!kPB6L?;hbDPE4A5k7;P^&uc]Al!P''bQrX.Z^;XA*e)&ji^4+d@0*-
%EuZsAZ\[+3HTUo\('!*frl8kP!#1[Tb3D+KC,e.@d^][d'AW@&?.p$hUgA[hR4.Y"?rRpSb1pnn'c!aR]BGVV8ZGE)a-Gs?j^Bjc
%$s[II]rsAg#D7##romuL%iqk1_XIeC47(+VX^5jl:+DZ3U*?<LNaW[Y2jZ9El/qRJ)fS-<+BtYl"1DTUoa0K'J;^MG#IrLGAYZYs
%H$6M4+q52a^JX<@HR/QZ9rU@caPZ84!i\cP(egYZROM%!C0*4Qk<SgfH)AGg)-%uQ9:,s#N_ueKX!aD6gLUth?H6Z^JgXl$GH5AI
%..#.*Kupu8VobLqjbAp4G&&^;E`f\>b5Ze%k*7[ro<FgT^+hu4)s%'<^\iHRdS*3j?[cbhiP#HW_4kUcc>aa9,XhuWWB(H@]g338
%,e$11B=I([#4kFC/KlnuJ%R\7C?GFC?ZP,.0,s?d'3h2$=OQ.j3=S!#ORB3&BY$8/[;D?]<41PP]JrWkkEcIMS?b$\0VYR:4TnM&
%7@.[-)K;K^`k@te<78>TP,8FLlX*ljrZd*jQ^DqM_Fk!_k36e)lGb)4c0!#P9dpTeZhM'4Ql@V[a2s"T2'!]mg><Cda%%Qb^<GQa
%<M]np5c2rhi#u+E7Et!@8sY]=QR+e])s`fCoZ]ID+<%,So```Bl>^aKPs@KZJ1lHLg3j&LSD"G1ER+n2=c*n"QX`</_LZ)E6EH't
%_pf/=Lo@eYHcjUV:LdVi8TM!ARLuNO6/^t8;IR4[g\&#&%-5hqml4$ReLpNrX#EZLGk;[b`&eY]AC=OPS\)J0&rh2!O=Dn=<=rkh
%ZWQk5C-s"_)%8k$Q4J[u-$<in1A.mber80k+s]H0d]qncPTO=6N!^=AeWenk,W2h>/!NH_r*pM$I26%b02'N@4_?frkZ+Qpm,p_*
%]h+IWcPRsc,>09^ZmnMk%ub:o0=s+77\tT+DR)WHk?Xi%F<<K4XdJl8<Fei6-8C4oCd't>g5@(7.!hG_EER(pLL3Z^\>a23EU7F]
%h9?ggF/SRm)4)bG_3Zt6/=AY-j1I%=iZ*BVB&pn,dW$1F:%3rn[H`cq7<>;K7)X]@pf%*!5_RF#\tYsfeF,Go'j[W@g&Q?+l7pO)
%U,`9VJ[F!qjD1\9e;?Wu?_#qDQ$;r&F>G\"nN4>t(=I^M&biUDH4S$-;0u&5p(k.JrRb[`GYEIk`6lY"PmRO'9JM'=</[!jd7(%k
%0@c5`B4KlTRS5/?L7r.K9!>[6C99[Jo3M@,jJ:K0R?rFBW&dZs6R<cPOK(^EB[;6uA4HfI&s6E7#KFJ>s.lZY*'T?"SV73IbG&-C
%2;3>7&EOe&'TR&,J&mE[1+^!RQSK(W_iE"DL@-Lh2k/QFG#:isM=&]d;b^?c/pXocbZk#9Qtj!nSV#F*P^\7-N!PRRqPXY#@o<de
%-@1pcoila=X#EZL.f_?J1M;QqESLO30e;*YM$1qaLpp9mEICs4D;VZp:bF7FYd[og>bR\E(&2Ok+B?>4X!?D"9LFWaNLaM&lkm5=
%n4!09<FXm>*`_dAGUi4V-Q3On?)_eN#_\>0]'&/rdh!6-[IGu*m6k$P&Ybjm_G5/*^7%q._cqMK5-+"/?N1AboLSZN(fc$\\iHYi
%.YJ%q]\&#R/Qs(P.%uWrngX^SlA[MdU``,9!X[#3&Y3pOEo?/HK9rMt6?lsB9$i%AW=Q5:hIXS9o8T+9jY(#fkju:aCW.'J<;"#8
%<1AXc0G;Xp`]pSqM[oHmh1q%nag5n[@VeB\fq0SE/URn6<b(qe;bo)5I9L.VB6>Fe>3`g6HjO'6#s9&ZpGB5OO4j`u#r!fD1imB/
%P9&(4U=7M"%GU9d\aDPN-<ejuD&S8VcZV9*%VSd[5GZ;s,I5G'MRi7&Er(Hdf(nZX#,=aKOR0s,D<4fp7/SdSiM^[LjNZ>*r/N_1
%LDerr+6h1c<8E(CWOnFMf,oDMa0DKQeY`VK%QG)NlG+tJ6$FNqF1NaY(d#CWSa/9&6f[*ZZT_R#$i$G#[*jAEXp+[-O7o(>O58Fh
%9pcr\(7kG:LrDdYjqS&bNc41DCu-C#YJ`iM-IiM$:7Z;s3-;V#H)qh0qep[sCi.0kk[iIEE>a\KDWc2P9XST5@\[$<?'I*!!3MLL
%RMs=o)O!+4pH.M-N;aJZ$eD;M%V/WV&,^/e=E`4HPT_41Mo8RJh>J%SlXS%:m:3Fg$03?A,ss]H&dFO2['S0!Cf.@oOT"H?>o`Bb
%OkKh59L.g0[*=pg'1De4FmjQs&"hjbd#[ha-G.:H'u4lP?oB?(el?tL-T2oS8.bb(;:)>?WWFs+,>gWk"1^nFK&SfD.f*DDMJhWZ
%:9e)`)^>RT0TUAe&!J$"K;2?qZ6ekb6h0ULk\ic]<0>C+GF;S*6N;oSa9^p=/(@/8(Fo??>)BV%m$;.Bi`m'!E>?=SF]i-`=\oMh
%(<gnL_L#[&;tZlrFGD-B[k<KpdR:A@;b.Xu!c#B64]'4*M-7ZeHMsHWk4*Y&[n_q*cenSTn&-_T9<%oiGi`E@r[cONF`*d'1UKQ5
%3Edd1:!3aOBEX*uTA7C3+=^t(bo)p$aP,IrD#0lpO5N&G&EL@eZLsWWQ&<=iE^PEFbGFaX\3R"U9<]UCY#]]9<Q'(AT)o"?%B133
%/SLAGW[p2WWJpnS:^'#:O_oOtT9_QAp%-Z_8)H4N55DP#jZR-I(X60'9m5&PcQgdC>(te@B^<#$UK8Kffe6$f)4d!/4M;jNW?'YC
%\gTdhj`+A:)aQ10I9/N*TTV09`)Zb"Kad]Keb4.h7VL=qpk3;uEU=LK:%1dgW91e%*pJ(UFq%DVqImcjrDm4u$`QGAouou&5+5$m
%g?oc7Mcs'r95qT'?0*Yh^T3[`8&+P;\t="[Q.KVkIfaHuV"gBS$UW#^BX_AAOS=rh]?8qXN6f)L]r\hG(<j<B5ip:P;qe#`/0cpc
%lH6q3O)LqllNOq-oZR:K@`8GjBLhTNMqAu0i&Y*#Di)T[pfW;rSF1sD3/4l>a8EIV?=Bi14i:fF8p4"J`R\,Y$*H0p`k:11:Yu"O
%-X5%RhldFm,th)'heM[cq<9M2`qlfM=^9"Al5eRj1p8M=.a-L[/p#dd1^LO'`jdJOA>L]]7MO+^E+sENCUt[ocMH9\):/Q<?4OaN
%'Vt7b1]E][cYc$N],fF]E^W?_\E>)dqp0>=@C/']gp@JXdL3]XrfSQG\=.V8+gmC'NuZpaU8glAK8%'us/qEt@tL11%_o_kfk.u8
%qn%"Wc\osLgtl)O=VKG;;`h"/'sdJt&T<_\56>)7q#R?2(6aW+VbUduMjEJR9PV[:X27M0]sqf2i9(s"/YVlMhjPJY4u&JI?'*$U
%%3`oS>N3P%="u>^l7<&OFE1oDQ+oa1Wc#^7>PR@Z^=U<'&O$%&bqnZqeYnrc]\C&T/>8GnI%tQ^!WYk>fn'R8<I-0uCLajog5#$C
%C%m<>G.8XH`.8Se"jLD9ll@VQgI(Sp`Vos/iLfm0U2fG<W1!4,Odu]g,J)DLMc0iV0:$>Z"HuNF.RBSMCbO?\eMH5Jh$(=JM$[[n
%l+@!L11S_0m(^6;![U's:-PCn996j@>/iis5u$X('jG@+-kBH[l.f1Frm%DdB5F[0OBM(j]Z>LjWhB(IS[/7jG4ZSg;=O4Ves&e[
%4i/qIBs>2?</TE`Q*^NcBT>u+Wr338OmSI=U2%P;lL%81&uC?e<2Z2l$n;Os`+IN!RkW3Q`Z%d4AQLM1!["3Dck.PpJ8Oe&M?5kY
%U,:>c@mpeL4,2`E_hNp*D^,lS@a!HiRNdeIbSj_Z<cR#os5u8:](h;%cg4_?2O^-f[UQQlnl`-Z*p.3aYK-,%R/a3gnW.L[XThp^
%RM?RRnK^eQYt'VGWA>b30HFWi;4bp1'V5IPHh(1NkWg[eSp:c-=!Wod;7Eh!]=-]g,+?BnD'_ec)7<^:''%kMO8C\n0SdAghIn\\
%Ig4a@_$b5u.:=ht]QZJhCG#=]!OrNZF?:N0YAK+Hk]p'/pPk&-YuQlrA[scAUT,Q?mm[K@Ed+.=e)LOa+&FKWD=(%Al)urAH6>C4
%RYf:-HXWkEf0arm=-)L!&gE`0kF]-a'F;"AHW?n[e:hReXIndLNLqe%:BGAgBkidAQ3OprS\8jKF\c$'#f!*'FZ5']YFtJuqJXM.
%`Rn=VY:-Nk44'sT>M"#jqrmFIJOY]BBp%HbaX/O<)r1u7F4,Kq&3B!pLD,G3P(gu%f$.tFIf(=Ra&GV^lq7=uYoJlLBY2;/l>jfM
%=m.DnU@mKJ2%_JAVQIRNPjJ8[]u;ge?H)9<Nq1@0<2<&-A9[B:j\oJKg="rlW:26^#-Mt!>Y#:!+;kk>?kPA3;/,A??ZV->KpNgK
%'g+:`CC[f,:S&<#6jp.cn'KB(9XcX[5J]mq-geQEiJ3Ik47VL:dP'@GD1i">KLjn#9G6uM7,SJ!UPAkQ"/A3LE4@ti_P(']6>qBB
%b#tYGpFh$M&nOjiJP;uYFe_!lR2<i/REpP&CXo2Yafb%9d[*$qnnr&Z+?@RSqq8h\(HI-dn>:TA'X,oI5&,CV->P>O`*-b`5=#7c
%8]R#g=7E;_f38+AEN2]&=T_X"g((.=Lnt[QpCsK`"9\ns8Bd+t`e+EC(Z/h$+gg?"mMn.'oQZG,0D%rN_joP?r[ODS(pW[^[a7:M
%Y!OK@M5PSi\1A(^S5)?@5mpX25%QdtB.'`A[aQ9j'oCBI`7ofHJ$LE(Fm*aYBnqIi\^W0Y)*p[8lKL6L/*Dln5COp+ls>h?ll>:l
%$Os+"67-N9&S*eVcQZ620_W;R%`hIDTa!F@qN&VMQKC44/YE6>#eEXl"S$^f)g]eh_;m?2E8`CU=,Ol)a4#>k1M+!kCPlYaYE2.^
%8L<;sl]o-u_p2.iRYgl.'&$M4;6j7^c?Rn+VWl0,`6L<,[*MqnV)/<RkssrS6lN&p,/R4#B&<N@*qn#sB;q&Y<\qu/#hQmkPE7s"
%s)sbnI]:UX9&V$*Z\'DpU:3*K-KO_66lR#KSo,QrTLA8%T"HcZe-Q"P[4\b#:o5#p#X!*..'(8fd#s2sJ"P`N@[mR+q.s2<iBVMK
%fTFNH7fr)0Qeu<p'1RA)!Enrd31;m-#SD_BV7E3sVBM1AX>/cf[JM7tZKdWg5&VSLQLV(Pr??;#p7NEV@F@bsX@H3geg,5#02\c2
%1L8O,V1fH`K-WYMDsb:[Uq\;)7\[Y/n"GA_RpWk3LV?\%k1UG'5j^#BAcr(P>A\7te0Wcrmj,Yo>`q42-H_6XLCc^>o244la8?oi
%b3>]Z\$f[<s#B>I.H%]WN=MhHrl$cjlnbVB.u;/*_B#M#7I`%\W#i2k4_#*c,PU&QQ&t(Kp4\L*rNiW.0)e<?oP@2c47Ls(IWB.>
%d7=qm(0mpI;-;.;=8&M`7/]c/6\bu6+IhMP[q;P#?9$EuQ)VGjSYEA*l=peT%&g)Z*?APeqf2PYjsqOBCO@5TWi,Q?Kq%S^+b2j=
%dOitQ;1.ksRc^snHO9%199ae4M7XLF?/R?Ar<*9@L^;Jr;Fq_u`MQ;\#cj[nfA.Z&[JKE!NphRn&4_tYhp'bX2Fa&YLNneJAU3%6
%DD_#`fU)])Mj]bT)*l127+E>T,o#)]C$@3%X$ghb%cpaW;<Ep)fV.(fW!9:0O6DrB84?$P$b2[@?cmelS4@+Y;hVg&AbAmjgTgN:
%qoYPV*ktFHIJmOQP>(l*,h)N@cmJY2#T]^hkKYH.$>SX@LQAL6Z`:S)TJJ%,H%13C17arj/LXA"OfiIi7OXL5CUZQs]REZ[B(?R!
%>J*ZF*ZuKWDGpA`dT>b6ob>O!?'nS]7WKlI&pGH#*;4>PQ6V4HEFRogW_?+Y7BA@*p>B-%,/q+?#prspj\j$k8NseC9]lUD>]2$&
%Uicf-?Ctd&>pCue\%mL&o=&!*;<g6q%]3/cNd/2r\_lO4,E#]"?5&5PQQZ"!=R)ZER)]:FQ;Gb;S.$YI_T*oV26!3#H+T(6Sdo[g
%g*WPOH-b][d,;N4O$TYUMO^#(]#KZNfOhL$X3'S#%%hLr/LXNuB;pK'SIQRK\QoD%(W'NnY9LtQ:$(R_0rm]F;EU%<'=SHK@4EZS
%,?XB.JfR*NPj5U"a]"[U=u($<LaTGo.\q=V%k?mF\Yl;2AO=0&a[GSc1WcePchC`Rhl3WP1Nf0/A5W9pbY/U0R(39O`@N"U`<=Y9
%(I:*`1QS\Ff1l`O5Z"Ds>2a(Sm=:Q,`js["dPM_i0RnXGTL9k-WXlMkl[]r\0lmdq9;bu]<Stpup7kPLZLsrPNH%nI54\CtrY@-e
%\ri[moBaFP3SUU;O4uf&M\G=$1[HQ<,sB<ufDUC2R7W!C@`^p$=?,M<TdIE0o4^]:BNg=MLuSld$E7as$Fng`U'gR(*bVLm05IGp
%j$E/bY%_VbZ1!XhMKMM"IeNV*m""`ra?o'(r7[S1*U^RYI.?rg`\/!Ps/?.NPP:["AUS?7M_5FmU:VXb?@o\>I\WA8/&C818EF9!
%H*Y2Q[U4Mtg7guoYe/3e#9pCY&?)"i(fKL[5cW^c5=&WZ05bkU)-U/,dGY-$Yj]_CWI`7I>=1RB%Z&a9:4:!,]T"+2lr_YU6:B;V
%_H-<M:e+AG-<`UWJ%3FlgoMGpA5Oucf%gP)F\SkWD&4UEnf*lSr8g--.q2B)DD!idptJ"h_q^EiEIBbM=U;rGjjp\,@(73*[+lI'
%LB,O@o7"pFJr1A@S0+o>P@,#lpWG;G):/('P&r?6DVb%WYIJA%)(2p7([]\\KuiBQI>Z?K(=+J-Uf/44[+T-aRiCNt%1\OjZHogE
%a'FBKXJZVQ;M(O%d$/_]"I<97[c7[UG$MY<jcL#l.1HJKJ9%]53pKNs@J:MZ:7t\hFt\R4`CU<OKfqW;G90sb+s,%U:q*cQ5-lsi
%QdC3AS%cptnu$]*Ij(W/,@FP?b+;X\%,pILW)A)DVEk7pr.-%Jf;_uN!*&V(Mi71=LnU,BIEu5+Ug$kj4(Y@HbfM:QF0.#k'=*Q?
%=khHj*g0k.NiL.qr672#%i_Gh>B3AhaPffRUO(%elV-pKla4>@!aG"pdHXRKNk`M]Ac?B`o<,ub1WDpCaBgd0,/WNI;9NuN7,qin
%@fXca%'?s%<fC,;2PXR,+E$l<6)j*"!i'UZRtPXfOb,;"AB&Qun"E*aR:.1lmcXo4=0UC7IJkeGPgHf(f5:Yr;\5;5Mak\_YJ.16
%e%&lqLDMg``F`!.)I7R%=6k(G00.Dli]dhKU9C*@gRr((*r7aip#_$!Wa=\#*t]l_gPaf,WG#re;l.f_7Z\=8XI!DUF"sh$]5?0X
%m2jLT8D&:b(m'>='ZC;MnE:C_%4/$Gfb7IWnZDD[Q<,),f7c6Q9H8dp*mDsQ%#LX.^_3Q+_":pUP=G@O^$=hsPB*5W,Fo`o-_/?E
%_N]&H!)TZ,b'^l<e3)VolM8N4<tK&/dElMVebr+rDoUn6'2C*>\nY&ucYY.jU7iRQ;DFs^iPH/j8-P6@K:)RYbAhs2GAj]UY+S:R
%K'YTk_%MtD2!t/q<6#l$S;Aq,0=*^2LZe(lYRr_YM1SBeMn)c'EWl3%^LA7YEH1f([W'h<,jW"\LRa4X9W?rSfD.=&"^cZGB]i\:
%A0SU&BQ#a#7\q1jC6Z6i)&#AYlK_;qhG7%KGok?YE%OqD>N%cPQLEZZ$p>IsXtrA"k3^5oU37sAGBRs8>Np8;#IAh?"&AW%mC9T&
%(0C.#=$*Qj/Jd`[2GP_;l02ZHH*YTLAr^`+i\09SllGQLb#i<ENL]!/d?ho/lgnpr$TPF[D7rfr)iajZT`$!_M%8(9%>o0P.T4#b
%HINL(7&&=sW8W$EnVEHQD18P(Q<-h::Q-PK:gj[De.oXs3XrnNMI!g(]85kikVOo&e`]%o1O=1[5HTnZ$U:K%c`MW_UM:KnBW`=&
%_.$nBA6'"DeW/<pJ/RGaNBVDl[T0pE83tL7<u0:U4hrM=QcLgRRDTkSpE$k&98.W;FjnNS\FBctkUAt]=^C^UHhQFW.b$d'A*17q
%nRgE;4U=^uJsAI7J5F;NalGT<23N--m&7OY1]ADilpX7I)&)H%a5$+nRqQM(6)(bCaP\.b9;fi/KuS>MJ!Id-^'%rMlkDVX<]-4q
%UtIKQO<Vha7fP,-E=aEp]r-/pO!tQ=N_g:eU3oUoVg76bQ&-PSR$qC[RkqJ98R3_g0BJ;j+<#oL,na:37(^M7X49a3-c'!r;f`<m
%@4?B0R6K3F:!>5(GCLYH6Hp>//U')f':LU#6$/`V?R;#?&KHsoq;TAlj\8P5XN1H1;F;\"T8LrX%?mdm%q;/e-A5/uIks2/IL<?S
%KGKZD\oWWbYZ?49C;mY'MGdptR:W/3R-f0"18qJlO^A+X&\0t=4U.*EZh3HD2tO_ALBj0Ob;-tg/!e\!CT9h\1a7%L*(+OQ=fRfF
%BsXltN:!O`3V5=f0%VE3;]>Ilnt\c#2M+:eqM8?;#R]C&h_jN-$=1F*E<#`_7!77SADSoqS*)j/W9q7f<[!MNEmt!f_+M@2#+m"?
%I#mLi7f<$`X>NGEp6t+)JRtFHc:3*]^%F/,(mKB>S:1,&^7jK!H[@QqDe?qC:HDI<CGa8t"Sc_sX?#l>kb.H[Z6a%O7&>Q-3;HA/
%D9QZ8V5B'@6eG0&]@#`@&;rLWU_JcPeq[IAML?t;$fkB$1dP*YU<f-3#AeKeh].hh(69P7qo>(9YoANJr@uQknJPXLnJ/?HeQi3V
%HB3#\FR,t3;kA3ddGmjB.:-S]EI8st&ropjYB$06hB6S)1hd[*^&4APC?^go31$Q-Bq%,IHsk:(o4^JHNSDKl7r7,F1psr4/,7K(
%2V'n5ff7b?nlcQ]6Qg,6FF#dLLTWNZ]b.%a&k8eAgJD>2gio%-;XG+akulBT/XCH?f@WPPp\[/+h7\_#PhN_uS)-qnbLr/)N:+>[
%1T#JUfs4-=q/\.PR(+?De%PF1g7/a:bBG0p&@:]88u_7=8eA+a>Im^#>)L$1laqp?XD`Dk\N:.q\W2q7h1A;B00\O\3;mmdnTZj/
%InqQ]I;%iFc&h);DGp,N<cO$5J4-mkPpXtR0?8g_=\:I*_+,QO_d;9Mnquj$Fm(4T[tN^qBL@=GMg+>-9L!3CT%P@2l&m8'OKr6,
%+e89Um[WdQ=()]Sg3(2/8)fn:&O2YgG16S>1A0c'7NZFAa-h!)Y,`8HalQS]!XZWQ_I4D6]rBZ(`]O`8noaR.:\N1O3bMCmPkSrQ
%W4BiqF?QN_lLo*4IZo0>6h>Xh'Pi,d0DkT5q(edGo1;NQTpfp-O1+<)lkZp2jDK8Xc\iYhA1AFOfOmUlLD#gfg1WTPdAKOmhYD7s
%gU-]H[JtDJ/ZF3=aNZ%al(VZXL+Z%ZYRAmqOF>Lj:u4^\XJ@lBLq-qCA)<It(pELi2#$lJ$M&CW!:R.N>(0WDMjiHpmAlF:h-#=S
%A]@/c5E\<X3!L(!&>FL/1a:k!\Vpl4#<H-7-S03uEGg2CN_W@'%ccF57Y@)CMNt2!T3G3Mrc^ua<2?:9K9[/8fPt\OJ95OnOY0<=
%+gYIA/;Wh[*>mA$gTME&*83]YHb%<FC,U`]#ID&'pf&j^0"gI+n&s</*Ih/m@p"tL$q8ZY^5^%[jD1tU(#@VsT^nfLpVZU]n9Gp'
%<ujtbD3rGQfq)L48.p5Wj14WIglKV9$)idF?l<j-%Brhag9;tCRjLI'0#cYUBEV=g5%GaY2BpROLQKS-$n&4]po9)3M[;RPL^X2S
%jr=XJ68pCmCYm:Ag/S#[SEs-U(@VMs^WIQ-GI7NNfBPXK(F(dQZuU[-@8=s_&D)osk(1l:3[]^C!2F:/),H8fUn&Vf:P?=4h)aM<
%aY/bT>jfk)oC4f-jomaG0O8+@B/pd;FqpUHL'HOpe*guF_ktI7_.K4ATJc449_KA_nsO#"XD?k]JT%,1qLVO#</d6;2mN[/SeklO
%Se)O;#^QrT:tG@YCE`>G0*7eq9mOf)!tR3i="*+O(TCih$i16E".n*u$UZuMJmeIhoA5m8VQ[mFS\%-;_re>OF5;#@daXs1YQ+s]
%8[[#5$XB-MVi3hA"ShM!)QGSodAlcE4hGZa&99dM%;a:]?.kLdS^1*RPqCPc'V!:)dWkc_Q=jIQ^Aq!.7H!gPG#fCC.3$5$dN#3<
%T>1%ghec/./YIT)H\+IN%jH[_O-=+corhEh"#!RqY\#iIHUfm,8K@7:K>H*O5]CU9!@`0'2_gUcML()&5P(MEeK:FC?s_sFW%T^o
%.UQJWgRSdQROENn?i*g-l8C=$c"9f%T";hpOK-VU2*+a7Tu+<5=b]=Dr0P$7/NK)e`Dns(hr_BA7"L2?M"iSCgaS_S[M8h1A$;Mh
%4mPq;KOT\6h?MLO4U$1_gr_N\!'ABgPatn/k@Mg*^$oY:#j;07M6QWq*BZhkRmIAlFur\mQmbT]`WZO_Fq)8,c$forf</Ump&?g[
%'a9]:T'5hUT3gq%(LI,aOAAqOLfG?(C:+f;MKhaU$KtJp+d<;'bY*uaHgcIGHcq^UIcEX#iZRl93M#1hrSN7cA#:5ks#c'^?BQI,
%K]-"bL6R@Jk?aILlNq!l*QqdXhE@,!nEe89_]).cN/AWQE6?W7(tlQNZIklpAQ<Ym>0bWc^<#YAIjj!#5nX2h:hb-L"b_oeEAWeY
%=2k%,NUQi:=)Z)Cb4IsS24B2rkf".IF.]91-I!F=@M,03o$:,Z25G3!%eW(C,*ZhKp"@2g;T'g!8h6#I$&!q.T=.bmUetZE(s@d#
%n+oO!7`9dRJok:m.<^g47NQm0ATJptM1E6LG;Kd6M)r:XBD%s[,dh;'^NqdsKY)-sCL_^f<TVq)WkDa#=*;7)e8(%m\=_=0Z>bOY
%hjGRO5Gl,dUlS\sM>.KV.m3kVkto:iJ&i_QC/*o%,8(j_jbenR3uq%KBQViKC]I%*@k7c*phZq!\KL9g(U\d0+VIiWk?9-pL3k1o
%nNg:d.V3_loHY%iY_I@ZU6B[rcf^[#ld/.8e*tuNETeY4:.JT#G$GL)f.1.?;sMDaS*F*cl5_>[<+XEU#a)K6#-ucij],eL!#L=N
%:U_O<?7#O0@ome`Gq63Mc3l#LnXNlh5>4:m,bGFc)3dZQ`O7<=#]8]af[p`H\^??CiKbuT1q"t>!3!O(O[aPlQnLfqb)Bgn/(0nX
%^N7d_Z?Ta9Ja6XR;d;cgKXdZHoNIe-5%*_JD4OUW[+j3bc.7=V<^Aq1d'/&=mnaK;[T(,>qr1fj^a#CR>9X;&Ya'RE*#i;qgutFh
%2f%+%DoN`rfp(Oj$(\i>l2V0fR.#hN=Njr@jm6WH[;q#hlt91u^mFDt2j3u'OR@If?`W'fE4=KraD3p(`fu4]7Bb8<i?JRJY5"=d
%I:<0P)MYtsXs6B"%9=j:=Fs.(Kl-=pBIP-pD4,4:D"P)`[]dtCOi[038^.%FPG]B[@hu6a@5!7ULh"Zq!e*('crCM*(Y=7/b*\h-
%Ym8.de5Z3ERsl+Id#>#+l8N?p/a$a_nK*/1Q/8)`ftU_V_2ll?fM/-;'"Beb/**4dKAt$"/?hC<&O*A\>KtT-%4C&d*K,;GqO>n.
%/)X_:B?WIADJ6I`c6PA*(G6.`2&/Ma$bTA%&uYY\LQ;Uk*U3nL5bQVTiUr]@&J^u4^8f.PM>nFe7WKRM:DBK"a?#@@THt>IF$02\
%Vc@;S0*-hB,KSj"0Er>-)_PR6%_^l6;n`_+d>uc(NtIj%!*"nVUUfU]'0iQ,U2GsmRG_N'[u)$`811Ze0r41,UulT/rX#hUlGamV
%D&i&#ocT5jjH/h6q\-J7?'5'CEJnit]LXu[5$hXPBN?OtQUN7$&nD@tj3tKojY)7&.FPZeJKc*^Llb"h\._FKPg&.jY#E7f91/p`
%D3ihi)2fIOOKu</A_fH=7Z-EdIaD2<*O\&G<<KQPn>FEOS:j/G10.\cnZ(j$&j[5S7RVn@a[kg[BLS47d0s,N4XKGc%2)ABE,W(E
%Y8(L8fNWA-bujW5=gM2b;M?Z6NmCu_4$9rEkbOQrNi!;tm8>Aa6AT5A7\1=oAqWAI@%nc\"U6-V7_W&0%6?ULEH\_lA@Ysu#YMKF
%o0NmI@R7TD=`Y^Tj*A[`E+m(IJk4.&DNSfW6&[5K!1uq0RcA,].,J(F,\G.X'HRPOa^%.eU5&o4JDbG6$P%G*\US]bNM8R#8pji)
%E2h[lq5]LBn7<SG3C)g,KEm66?]po8#kBp@fuVsh<GDk[S&ij#TK:Mk5q>kDYif'`S'h$p'4:k*/P:F:C2*phKU#:QPUWj[e'EA*
%rdQ^^ig`rrOBdeU:]eHF(V%U4(#.J`-MU_S38tOhii[I$0jAH/SmG,k5_j'BQQ=aT2PF([*K81&*L\2)U3iH^<;F.m8r<3'oNi-Q
%XB4$=F#mlRQRm&eH>rEr[@Q"3(M_[e?Lon_7Z]#Gm,dMdk(J@VW#qeLk/[3g0l9*GXhIZhMF,WbpGVi[cVGgP*r>rKJp1=ugJMPd
%3[?$er2dkkFt5IYOjBW&.,37,[BEN&](.m%302t\b',`U\&X3ZP1sh8P$+BaS9nI\Okk2C%ajMrg=rUsAm0VqKCge+`lu[X%VYuR
%*BrV8P#)=rUg?;CSYGHH,;3'\acmK4UYFDGNqCjCkr(EdgHL4R7/]U!m8raT>?d$<)1_&P*+nL%ki'i`U"EG5^Al./P:Z[-B0o:5
%J7"P`I.b3k:-$5.P"F@'4OH#B"=(MH<S?4Vhg7W2h1n=!N:fpaPab#mVit?SfaE(bpLd1uCf,1@THJ6$h.1A_WrNYPbM6ni*QW?!
%B9mA^'(PP$k"SD"]L*?HD!MX1*me^ZZ<CK)8R<qt*mFk3OF<jIMW[-:U!NU]-4V17=[Y6Xn&SpNqA[TWpbP.jLrZF`"obdQlZmkD
%!X/l.N3>Y4hKsW9gl@#=]Z6@uU`@0aN3<lLF$5Md/$Sd>pm/6o?]D6Sb[j#"mpkOpa1!IMPhusiMWSo^8,,+h?O\Y.(&dh#+u7O>
%H$n)I(AckA@a<e:NA#8[J*fD5n!*i2*9e=df87YK&e\dr60@LTG7[O`4&RVr9fpKLik/BfXZ3Dmqs=pP,V>!65a%O&GD"-.md@o)
%8]rckhlQ^<B`S#_`soToS-`hHSZRGL/YkAjF^A[5p3Ui-`$Lp3X!k'%Z@its7W6a[JV`eB]O1)I-q>c/fp$efjDEg,?[hp_!g8\!
%NEQET_GL]U<8UQW;lUM6.'XY&JH(H4MR'-S?iZAg>0QI.s5gFM\7Bk(#OCRF#r;*4M0?&:jDnGJ#_k,f_)U3d9a.hM(uXA!.!Y$8
%aNa"pk-89$"Z*JaFf\MnF>,DJlA@io+D;PG.%)p;?)@lpFrdu*pm$o5=`Ah8"dC@7N:1.#bGF,8Cg_!B0fAOt5R7hQTdfUcR[RmO
%W!WqDc"<RI^2@*<?tLsYot9TuT6l,EAXp4`Z4\Y\I,Kt8>,(1H?oU/l?JrOK#Jt2iR=BnH+M`Kkoni"u\t^)r."J3oG<H0?R&lGC
%63kGVrk9-VI4_NTR[qUJJm1)L7]n381/<lb7<:_@6It%TjP&e8C3pMdf,"+jK/5c6AB]Z_A[:Zh3=g"+F?Vfe4[CW.0sf@HX-b:(
%2nZ)5>e'l1!m<kX(ZWUYH<kVknL=)h,`&@s7tp,($"?5[c0IJ[:tlTWNF2kt?5N+3f;%6+RK)IE&1s2R]F*-M)"ZJJLJdU@a*QHm
%ou8a"H/iIC>J9^BJRH8)%b1b-%TC8cen46L=W7XR0%2Ng!*hVCbP9e[4@\/QC4LNR^t-<e(5Nea[.PKole$U?=G0Yf8(VWUoq(C;
%SS*='"eQAjLm);*F:WAO&Z0S;K3SkkJo]4O+qM#-?4HM6KJ_%]5"nt/M#-ZO`VlAao*;_MV7t2-EkV$#A9`^G1"D11_6jZpg!6K(
%Aak9**I8.UXVNcS9$<<J^(-/>#l)u%NsaRcVNdfg9Im%sprSUpM&O2$B@1gBC7RJr'^LM,.(H3L.>#\r'jNB3j(BeJ,*DBd2a6jm
%SVRfL,[!qeN7]'BEf[GKDfJJl=su&M<^8n$ZPPE1a6:^'s$`E&Z4!>(XAAjT+9160m,?[!(?VrV3LE>#+gFN7DMdm-_s@NSqmZQ2
%c`/_B^D5PfO#R@4<UePU_k/`f"6!gV;^2af$Vn'`Cg#,:o7Ih8_8\j@D\O(/lU3;R\`3SGI/5(?o:IiL5I+fbn$G2_(6kNJq.`R:
%P]e_poZbH,<E0A9bhmQ(('rbc53P]r%boj#E1;!ad/Q*u!?-e0)a)a$?)\'\"iu@_5gO'L\7O4/,W<\A2LK)aG!cW`)@s/%;X8Wa
%EZ9IX8[?/2OD;>t$`oiX)#LX#ju7!k163ddG'*/)S/0noq(8O4FHn)+]/DCOC@!rOH_<0>YK$$RXSQ#ESKCtFFCVYLVConXAOp$5
%an?uJ@WYspmQ$"T2tjd:>Q6/[k]*"?79QW#c,(;`Z5i>93[74;m!`hWiGV.lA`?k3d<^W'YJUuEMBY;3&%Raq0.2kus!h82G>&BQ
%:;#Q+I:Bsr8RL2/6Hr2oo9/`pDM4_N'$P`jU$=O-!1mjb=*<depOT!q@:Bh*2R_GK)(EW#m;b$5F9AF94a\):a)?^lUB<Js8#I7]
%>aYD<mc^Ke$R_F[4;hIeSo^I6FaVa$"sL@N.l0A;:)e/Yh)nG87AgE;$Q!'0-gkd5^9jHmT+Ds="2i43Gg1^#f'+&qD)h-I"03TP
%j1ocfF(L.mb1bc,g"8H.`>+%iOu3^Sa>I:F7lMT>@r`D+@7gdYI!H0+G.;LOEo-'M_ab#JoL#pipoUaJlOF>2#h]4L+]fS8-79a6
%\d=1OpH[Ak:rN$c8.!Lldd7IaW]+XOHgOKNTEcmmdoPDm'(3",("!$)d)Ic;J=VYbI$19IR"RrW*_4oJ&Ah6Z2JIfWj7UA[Js5+d
%)%oj"Sn+[frF9+@9Ws$)>Lu_AegKOhT69j6MgrQXH?6H$oai(@!=?=qM>d!!6"l?TnEN&(kYSM;.A!_Aa5u/6'"`kS6T2br@!)_t
%>ctu=J8e"^o5^gXA;^L3o%b%"`hmfa&&L>H$N-pKEgn?c:3>cLiSmSW'J0)FWeQks^B8;XDI27UZ?Yt/?q4jV<q4(cJDI[;JjK8`
%Tt@&=#1rFbG]:V=guR+=^Y3tT5o&08Bl55:?c2g:jXc)P>=Ig;jk.Ob?!F*S&tmcE?TtC@nd#)5UVBhBc07nKG^W8>"bU^5JK,di
%PJ]ZMr@en$ig0%gq0UnFfB_li`SL9@<k)7rO,X96(\<c"A:54GbbZ&Ia\L:l,gJ)A=hX2K1KkC=*lcWW[]lUTU%ko/3PPZX'k[dc
%,QdX*U2">;JC*g>K\(L%F&m&_]PRg8M^2CTL6'bY\oG5FM`AL/Y(^cM[0HQ0d;Nhu/pR`o`6*]jN/Z;B4#2Ak[0&/e08?9e=8I3?
%`fJt9[d`2E$Tc>B8pH^m6HI=:ofuJ"<)<b`#jYtOT0<)D_@cuig[C7:dNeXnMP'$KA4T[?X66)`PhIa<dF2\f=[E^llj)OERs8U2
%i"37:1]V7=#3h40"EYD^$PRF>Y-<3YqNkta..j[?kO[A]E?jgs*+AMO[Csu5)^Tt*0O5a9>gE+%(Kl-n0V(muKN-2dhM<Q^&KL0]
%kJlSR&cX&Wa;T2%(-U;[EsJehA/mPkOntYa7$]m-"Y_2X+]oC6*EX%,N!1rbJH-.Or+r\3coXpYE?T)<LK7$WRnI4'4&p@T`-qM*
%9[nt9k4_uY1fBiMDr]22NQ35E$,;1\jp6nfQ7\e=f$2l;<[\m4/p?WW)3Ma3Q9<l:*PWJL%ptOY;\(`Xm\W>31s:YQ77%4sDW7m4
%mikZMBgcX;rZat62P;>k-ohL9PG$oe4_"KX$l=IoB+"jp[-P*IiK%_s\QY('JM_EhM1)-@?Dp2:l<7`a%!&=RFfXn>>"h_m]qQI9
%&P,JR]JL-2PO*R4h">7uEgn?\-uAFq-6Z_drk.,f712D)JJ_Q>oB\#p>81gSYXW>"C?N:OR,\7u@g#d6:6h@(2kep/93Da3)B0a#
%=ud3-c<-^6N3Jkk:IH7:*)a='S8UmqDoen1or(e[?3]('/@H%&ktJI;.!daf_KOP3+d0[_`!FWS@!`skG-D76$nL?pj"c`.d6-)m
%[/e]1TR:6,`#XpC1&7LK9XCO)`f6IiS86\>iVb?3!$OFkEDp-9]E:_0!'P^>c]K)*j:KrNFr4F;<BY.1cpjPn83E.%OmT+m"(d1,
%-312A'(mtLL[VYIpC-.;Rk=TCQXN5u8Q?E7+h$rF-IS#EMFDRC-sed#>VZ,FTFE\NY3ni$;g0Q-E/"`s4:C4;oF*U%&;2(2jePB9
%ES8cOh2kg/eWX^6fegu-DRZ,[CgL/T>D4BX-J-]o@%=?A2R2l@n$V\p+;A4IdZ!G5:=k[L$Wc42<Ss[IrN0"<FNm]OF6X&!;3Uar
%RJFB-_4fqG#h<Q\7l1)K@'FFUdY0DYLMJ<E^o#g+e]#j.$sBN.79%c<1iK5U\uC\=b]GpnGF]lH$`[Y1j=_D5B^<0K.Iq"CJf8Pk
%+Qh++]>]J=f:Ks7V"MnY0;%](X(h"K%<r")dGU1C]&)]Emi>-l<eUFsBKCllU`)rLC*[;_j4.gdkBk"lGdgT2X`J9QpeKG+*k,_g
%LXbD.7tXWJFe5\=)tp:oL6FU>%!Q2A@;kR/((XJEE?3muU0s<7c")DfALOn5TLp\0h\n=j5X2G,E731m3.R(GI8`"feYFVBEMo0.
%hJ-d:$[F"=H_m`d3rR<cr;S0`pqQgc&)/?)_GciO^p/<1r1hkBkl>s@J]XLG0q3hFVD)m@VYN15ReXT_pS;l7$Bt`3_.KcF--<ok
%[5_9QL`>E-""Me]9b8X!E*O7]_G>F[I9\71[DTlVicG6fc1NgY'V1-Fk5En[q+fBid)LQ!3q..LoDZA:.L_K8!<OnR&qSZ)L:^Uc
%"IspA'^X?urTkA'E>9)k?X"Zn[dkkf`+&Q<>JL+WcF+82hXg)_Gt\/`VR2/5Y3:e?GL)DIb!<?M\fL=kS>kt"j.LR$-i5k'pOWK^
%/M_4<fphbK-Si9-.KNis,Dq^cE11V9*!m!n;=@#r@FjlC>4`+Ig.KD,JfoPM-e#[<r6$JS-/8H1o"J'&<)UF5qd;D>&40C7REOH\
%Z]gbddJm[@Pno#Zf?i<h6_t=WC\On%',;7`hnFbpIfGTR%?.13R6sT>>)%%')d6508Kh%ha-^F':Mf9\!"PSG`=e=u.`+5$'J?^r
%0>o"_g-oO::l3l\]1^tBKCiEuYn)=I&(:Li=ZF%!*-U3uQ4&4O(C*kA:MF3Ym'[Z"[BU#[?;Zs?m`[:LK+0BNC#/$XrN<%hLRk.V
%&eFl75t5s4-',rTWC@sHi9i_^^(EM)UW3ITO`PIuM/dd,_mb%nr-fo?O&>L]S)Y!_pWD$Bb+@!&ORK5Ga7TS.PXEr]HkSXOY6X\g
%Pi,+5HuBAFh]EYK.9Jk"a@hj5B)uEHDAje?/1U-Mp/-dipk]K$oD1O7H`b&VJ._'bW2bhaV['Zu0o<#Y@-pTPl)t9P]\ZJgHXpTI
%\R#dR1CKS+f1/]8BYeh3lR)L%&ucabVm9bP5rTL;G]Pq?AWUS7VN1Cj;Ir*1'sC"ZqIMp\DC)nrmb<<f4bJf8TLO?r/*)8pI-R9I
%]7[k'[0mD'ee]aLR0X`)52k80-?>EUD-N;,RL1OlrNjA#fd@F?pE38)'$;nIF'%Z3nT'dFOZ$o`U^-=%R_JO2nibjYI!I2kMKn;o
%G_nKYLba[k2m(`uk\%e:+^u?^`JI$5p*B0A'AnQuUG%_V3X*U3NMA@'`5R2#^6+="!m6^d:G#r=:fH%rmJ;GF4ITeja3T93;#rs`
%'[7ZYq!k=Ahs/,%k54tDYQ(.'@5N#g+5YN3LJ_:5poLYB/VMiOHG,?VCT3M)*!Ggg+ZidW\kXp<!Jj3"YtQN,RAFVT;_q>k?aFM*
%\t_r)<Y6BU;5<>kOR_d@r4c@Q5<dsr>H9iGQ`mbj#@Oe_clMne?+.36-5+ZfJV%20O^_tl(qK8u$Bg;TJ"g<>bd2*Rc`3JV`5bD;
%>f-g94@V,<QVQb$6="kl*W-0TI0=)@Fo8U3:XV`h4/T"YaW>VKmE>K>-;6J*l5*3I[qkD^hI(e+L_W"eZKt^^eouGd:/"O%hRmpK
%3UL9UXniH6mG,kNO<=PK]F/_%3=i>5:Eks*Oqk0)jMnOF]5S*b(pL^9Ar]ErY7d581sZ_.ccfGmoY(7EJ(8*,Oi7a^(BN$X?u<XU
%X*lnTbL5WN;FHiVP:`eV2q"!RG$J%!^BeCg&V20$:"nDG4>^$$n:_oAM^@12]t88XW#PLuEW!$Kn)QE9C0^WfURF#.<]B&l``_X.
%Lr9:p(K%p'68d/R6pr2-\fQ/Xg=PuZj76A!h=$L/&?h.kbJImbLT%>N'bCJ'>YXi_;/\;fd7G^6LYK`<HF_$%3.d%JQ:`n'N+5RD
%FB*OtEM8<@-dVIjle)?Ne+Q=:$"3uBKg[4f=g@3o,cTcLb,"DQhu2OrX6Q19p<*]gL#u#oe=^:%$Bn&6A?O9BPuB\l6d`'_QHjY#
%;5FU#Ol<s/`.a1AUhWGD3=DETdB*?,$m#OK=9#a2Wd:Gh%j/6ZrFU<;;7u@58F%cTU7jm]MnGAeOUt%rD,HD7$jWuaR]\0[P:qPd
%n\Z?A'q9P.0ELE=-7"M8f)ReUOJGWI86&cO#`lou"H!:Yhrh#0?-nRQN=o%2,lD4_.c[]Sl,A_<l@Xe(AiD>4>-rkOeo6)XbES6#
%UE7(LhKmN=7TXMmqXNUcK[<"-][9t*[iLI>DQ-$8h]d5rW@"nq6mW2EJ4ciH!n%Kr#gqunE/Poc,cf-+h@VoZFPs0D#R)j7X*tPX
%#j7;483l__%N':L5tUWc#^VNeRZ[qb(F=bW'i>dPRXRPtVS\0jj!^^;=M0M/nat,E<Oe43NXZ&>2B)t>R_2PK)kHuB&f[rtZ=+4/
%L>6C(1RtHh#tZUT.6(Z$HI&r>55&-3C4pXG51d9oZN@OF6A12+(,$ru-mOiSC5?&6G6(98R#3`<hQCLJ$o<O&`.WG?J-*-5maUCB
%ZB:45kYP<KV&f1:?ARQQLaK"*6isdfX((AC]<nM(7U!W)o=/(,]QBe%.l'$A.A0s2RmC'O*igE/b=/F7.8.'p6/SU>XK+;Vr-LnQ
%jg0H_]+'sW2BY>BUlh4W"?[VIPO1n?B'b7+%`slb[2``PB1nHe(YfG!:A^R/rJL("9e1UFj!g6G2cEer7?Bl2R&W.lP*$<lJu:Ju
%7VJu:(DV+]V*09.&4QCOf4(boHaml4OnitkQAj(bX.!mSMYgHL=(E,.<.2U\,MrGBb'L2=^GsC+hWWN5DAm]M37NKdi]Lo@,Q_3J
%Md==q2=4KZ9_X6IUs0XFA[nb@G_L'.laWFBc1seWdDAM\_l/c`6\i#6=$'a;T))E$U;goGG6&N&T#Sq^jg9<$+Y'dlQqR.=2`U?3
%0OXMa9T,r(>GL!91*#GCZl>cnLU+L'j%s.?DmQFWS.Vu.:a=p%KnG/da0]Kt?qW<B0e#5[KShD,1q2'7eTOdm,*r(&pMW&Yhsk8A
%,Ui<Jk7TZ(WgT*0Z-4q`'0F^1OO$tX&)1*F1UXi!;T-do*57sDRJ5@B_S$q"]ml#T",LO#'Qs;7*Z-I!+0IE*G]qLk/VgH40oDBi
%-(H9(C?Q;\EdZN2>0K`qb?#OT^eXD[QPZ]+la5f`&LGaL<9T5F^/r4%`peD'.j058":H;2J[BhMB^eYGTrM%J,`]liM/m_um^ob5
%,/AnR3`[tMClMpm6QI?a`9Uc4c#&M\i7)]5=.c\fQ;0JCrHr4q$(^Eu^[_u!;E6g@c(8D!)m?&kVE3F_6_k\p/G"(spcIK@GL^*'
%S&q"]*k6=aWbQKZ]?!g/i_n4'mX*Fh]-mk/4tZH?Bg$c1?2H1X-kZ_7"T9G-mPfcuTn!>gh]Xl>Oj%t<[./.t4:`u"!#(Z430-q2
%cZTVTKL-]^Rgd^W^%e/^*c2d+/s8N)kdH-1Q'N"([Kr>b,K_06dBZ33W_XjXdi0DZjn.]AC!Q0+pZiJad!b5i1]bq,?O[*7h9TID
%Nn78q'm,o)+t>!IhC89pR9>$L*rXp!I/TaI@5-4JprIc)ql*dRgdTt&]+XJBSbG*!g1KIePRgOk1FtZ:>H#0;kDM_UF2&8\^J]#j
%nB*?qq"BC9f'&0fbMZ_;9C]44#t5*62'X0'o>C[]j3'27.IU?TmpUkDn\*MES'-h%,OKcc0\m5QJ^RVt>G?=*fef&Hkn5DoYAI`+
%![F#Z_J';dJ0N,GfjZ1NZJC^BEDp8#8X>S&J7(<,h'lR0k;M&E@5=;G<ItbIfOAs7KkYU`3B\NJTEkkPSE9o;\HsBg5LTop'hlbW
%^T!"W1nMd&N`?"*rp.mrBqq>p>ST700d(tRZn&:\ga@07SZ>c\cK/ko5';&gGjXV>rVtlkP>t^f0?`E'U.b"m-LYF1rnA5af2<oW
%B!:efh,/1/ouk9(hg!W=Q-n4,K?O9YAb:JR"Y?;#D37Zq\'DJloe4QVSSZXAl\muAWO*RVd]9<9qP-RRQfqPNG*aZ!WS)"1/&k?7
%)+OA_ZX?XioBDkXdbFNn%i^KM=tOKTi@N8nhsG(j^<2B7YgU&LE\FnKbF>Z4c)N9HM]+5r`dmYs71)$76a10k3sWm9o\e]rY=O<m
%!^L'&-0@P7p\NEG0:.Ji0gXKs\Y6$oLNBH63u`EE"aER!F>s$^I@hX/.p75YoUTOmLS6[38E<=9>^jN9X0e-flof\kj:ckcd!@UO
%:+[i9g>fVJ7s]X[L/,KREU[m)PQ&c,qG)*=_[(,FG[A1IQmT52aDWH;n4VDiBq7dnosn1>NUonF$GUoDmB2DI,.(pQG.OjM<Ocm7
%KB::Wfa_;d6,G;&GIm*QY&e_!5\*Y-Sf2]H`7t4??h<EerRhj];UDP6E;<nhM"U/%s5o16'AZAR;ZCAa>G+"nX6'l!Rd&M][9IP%
%O\-mDVaQC'=3,/l0S#UodhFZ.3=O>(N'N,k6F`]7dN6fTqhR(7^A)>8m$fH7;`eZ+;8ta+i#3oQ@pu]3>N?h&WS*!V;qJ/>r28hQ
%I<rEg-`^?%Xn0P4<gfs%pXXJ^N4;Wi!WE<#^5uLIH>[!u_U4Zl/aX>&H$#0E9fG0n0nd8jep]g6'lVM68OLb_p/^KtL?G?'4`UU=
%%+jV3g-Xr7h7GjB&[cU*^sL(1]1H8VBg_L6:?J!$1?WDW*NnQbC"U">oC_pi`cZ!u+jnSmn>^<%>>LK;LpUNY%3/?'Y+m^<8ZH21
%QA,`QLF,]b.QEtOPMT6P*?:=U9(0\1-(6tb@PL._R0Yuop1U\cUT-sJ)!\h0-9sfnXJseirV/)LJ"h@MjT?q(oYji;__"=<NLCRS
%Zl@D_OkeH'lu4D[\^5HP0"N9B`3O#@#"2Q=Ei#O!B#*==FhJg41<Out+&^mB\P\=4+m2,?m*ee,kR#T5fV.ALP-kiX!.,:d1)?/G
%MY"dkaulEdc<KS5SX!-:$D%;@gIi"?R;;C;$=1>BlJIc]iKu.Uj9lnQLgNO7rUrbojTs!D'+7@l")Y"^W.RLlE4f7`,6L-M.G9_\
%gQ8k1H#f@+L0]VjE<]:BF.^^WXW?*Z7+Y#t?P-+iLbTG-I?=PcW2$s:#k)HL!p.%`fa3PIcJ;Al4b\]tbrH=a`Lf8>MpuaHZ.U?r
%RQ%$@_<E(WOXkoZf,MF&4lZi'90djV-lq2F5cCbs.AH,YNWi$$Y8WgiKBfJA""MkWO+!1[4/3%bJD-GK,N=qWjI!t_&RnX+5)-C?
%m.WO:[!R.,+pj_/[?e.n>Z_]X3fO+r7'fCuFB)nlS=)gZf#^mfGaei]OiJJ9&M_]#WIQp6I/[0HP.`+'_^Zt_kQ")-CV<Tr)m+Sa
%Xt$;,CIMf4bmRDEWVe#12#7UoKE=LdIGY='j9367Z-BP@DK*C(9@lB'WND/A$gSDL?Mtfl<bo<G[sFIt6\2S1GTsNg-]6cM)ScI1
%1ZkU(V&<,`3CGZkj]$$[SsSHAP,Rch,[K!kn@ch=0#f&qo/:ruEk\`LKcP]$'m,o=E^*T/#?.]M4%EPSg06.3'kp4j_aG<tjN`Hp
%(14"H]?c-#DY-,?K!:Vg%9%qa`E*Fg4^^$upd.%Naos3#9B7uM]UZ(D:Q??[*#QJ_8utb6_^4*iaqj7-qLJeOG`fa@cb4RGpM+oR
%7>"b/^"R*,koa[(eXg8D)1"[0Zfe&o,35KPQ/tk=FaL)0,R\<l9<t8<9C"R02^uG"o53o)V4S2f,,$$pGna(NCEMZVqd'(n=EpEh
%=d>sVcSM)>UphdTf(=[HTn@\WhN$@ZQl5@MXpT8`<$E`(f\.su(Ja'p815a])OUD;\%;j+3a=NG6'U](-]gR2m9A)OO#9OG?SN4j
%BG@H)Wj*bJhMh0X"0#"ZnG9j65<DUoT0=bo7;j^`>r>:ji@&CLWN^lr-55+s?qK=U[j"EoOb(+\M&cA?Sli6[m-dLtLh`:]SeAUn
%g8E$EW'-bke%Q((-GH*TV)q[I-/FjaE:-,671<5u*@?r<><LF7IX$<_Pb6[RrQ3bi"kQ6Tbk?pS5*Df=,UDN\gM06S4cmJ!Y"*RR
%dcs:=#U^HY(#m:Vh%2U8Am9'DE0eq0SIuLmL^go<W@E[^74VZmK"gCP3H>\\&geYsNY7,'$Mp%e84FM=S.Lj+",L(2V4=65q^+fN
%Nf^QCd`23$g(Z,0&r$L&Q*BuHqD7`bp.rBZ2Uku=3siD3FnEi8'+?:m^GnB?`c2A9DI<M?Z<o'Zh;E[,1oKBK?:J7kZErn-HCH;J
%#T8_O_?QhF+8D2N6iFRXFnEGX_r#3@jC>/_c\$'):!J;O_iMAm/+-sX*WWtW[\b5$8(9&'7!0GfD*b`N7?Pm^R?^HYYCorLK=C^h
%C$]Rq!ruKb-]_Q)j2=lN@NFdC"k@bDU=r4i7TLK"bSdbUpg>!]JA<tA;ZNFi!mMm;l$Yb(e:(&5=gig"<;q&O5(0V7T3(Z7IFtj&
%hG`5c'dtIZm!.0qG'T6ckAa6.&IblVM)32H@lb9:XCli/$poQt#![/L5'B>2*M?*jYrpRO\suT\cf/tH,f#qmdXaMhX;IfW$BtKD
%<ZL.2%DQ6W0K!t/@:QYcbC>^-36,gl@;h$*L%AWieirOO/lOfJpXjX-FBrleQl(]`Um?OgX4:_;.1`KnjT`M][I7TPf8(5WbS9_3
%@>;^$J0_6/U/b\2`+3R0#Vn5!OT4tKC;es<mIR3jIk>d_"$Q*/n@9TM85^1&`_K'M4,P(2f<\"OkYT9IkWrI2LjE2/1"BLh<9gIP
%8T>;,ULF'IlalCK*ROfL>neLM;5_>KV]9lnMP8@$93o))'id^uA_%^BQ<W]0$&:(WgRNV,@nM7r1+a(_U@u&/c#Q:Vjni@'2)=]P
%;'RR&`-*n!s$/S60K#u`cd8LY:!D%a:MQ#$.ot\=fuNt08ogO6!97d8Wm1%?HmmeQp24EU];p>?N^>'A+8f)4/IVf/1q%$GU7BM+
%.6;(3p\ElT<![Rik.-31X?PKE@m.lm&f"hD4ZW4U8ERaim-$C%-aq*bFD"k01,4hXn[fY,B;hJf4:A^K_TDPLR*u5MB1Lm,lrbXd
%HZ>rC?Df;QSc\qL[kFdiPiFKtqedCXWu\.t[;S%_^/dHE3I!0qh"IXb-Uek@:V8u-!1XXllD5lY^DWg(j$s%4ZR,ppUE\E5`0Q%$
%Yh#";#bcOdJ7e)d#b;EmqQ_,G#L'N7$)lde.5&<7K8$&$<=lQ+29o,uK*:I%-r23cBE/aS*h]kTcUH>-D:308qFD'T^_6!ko%&0f
%'>\n_n)dhpI^U8$(ho;^Q\()])_,^!T!h%W`>*HO%CN+o*%'6fg6s!l@bg3#_*2SmKa"DZES9tBrbPcqC4A$'^H!g9iX9JJf2.FD
%`:1Q(Fsgekb#FLbI&]1('FUrX+$Ighk^RmiWGuX,$+r_.GbZeeO_4+3M"WDMUg#I:E6O*9:.+9-k'<cf+c!#QpPp,c2NC>eA.YPb
%SKG[6m/4puk6:BfQt]hI`%-tS^)0:W/qi!ALrP`oPCO.*Ic6KQnrG0,FtVS=7$#A[`4_6PL:$bL3l%`)\)N><QU+!Npl+Q5j!X?X
%fE[S>)d?S2HhfP5ifunTp2ajU@Fgd%Uf!:h:.R[AV%FJR$Pe<8/Kq4D'(%@FnPkL.)!a,EimV8Z\,80Yp%LiRoj9QJ?T`l,Ss0u#
%d"R,nO!p&#[<WP+5534$p\99ij?b&"rXA0fLe+67m?EioM$$\4-I.Xc*eQk]??oI"s3G<tSaf$KrGja'5Eb)^<Su0oGE>[Og"\Su
%!Bj4eF([..ZoJ"9ko\L]c9ZDnqRX3=9F,pg+A\LG&VD^9lR4X0<Zk]$_%<Q6jZ7.Z1TYGkSpk\4=#Z*^2XCjB\nH3,OjpAIKr!@<
%.rKMOKe*shiD0oPSiTa%`LM<]o3e,hqCZe/W$@YO?.?ReqE_^:A[c]RAEC+aY+Onl^eremI5H,<3r'N\g^j.7^E07iF3EU5Ll_H:
%=Uik&;%h@>mgO/5<)c[+Za&I9)XT/UGc.n:iEMKEn"V:.IK\LsX\_sXOt1@DEh\q'7/QLtq%sYT%*u&Ii8t>D1_[p!Cu-gB[Dl((
%E%Y/"!@oH<]&ePtPFtU<V-M^V:,YkXTGiDe2U^#^>#37f-1UJg9&3)nTY,^9hct"?U?@SK5^E*(2eN1u(lA<X@EJ`8imdC+-3TVR
%-*jk;_gQRmdS%/&YdIEA,)h2^.lO34lMgEGeGV&OljqA+qr9`*(H7j]%=H\E*\)XBYQh)`:LN.;m/5iu*O4)l7"-IKAO8^'54+u`
%+*/9@PHglDMQ`Ss7s3F(kgHB_"F6GFV/)OnipDYk0L%%p?X!h*Gcba>_me]5(cjliAbh/qGiC2h9Nb4Web"\Y!UGsU*s>87`Hsas
%d*DEa0b0$M6,W9gm!+A];!Us;\!iZek>hC45#QG.phMJ\-;*m5S..]iaHRdS$C0WKC11$elOe=1T6EpT79#GK"cY"Gb`i+b]#`hY
%oijHX>/X8T+V?n(a$djj.QS;T'H$T2OqXeXiM(il6E:MQcXdJVFCgR"[&q)uB&QDf#(Q/[ZP?iDG0RT,/+=pd`]8kJ+@;MQ4":gX
%gOb&Zhb:6EcQPuNr/@cQ2$aPerE;(^2>GS`h_$f/$n'b+@R5F%UKat`,=LN2(6\+#Q'gV#SD3"PR:jK8Qk\m?>n#7c/c[Da1^0@]
%M3<%bJM\9:XZ;=PogY6@r5Bk>;:%cH'%IsEmK5WTp(cU>G=(ns**q$JU3Z<7kLIoaCt5+2l+0?SK$.uPZ$Esmj(*XPSt_]WJ^Jep
%c"e&Cp`NH1XO-6Df#1][#ru;`6H%cYK']9sinPV$6BS(B7mLbLGFGob;p0;S4HQorc4>_7igO%t44WgfS4i?CcY5k*.]S-(r3MHt
%8lm\%8.G5.do/5Lg8U068N3m?)=Khf8:2-r"QEG9WM3,L-0Rtmq?I\I4HWV"71:(!35\8\BQVJGX:B/3>)7:j@SFO'ot`GZV``Ri
%TX^H?(,;BV2U;Vk/-+g0o':;jpi0V+J>jI\TOic/JDn+oZLR-qVKoA^=;j.1qM3pC*,:BLg]ERij_UeIZXSl/0,<"RXFluDThu7s
%#fYPOK]o]56QQl,9iem,Es["#EE2^Rj4a@Kk2L)#>G6<,jb`'@1fD\;&:/<.b4\a-A\q(077BrAY*X&qZZ8RjMQ(:J4k<bQXOn3U
%cc+(*[8G%ZkY^4Xg+),Kh_O9b9":t?Y3%+XC48;aJ'GRE:8I5<jg203JfKl[Z<gY,M1&Cr!o;q+h=j3I*=!VN*M`ace*Mk>E-M^$
%'8E]ID56@adPts=U=CETj\22AQ930$%u94p%V6cKgcr6"f4I5'WgE2h&Df(TI:l]`hV\6+#p6<];L7o1B]@<<o[UfFVaUn\Z%0Ba
%NI;4&n0L(Rk3_"]@`N9T7#A:<)I>b`';N.hSk/"FedYrL^V/kT=g8p0YS!1=<9ljZC%7\pZqQYSF$7,p%,q.oV&B[kiHbH=U\/Po
%h<01\HWBtbAcMR&#*U0F+!$^6>2%Z][b;=:29'_u]oc9"X>iMaTH8kW66^8%rj+le*V@i8YlbP$lhe!NMYKH"VddN#s2FuRPjt=F
%RJeqJHjF,!l";S,\]-eR._B-QAi4FUI-r;u]Hpp@T<]fbJL5i4ApscO)-aA.9\T%"D^jacM,X?!iXr`COGftCRBID"/42:J8Bb6A
%N=pIYSK_f1-:o%sS2Xo];Wl0`,CHM2YF8D0R5@@@"G9Soj4pS4`Ji*IHG&Y:`XuU!/@W#QdN<+ikVQhaM2J2.6^UXj5%KYgfMq5p
%N0`Hg!j^T-CLk)b?,4t_PNcSi3V;CmU5e(]AAM-IY@f0/ddU6g>`pY`#c\/fc2Pp#iqGpT\pELpn#+[e$@Y,J^CpnH%e:uV'QlRZ
%pOU144S.k4%&*G`]u,J+?1V2#$mRV%&;KTOGgo9eJU.1QOb>%GrdKpOB\qBJ4mJ=qrSg1h?L3-jrUTEknHfQmoK([?*"#fJ)E:&]
%5kgTo](mUsI\$,Xe$ZBH_(Qk;hnIBuKE=i2rjZc.^+:<_^SQJVcr7U0rM]WhjWXGp8>GqNB&-csp7_(8[QMrr*hg.-n-h`)J4]Hr
%!;Tpn/BeYT7PeBmNuE+<eW&`.O$kq0@!TC<K4RMAi;KU0jQRI&_Y_<tUE2)gp)BXec/Wr(J,--HD?VM/$cU!E05GR+kAPcuI]06r
%DK70jM%IUp[gC052CaU`\84An/0;46nbj!WH*?h8a/cuR_EWVtq8SAeKG?2cLmAc7a'1UAl:J]Y^5Ks'q!A3_79qUg/YoMlg/duF
%bY@6a0oTU=[+FSG*F0(L*;sZFi+oTAE>d7^#iBV$+T%nIjAW_D0!X"&U!FM.boUUh=3T"1M(RId"LL_2%GZ7>JeF(fT<tLDJ\cCt
%([nd'4)D1r3gRb%1!?0)5JC;L$K`RSb]AJ+>:ZiQ":5t;L:iDU=iVh7d:oGA:]rboNC]^Y!g9kX`)0\]<;UCm2n,oi$LPU*TA!p"
%G;SGmYMfm@niOEV&ML6<d6*h^@`0h$qtsb95^`q2>80CZXWd5a<Iur"DA6d1I"F@I[Kb;95rqTU-q3I7^)Rq]C70TYg,^D5?$>SX
%cq\^\Q&kTA_lq,>LIQ@8#]fA&)o>Fc<^M6@g"jnN.UqQ.'?8hQ4'JLs.9)N&$?<^QTXC9s,,cqK`#@9#Y^!96LaYRT+\WaL8B`e<
%kb?jP\r.*669=-.I>eGEgds?65!\<(PGXWiVDTDIb25a`:nfEfZtRspY4=Dg(VFTW4oKZ[N$'i&,1Wq.#`:I;6u$sK18G",3U`HA
%:K)m\d2"QV/t]g7r,*X+O/)>[]7gOb&Bm[I(%-V'!pb7tl<:K8b$=h#.;9(pqMJ!=8AjU`/gWW)S+;L4C!Y\aD4)Gh[tlQgI0XV#
%nmUbAmhU+0I[Aou5^)#^?(_,qUaA49*"`Y?YI>I+dV5Y<rV`X2*<KLCrqQ=Fp)tSXP=XD,#%(F667&#94N(H`ZJ$+<QMZh\k/b1/
%hl&iMYaga--f%,k.okf7\R&g?*e(#+_=up3Wp&Dq^['/EeMtDOOndbK7]7dB:g#uP;pj!=gl,_UJJG8is.8WUm=*6/VN7OOF6YrR
%AU1s;N."6u]Y*ruVG\W6))Qhm>b]eh!oesmFO,;QCB8`YVnC@`i*UnA(<+j53P1gGG;K"QWNcA$L/Bsgo?Q`FdZ4,k0i!0Pq>%!F
%&pjlKI^"H1l>80J[(7b073pjln*\qV/30p"h@8[5oS\78!2].5;4cj'!XfhjFr]/n;_T$t,U1^%5Vb1Yhl#%:=._\4_n#He9E5*&
%n#8?J[D1J1XsLFhA7uh!H6?,+isJ=3dOT-t?IsSAcO>_@oFOZjkj#ig]Mh2DRdn+@'9O8i\kn0?SL"$U;!N>D*mOIJ0oNIR?jGFH
%Y%T?XZDl(RWm`O(AOeARj-#kjml#&c]cV`*o8.sI)F%)3T/b<^3*A5f`UA5#p?KNDN,j9lGckq_M[ksWJGu>i<(Uit0OuN?LJ(\`
%3s5&Ao\=3N-\K!4]4_pkWM(G"79)3dU.b^DhianAX5S0L$(Nq2(S^#`D6Q6fl:_Wi.[lgYHe7%jD^[=9YrhF6IbbA)moS6):"=2&
%d>2kJh6Qp`"Z5;L3^*[sKN<CU!l#n.=Dt:l*Mh)P2ifil51H9[d*XKkSW/aOlA(tj]XY:e#"Uh/PR)N"P*@7J?L^oelW-.'6dXkl
%fb*!YB"B*l+@M=m%*R.ZM+r19&f(N\juJ9-RJ(:fARs>CeQPabBg>R(lcB/OSX1*??HujDE1P!b6$dkg6TrdM#EdCQn0Z6"6^2dY
%?WS+)8e"Y3A.3MoZkK6!eFZ"qcQ2amm7oFrrBP[2gj9IrSMJp=qR[u4M^ZCW-6X="WEX6F^+4as&9k,>"D'Wh;mM,=MprAA:2WX:
%GBgVe05$(9$Z<SE<H]?2`%\G0Y$ss)9(bYnm'cJ_>&1Bm`c,f0\Ds;D9F!g)Nc\7R3iuBj(oSkJ!dI3mT5)&9/$kG-E<a3%LhY9j
%eb*$qcTXb_Cm!AM_mkp"UoC%!P(!b8"OTg&:0]('NG*iujIuTJr-%g#/3!Y]@L-r7Oi>SWK2.H/?bjMY.g^E0U42KU,FT6TP]WhO
%pY"91cs:WnP*"JZH>kX!'DWiQ:K&c$HJr:S+*.YCq(bR]3+a76p_Z;[1"?HI6Z<n8im;[r*>`Z>Y[AD%]=ak2IqG+X/9^8qYLoLJ
%g4U+h="8YY&g%rtrj_Jfc<&h=^iZdmdY%WN&PIUg*25]c_BNI[)%oi/]HZHINCL.3;H<L44j\Z+&iXB>,MKr]#c^Fj<[D/U6(i'#
%.t<Nt<aN@5Qd\6E[H;p-3Y/hNB-[en13SL[Ph/HWHe:n:4OC+`>(PIr<e(aTB,T0o7N^Q=7gdA@^1O2['?AHLBTiO/q'OOjH\F6q
%9\_&+.3Jm*g%'CICsc,h7(^]]h0H!m#6T#Zp4R5<UEbm2qjj*8o<aL.L(p:Il.k!'alYPiW.nQI.CQH`S$,.[0$Hje47XjHnAugg
%?q7<8\:*W_?@5G)gW*"8'`eD[-c5']C%Wls?3gQsdVCZeUFPAeZk`>/U0.tE.4Nu\>^V:nHNZ+B5f@XT8\pC!($?5tU;`+$=oE'=
%leK<4e7d%S2;bnInPIb@-Qi^JiB&0IQ'+)GJn?o$1q?,/H@lsV5Y^d?3`@Xi9Q\<=]MUNYMDpu#"#2c3.LMF#Tk^_eptWmo:>lmM
%TBu!['>s8I+>4(A1q2U9e6r&:5Nd?oAmAZY0S8mKbCFKDq3)S'<BS]n5Db61>?]n2;7:-e]Pp[m8-^nZdj/pj7``JA+:U-b.HA.I
%D.g%THo,itUEhnt83Fs4:Kk2)q%dN"Y3./=TGK.KIDgm__hC,h_%`E^H)/>2@t31ahbA?50Rc]q63c@f_b/RFo`c)b?;o&',VSM'
%UIEn'm?jCI;[o@7$bm-:;)ANpalqkegie0*O^Ci10sG5PUOhUIBL6S]79))#AsX/hYn,%=7FM_DVC>u;#B0.b-[MON;CBmZ]EDlc
%,E;WrbW:M<W+Kn.C;DdCb!;h-8D[I1LIMJ+N\,)nJB3j?(I_(gpI7.b5e\'3.$9Vsjrg)"eas+i'h-XZ_:<D9A<_!pIYkNuc$rR:
%0=ILN\D_L=Yh-/-]3f/do_-E%+u<L;!F*H'I<UdN)Bp8CSJIsk.V&+/G^5jr5MX5n)('MtYce5]Z2bE=j-6b2rhjc@+u?41b8F,U
%/E$G=*`]FWcVWaY_)!T[:-egVN^./2fb.Zq%X/)SQ%#P2J)I;>pP4GJ5FP,qXf"#Xa!roEPA8/Kf7Ap_.70i05)u&jUDS%]fl<BG
%&2APH=]&R1MM>jc](2?s$HL!q3:sU2=>\$p+Liq0JOtDKW#!`-^)?1k4Trf^`Ll[+JBQGJ^sNH+6GJ=&k>O&`=RdruZ7d8*Nn6>s
%bY+oTVr#"1Uqh28eU%pE+$Y!0R1RI_<'HJe=S_B+]GJFY@Vmrg!Gi(Zab=9"9[mYed=Jj"i%Zi2ke)A3D%Po9Q/ln8VJdG[@.6]L
%'uj4,/'lCbiR1@c-*N-jDl8!*'X]\OB?/!s1QDXtm\S63ESW8OE&-Ou;&N_top+1)[-9pjS!KD7)@?4l.c"JV[.#Qa`2YfjZ!;8d
%&`&gT!0SB#9H^s('tss1K-:"8J@+5UZNGGXWqk%MI+Y1l\9K&'-5&P:=pr<n=K\k9(rp?lq)%YZLTf1J>@J._QFS$2;TTfA"[E6L
%)V#Ridt$RuM#+?q&:#KcN\k;/,HodAE5tX,@-=Dm$Y(PN"9g@T>\9$(SIWHY"7tP,1IP`.=!7hm(>besHQS#B3j^`YE!t@XndM,(
%1J\.e\0(stNqTN\8Xb)*hf8FJQ0>$c`!?XESQS2"!1aGoXVLt].MK]loJ>]ahF8'W5+?R)#\D?]lSh51Y"k$h+u#Tj+EFn]Ps[eT
%V%),-5;-,T/AMIFB)$Zq@l.HJJ<oF=!5+@1h]s9uZXOr\9pQe[F8T7___0f`M9@>IM<(:7b_c`VJq#Sq.3qLaNO"??XOU0?ehlFT
%55\WgcK)7[2SGeo9ro:E3n*e\!#<.)\T`Eu!Dg)h'G>cBDeR>`-dX;d]\)nEIe<Vgq7k6!?n(5[70kdfo6_YpKGkKA_/VZOOK]>"
%"@dbJlt(9(A&BK!8aRZPc%QVJYV7/gFjXI:"pn"<8m"r?NesSp&o4gD'h-;bWs^C,nqeca#TjqlZS.pHOS?2s+0O\2pBQ/-m)_Ql
%8EB:+J\-9l^k(%;;V"^nbuK_liE%_Tk7A!j"B-tB5r1iNYDbBJ?-H!j9o]Es_S.5_B<e7Fea+?ccOB1.!^OB$<:PBsg%@K)s'X&7
%D'8t3)CS@O3!AkTOkrcJll9PL]uaeIYMIHL[>R`_Ad8Ar/>^9n!.b*l5%3)n,`Vr'L:aEdkoNM,'FYtaR;Q!+>#]u7&\*=+810p"
%Qj=#W0:L,6SOBm;'p_*r_pK%n(P+2_;/p"HJ.dFQ=l"`4eJdX8Ls!>KZj$AE,<GC'r=p!H7&Cp)H:0!t*hr0i/KNi.(&KGa1`tuP
%I7O9'X7S&`:4;-m:BYJ:=O:;7GQS'cd3m`Ic+/oKMkh#j85,IpXn0Scjgh%;8LKJ\(9L=q4=C=n)rQIk#i6;]P/4I01=r"nhXGrH
%OC-ccqacZZXM_l;l](VT^l4e$Q-&5UHXflV.?Di*,+Z9Yq`k#=5K+Q.fem6,0Jufq:QC8s#,lIW91aY+(^a/*m6)>*bn`HR^]O`-
%;%<W8UF3.=T?$N92?*Dc#hHdO:FS^!Oa6c++)bKB$8/`A#b\1LRrNPT-k0?V1l.t0Z7igG$==qpgo+S0*tI#b8$7X3'*AN4`4UrC
%U;tNm!lNgp^BeC,ViZ:D/0H>6?oD.)6/lQ,qGS%h="Hc#3R`_kUM!PDp]2t^\*U[k8FlmJGK>+"pMkl%ZN-Y'@6Mak6s')eR(+!A
%KS7!mInhL.H/k1nb:/0c2%gh)Z5YJ6h?]S=`#OYEQSAsjD1r[MLi:d[*t*EK:3FJj$+gWHGT?LG&r\UP3$(PmE8s`%]LCO[W2:L]
%Hm(=eU#kUVGjb2.m#NWDUFEd23scE<[X4_$'XM$B[KP"Ta3p)OVM8RtVPAG.Qk[2LDFk0j(AMa?_"Jqaoimu..Dmq.L]@To@n)WU
%;[>?0Sq`24TS]st8Oc@9%!NJLCo8!GfG\9X7-k1bd<K7Za&1)-hFj\=Wa!Y-D:=di63E2U2:)NR]I@R_gpD7-Q2'.P6l:0c5u+/5
%S*USqTPtB-aN8,nO"Lb>"G431XfQTdAt7ap^(HtC_F4/EA5-J)CD*tASVNnn#lphRbSYFEC2h@fh-JZG6qEVkfs!=XncQ88Uj3$;
%p?<WTKUuRD7O`52(]p83h(:mfVRRB3Z%/o'&T<8i@8CEhnE!II;0I;U&!c`_LX/.V"`8![DjHLY1h0`^(G_FfC4]+\0VAc@m=PQ0
%hQ:VVRb>[`OH91^jimB@S03M.771SRq[+)s>a#l*/'U'Ci.Bl&1lgl>l3"gU>IVDiJ`W./qDJi1G2Ad".C^KG$FM3?:mIbQRcrm5
%bD2Tt(<o*W$6QUpJCQ>F4(e^lJ1ZeVJt;U%2:i1_rr$^roK<HsBNHcp^*1]M6)p7CIUb_%/4j.XPp&.!?#l]^D?XMG!m$%<asDoJ
%[([?!U[`o:ZU&*]&BG9(`mFqPYt^_r@=edmi;hkb(2/\87Oj3^\GZsT#(Rad,nA_S5l*+kPb_AJ1UuC8)F#YW1^0:je!T16?B"Tp
%C^BlDUc8+`3*p%LiA;mb^dpd@a!H)5nM(b!<HuB^95_hPWnMuBY]LFq*FgY786\)=eGmEpHM4`Rnr?m1k.Pu&lV6iH+f%L6%['^`
%"N$bEL)'u_*Re+XE0j"r4/8:h<Gd\jTe)YiN=rj-^BW:&i%<,DlE/dp!@>4=_cTWMYc*.5FUL]O_+*@"K\sdK0sW<T2,iDP&tF9Q
%_MA:>1[0g>Li.4Zn@aoq8MQ_^O["N7MI=o5BO7rT1gNO`FC)i(E-tK+fTliV/@B)cJc'"q5m42[Q%IS#m@j4q%asrE!sjm[7BDA.
%$.W@#)/7jGN-u$#%SJmL:<Z^<rh=\>F0D=2f_1/FK?Tku`_!;$r9Vt?`Nkmn5qhj1F>h%@<H4:XM'ZcQ'K7rAe.e_#[(2jU:P'nV
%ND=pA(B&L^%QeTaY`<2JS&Y(3N^QW`2#]%18EB%RW6[:6#!!$kpMcA[dn#+<.1@u:';fS3.:sWTQJ!6NNQRXG,R:n[n\]qQ&uD(n
%at1DDkkUfI1Qrq?KI@&Oi#WNZ4=*L)&MooaSrADfq_]M3huZ`lbo^%L7+6p%-Jb'7bl[C48aYY$`.^`5<%r4$@_VLm4i]Z&VMh,/
%PI5LJY<#!OmcGr:8TkX1CV;mU.b(.C/pam+%/kQ@H'*?0QJOdl!<0uE2j_A-pne-q'%BTj98UV_e"$Y'VMg.sQ_E"JL(Hjhb*P`7
%)N'Gf9`gN>Cb.FDcJ/_[Hm4o9QXO_TBhk]0d<\D/5&DS9RJ/s&MQ$7An?Op[,W-$JV]N@Y*SV9Dr-"a_47#kTgnh%iOm8W.guVQq
%G$QB]1rS^hQ+_oBpYkl&^981AWYk@A4F8eLB87Au:g'&UXHR-'@(IPSM!?XuD]a]94Bq5_3P,e?B04kH=M5+m#b]tXJ6NGg[)XO?
%M:3<)M4,dJMO%T"<fu5ghh]se=>E-$9s,_XJS"X;4`8LI+[g`K"3Q_Pk#q;0I1=0Wj@E,)#9t^U5)ENp7Iik0c+L2<p,bM@#D2eK
%_&I:Z14r_Nc8[bY8=rQ'r7$S'KdRR^q`[984H=.NbNK?IfFX*kQukcQ,)\l*(IC[B*^-5@)\p.sRuFq;=T\o7$:[fV#E6)jRAnh=
%Km(rK7)p:b.t^Z8$cugEC`=#2i')Cb"L/c3dT43Z/#1F@,a!V)X/PuB_/UZ4+#rqLK`sRd_$%2ii`GM"@(c[J[PK(!e3<NK",7Ao
%9OLPfq3Ar0&.bE$!;YZ7Vq$Io.>"1q5T31DZ"e8gkuGSH.+n23iildgq0Fk]_"@GUO>(>M'TB+9&E&p#H=IOR;ae/t=l6LZ;2j(_
%(F9+Z7e'?h3]L;_H/h?Yq6%ZU3WoVpW!+@omQEZ.HlQWE2X"d5\fR1KP:-,X*0.Z>dH>Ml)D;a#-3V-#6o]La![2o6*7'im%Xh"U
%5]>nP.j>Zd*QG5b+R.<u6+0PAi'mJ@U*>/l!%85IFi^Z8_AYWGp*n?ol7%Epq6&_U3b/5:)TcQ@[2&Jlf>I8m-H/7$d/#nC_P@0&
%^-D0*]R2MU4Z*^Fk7HG+K?-8]dZLYp%-qN^%+lRP"NR#Ln5&\-,J2>B:hA/nYtVO2"]POeMss[06@a&B6,C(DBLHo_KaX3G]6NFI
%-de_qmLHBf*9B&L&p0>0;Y\SM4sFc>)e+`G7GSiFMSdQ^8R++$/)ngbCDf4-etPstnXX4`HT]bqJ*r`=>T-e.A>o]&;71C4eIg^H
%ZE&1"96`9LRYs;u9*M!?dngDHY!Y@>EQY-9b8&_9D1bn)QikG(+EW4Qb!C[SolU3F-h@u[0Hg<,9Dbd,3b*e<!?rB3<l)nE]CB,e
%]RbYC_QH5r7Y*7/.abU6hSQEf@p[1eiPSl.g2nRa$piB@b-Ju6hW=,\]@K>8rBmRRAJbdqb^naNXZ<AUKV1L7:JnLGhE[=CVREHk
%b'JGt3%u=U&R!ea8cTd(^'qiZXT\(bPM^c/Q^(QB$3cHjYrnVu/qkX=MuT.o[MK,gJ^ucOK,Li0'8be$"2A[K=9,$>57N>ah%\<X
%#K)8"`s?KIJ-0b)17VHsO+L]/[nf0L-bnjDP@/X!n>_+=$Zi_@K'E>Rs/HrK(=-&f(^6g@.r9.r#Mf]+AnMtF=HUd89,K,dW2r*L
%;l>$J3umZ17!Q9cnY_pE8Co-F&)^DYku#jC>m-T"0G0[PfEnj>ZjF6G&UUOG>M7+FOXag2Q#q+.#Q)<eg](f$''`#L\bj?F.Qm6(
%B%om+>M<8Ifm&mq6_Xa-?lGj\adnmR.,Vo\cbpj,8>[%Vkr8_P6<`#lf:I`\IA$AiO&Pt+Y_kYT^&tX'FQk):qsT1FWIgJZ!%*h_
%ES+i;(GKbpkcX+NA#9mm*@h*m-RArP!V1D7k0X?bId_ds9AG8qh'u#6CgP)eG9Z\U<ZC%1pHF=siHp0!BaC0E`',M?n(pg#Ihp1T
%VmfV=1Xe[aY='h@#ag:gVM[5n)$)EX?aK,@>8Q_PE1Ytdb/>a"4&Y%Y$9/euZcuDqX$6.^]tUtMlO-FN:S_'[7=u%"8fYd2W]fI.
%FuCbG.T*(Lb<Er2Wrhm5#G_Jt[>BN$F<A[2h-j1Uf4nS(eKb3A$s?f0lhm50LfT'']SiRkoFYc77Sp0AHCb93Q5PpjU-!8o#Y/QS
%b\e]77H^p<h^_=eq."@W.-`tP"eW0((nuJ*gLV"f_H!E8EC2reeWin%4/>Y=Kt[C*43k"&B$sUK$.1Eu^AM0)h)e#'BSHX]-Hd+C
%UEDVm6;etq:s.$k8$!_HO514TR3G?5QQt)]/);`,31<,9hC>CrLST%@^8Td$U'a`UQj,tu#%p]TJtZZg66M]FjJ-hu;=@L3T;Wn_
%fdfu1g[KYWLk40%O=<:kecVI,ql$cBS$O.A6T`.\j@J_U;P>!f9+[q.S;0NCQ#J:/cpTBG93Nj(OGFX/(07M$=Gr.06IZ@3F<JFS
%^(Oi9+>#+>UBGZn!?ClU3=-[OZaWo.Als+V1;hEi.gnF>h:WLMAuKFnAQ+gue4Vpf9P4?u9#*H`Le[:K[2kbPK_'kQ1W/rF-;]S]
%dY,A?)i]78M26jVe\r(S-#6eC6bG*E*0IP3in(K@hr>pu-ZecnOk0W^A#>,EET4(ME"j=@hD4'/(iC#-"`m!M8FfcdoI>=6U]"k0
%4T!@?l-7]\5'=bN\<Bl`ohu3[C+)&&AC;Z9:Q3TC##5=pbauP88<Dp'8QKKD50dMFI5kLKA3aJcZ,.$k82SO8_H(\].BK)/!m9:[
%7^7+UGn]9tH2:iD1./FId6\&2D38085(#7E$Aul&bT;FO4'T"2Hpn),54%qV=,de/d)bUECM<=Fbc)eg:lraqbt1%POD0R8::F+T
%./Y\q$#jJiE>?IZ`8mSiepus(kFsp_Z#1;mLosr#*;@qq/(!m*<bJ?kMJ11cW1Ti0NqLquGlDuDSr4X[InrN)XulW28i>>!KgAP:
%W*4!^U_T9N#c5n]<m*$/Y=LGX4jlee7&"lBH$akTK928udKr*Nc6d]o6I^j4NsVN)(nK2k`lo%>'lTXACcoa/'gHi.m";B['\-+)
%H#M(d%OlhHa^W$DDcdch`\Kpn#8c6/ll@PmHKBj7,Xm]o);F+"8Y*8J\<kQcP1&^:B_5:Gkl&m/I@7dHG^N,A3DeOOGtPUfaU!HR
%U`-%`)BgU))b=H;(Xh*KdkIrW1dYutI^G9YHQ^.GX*^`H-UgH.0.`Y43bL8Ubg,8c7&(Ob;W1Lb0-MZQ?a;D+CXZgc<?;=tZBMqS
%0m".lI>"=a:u??&XZ>BHA2nQi,ETn+XCM5r='&"BIVU5<"?KB>!Yp)U/XB:V8pht0iZM1J`X/GIC,f`=LC?R[&Cn7Y!EHWS<(SfG
%R*`7He48iNR,=ARH.9/eBZ8>B(_*+IJ2NLJRt\o&[m=Rm$NEkC=($Io*[?kM'X:e+dX*aS9Q@m-V]X9O?V%30RoY"S^q;8U93kgP
%p%d2Y@-\/DH>GaPa.>rt<eT:L2Mo6qSr6!(;+\Y'cY=oMJbZon=bj$\!;*bshSpHskU+p4c1fZ!mgdQu+6EN@`AnSDJ*T1%DA^7A
%lDe.V/J5n&6niH>DcnR/3o6g6m$V*1W%BA&5Qli!4B)Q3/CaXiKTb3Dm./h9qkjp:+J0k_13P]=H,p81$45!b>?j+rfUtXl,13XV
%#+&HnC>b#;osCu/(S\nd)an33$+W$]F$fb*jMhaaiA><*U&c'\01VdmU(mp]1)@NujqoW>,Ofc=Ycc]?kUq<q)#5JZK)l*M/u4YX
%@@pf+fnLWQJi2M@Sk3]fQS<bQQVt]N,NB]F,"iA5'c#PRDW2;&?4aOl],@RV/i<TAKYCE/"\/[fJ@V2^UGWkh2Am9JLud)GEs@<j
%D,Z!AQoeQoOV#&o,G81RT*oYGmA8WHjh,m0iEn)!J;S(\gDGlaMh/3WHdSUF!C[D(<ROC)-.o!(!lf'.aj[$fgBRmbmG;TY>G)2_
%*\a$WWD`BtdPTO2IB$hIdRo:K&77eO,3s%$55F1[U8$0o.RRnD'uk)`hMFidjQL1[8J`_irVnh(GQm]&82?QS!5FP,Kg8.(.;_S/
%_^[,AL:ig<$:0RGR:^>nB/"')[N-Y/CI47YZ]35;>EcLI0XBAW$Y^-0eb`'P\6:(rH;_,%\[$u$J:"Q7M>W>k6S/Ap,<H=o#KY8N
%)9`W5N+A#:T;$uc(*#bu/hSB7aLBIQS&kqQA,V]>_A.eQR9_70N)PtNYY>FuL3<T8&C\%3:s3:GWg$"smA]g"j7=SpXLYpInO<h>
%650S1qp86$:C_op#$=h7/K$g0Ws;*l%n<7@6u9Q(54TKrY,@i)]AJ:9EdB=$X<nQ,&\tJRN6>=+qu`n3=cAe^Q4X)tm_IC@nr;BU
%aW;U?@u21(JK/"([O9E#9jBRoKq0d2*sU[+:`lkQO>@F`7lh`lE05\HH?aus'US0Y$,R8eJ@G;H(DFEDDCKfV^>5X2Y6O/_pfLuY
%bNqom,CHS&>?_nAq$gVm&M]`SJk!W*KSu*i#-7;a':4fl$CGib-mcJs\)_'j6RX;eMX`;n/1=uMKZHhp!)$dH,Z[DQkG6:o*nE!I
%k)DkeN81:9U*M^0Eg5FmpIVc]OEOBj!jk\>mO#;.nWa\Din(%>;'hIi2bOnES&'5A9d+.FO0F<rCV-K^&Ze'i1J+?N=+-b8X7?"i
%Whtg]a5R_@QNk7[fN%4-5^eBb'[#[@B8Ptl,H'@Gn,6"3Z;F)^1>.%9:VTVi,/QOo,VlpD!ZJ)6nilJALc$?o3]&7m0X;'qLW[+B
%:g.I9PtV74d::[t;Y7r6N,e(A$AuC$V&NpFT?RSqX@[#VJne?db:72E+uG)%85e(l1"I1e$ZYsGAtD\L&@&j5V:V2Y7+nOE[]^bP
%HIb3]kt`Ou-%/C?`@hr*BS:hT/pq+I!/g$h1;EXictPk@Sn_WT.X4nU6;MP`%gp7N$l8O_SG69S=V_<:H,IC\H2M?]:dUob]cq"t
%h6qsLCF`$_$$Qe7d:&Bko=*K>OoUJ=ZBV4jle'2O6Gc')%71n#O=92jZR[t+H>t=ig;:UWn0Efcn1/e;E0k*d:W]4YqS4FS-&AoU
%5_amr'pZYZ7>h2Z($Ja:oVdBq$5Tq);3Zf<,tX1<CLgeNrR'QYhKK0'?o*r&/6Z<I,jar3?1=T`'?,U0>Ld3tBuDk71AG_OE^.N2
%"!$2o`:l71\)'T="F/j$T^;2QHjl20VefX-3D.rRPpd)cP*mJm/g<5>@"_9C&1K$)#ssMGIAPU&$g(G5!_C'=e93![j\Cn12C>jd
%S,f:"84t>)-osH>&9SK`M/;<KAme$1N"VkS4@ap3<\-#_7<25I$F\-IXRh/JZHWr(=)V4!jf$f#*`[7mH3%k"Vr3qN?b<5rABH@U
%9lhJV'$TsM*^+g]<oSV./^5uC+Bh]*9au[.qpUC2M?jj&])9jE\/!U_qWcb'`duM\9+>G6!^12RD\k=FV<B)Rp&XNhNqNg;`!la0
%GuWFBSTQSin9H%,9dC:m>E[23,gtiijU!(F3Wp=B9$pS8C^/n#U#-C*b`#Nm?K?6Vn'8du7L]f'gJBJs[mNZ8;@g0Ul?m"WW3>!H
%hBX>W,<Cc>46Cc*!-HkJgoKn>rUEMIb&Z)&LguA8KgXuQ&fb2Jm4!gh).&h]o$q[!hDn+6@F$Qjrb-DFg[ZX`:)A98nLXfnh^Ssp
%ASW6+#m)r'Za=M(c*2"/JZdnWV'\kG3^;Rp0V*iVIUE2O&?Rn#r$S2>UKqB/"*PiLZH9uNN__bNgHukH$QZ*p@FRl^M7\9Z!(`kZ
%Xk4:ph[n!WI`GUQ+/:#oGQ#rVjU)k*b[#Lq<sl=dKCRB8+TD!KbN?&UP"/pgl4TE+-6WG#,JZ5$C4b6[;$"`V#t>V3"l86#:@oPI
%OJ(Ou75lOEJ`([$?:(qhZ<LeW&asq0Bcs-n.W>ZQ'?t6\A(;oUq0qfSNpq*c+VY/._dHug('_u[XO`_Gh1<UoSG!'e'9NQnW\stA
%W)]=0g7ur,eU'XT()J$e@sSPo'ol!h,uVAc+'BJrWj&,KVlKILj2;.h$fOLY_6Rh]^B^"#/\;ugoLUV*8n--*CFdJZ.MOgF5gFsc
%&WaaVc0T;,2'2*c&C`b<(/!`eS=W.eKdo0s&Gtk:8jPZ-8r,)V#%Zc.F,rC^"rO!FPXt#7I/B_RIkp_X,)*o>s""ScMj]].8dN&[
%_t';lO5oke3M)Upc28sY3PeBT%$ieF&J-t#$Q<AFSCGE9L5P#]6fZ)o]-_?F*!XSp@]bh6ZA3^n:9u7i&mpt`$X+QsH"`r%=p(`a
%/h69_T_3@g#U[QJ=PdSD_o0%i5!OduXC*B.@<832=o=hJDAiP2h%8\X6,BX^O,!=T_le_0!]^T8-5ApN1FU4*/Z-D"H]#R<QVe&^
%/K)tN>\JJ=!,_n]I+O)"LV%Rc598u5O"\huQsM%n4N7B8BaNNkSVi\mff;kfaL3I+OL'l,C]*`3",^,']al6N"CkjG9Q1;2M=3Q*
%fMon+@0s$;0'p7@V>bdQD/W62CYI"NL7(Xri=J\Nn>2OcO%nBLZcY7%0rE/KIeuNa=!oE:G_bY<b:sB@EWYN0JpX;<]qDCV/]%ut
%>NdGCEfI<CdJ_2-e9Sl)Gh=0]+AW>0\kOWH_BH-bEoQHWL[_dr=P/?\QYE&n4'!*@,C[0KLWfi/$o.R#-XM8qPBn)Bp`arS,9Zpq
%60$l"r/n,ce(.)K=n-f$).XQkLTAtKq>LC2L[EEg%/.*;;tX9.<];(OlBX%F>:O68rRuEQOGn*-JU>7e545u<D8&j%8A03SR:,\E
%`sWa/AEX-;Z^.RD25[[/5PG)2*C!%6#*F/e>Bge>6n:]Qgh+up$ii;5d_VMaN>)j`Cq,jfRiXWLT)//sEGPaDkf:PNZlLs;/YA:g
%.H?B[0o,8CZ)U:U>]5:>-+P7`.rV'Xkb%GlqC!9dqo*1*[L6[7:A]n=U1F6'BIcNWoKc0%Wi7(g+\AjnRACFhOa.qOrr>7sD<k;X
%Xg>PW-A/BpoTm(6*`tshf:d>j-&#O=ns$CG5Si/q0$UY/O-``H(-sgfK><fgM\rV?)@+dh_gn#AKQu>e+8d/aate,YT@ITR"M4-^
%pE@+>'Y["0>Zh!GGB-!WS]F\1Qk-WlhW*^,_@b%W;ldCe!IHX4EL'S0ME71c";oCb>+:)WT7udUj1S.T.BUih4$ctW,1EYt""gS7
%<iH$HhdDhl^Xs:sq-"T?$<Ng(;@sN\0<5B%=L=cGHMgY/5t(_M6$Y*Tj%ij#O%/I'SYH@##fWK7Eem^naWK;c>Rd<bX&\c3QFq!d
%8QetXCdF;?8c)bKBH<TO2*t8`/0"gcq1<\h'"@]MU\&eorBE/3T<[`ZGU.H.jQ5LG("R%[H&#prbYXE.U26^13&`<1^l"!T#OUhK
%egfAs-o?\ke>j3!a?:p[M")oe7"?[<cMba5X2iB*3c[:0f3M1TaGAd@*6f1I1T<GMHfpdN`.]Wp\rC)q16HPW@N']tVrh9*[*lig
%W_#=<W;=Zjg6:/.!?.Cp8^-cZ"VE(9R,C<^nf)-ol0YBoo2r'^BlQ1u2:o1D3.9I\.$tX8-(5YU;E<TJ:@-ZbKp:_R.28h/0doZK
%pC`_RPn%ZDJ90qY;t(@;7*\1CTA*$"A@l7D+>(lEJt&S$_LC?7aD*W4Q>-1]QLDPNSYV-kVK=2X$h0/DfYmp//$Gu%IXUq>JWN^]
%'I(/@D]?65-8+?c=F$#Dl,::p9"]0Y"/+7Tb-<dq1/udB,qAKID""FEX]6,?UaT`N!mY/ZiZF0,Zc@[U99*]jc@man4%ZQfO>?bi
%MD(K?@J3[UfME'$F=)`rdQY#N<Idd"9Z5&_;2BW9WC?t<Z>k@>O(*Vc@`?@f+bPi$!>gOd.hpAtCGqtGc*eh8ONqoBD;DaYE(Jb,
%`&tOoNGW,mk1agN!#9:2:UTMY_<s%I"'SHT0sU@993:D+rXnH#X:h#J\8Y^DKohduq<_&AEW"kKg+(QD;>cQV&o2:D+K,GaX$kD^
%U2t\069:U&G=Q'TJ*nS]Xf;*+F1W?Fcb9#KW?;2hiKG5.QbD"qI@1L3W]:ljAI_QOe#YR#jrBDF1?aPFFT1'1jae0gC$U[&T8CA2
%D!:M;DuC"Fn<?6rIEX:ZW'N7^O=k[6H=,sFp]jCiah;VJiQAl/MQ0,Zd48">mRuC!E3A!"&WWqfOg%MaS#5m9TN)D[;iRYCEZ2Di
%:M[-[DaY?'-:GgA:Q4lTMOG#f*"%:sK<Y+<o4/t8"jtE1f<%mqnrKIPU#+[qS92n=WlEfd'LlM>$G<6W)d6tbG\+?MV"7D4R!g-X
%?6V*@O%8Rm/PYGmC#ue'<#\:WMhW8>R&D6>\8f_)-4]%N)#:2@RePtiT%CLNY_Z3)bIj$Wm6e(V4qX7#3PHlQQ5EERR"Z)G`L8NW
%e](g2U0MPKE7tm@]D@O@`_h[<gZ%KdX!WSnc;EAuRO1Zf#J/"$\R.2>JaFS,WSV_N+_NO!3Dg.elsq%,fb?SHo->VfFZe*?MOY6W
%X-tRhl/dUMcq(0tV1e&f0n&=DYBjL`+!=WMIUNp2UH+4a(a_+0YUH%c`E[LG+ilT"]7g;[g+>/X,L1O__goaO/)kirhn&O4F_qko
%XrmlOO]NT'2eInnZd5n6G2f?#k"nV-6L@k7oDI8flkM*Y,RGcOEF*L9+b`JNPkpCaObo!s\mA_-et+uUd\`:0gc*Pf>hiBk24EF4
%W'&qG:*%@l?(a7lc!bo8/O9GAC<C?qZmi'<\I_*5Mm&S;_<_a]lsa(D739;,Pq7kZYR$tdr>H>\L:fH(hoeQbn'-_ai*.r'8pBoi
%OtdkD,Ahr/@54nUKu`\A3fIg-Pgk!F\R"j0AU(&AhqHl+B;*`j,:?8-I01)o0u$<`b6n*rijt#a1Pc0-E&#e%VSr(17?@A[4%3>:
%Wuo`M`m'.DoR&eghpAjmcCD4DSTC]u!f'a&b$>PhDpRh.(ERb3XRr5R;,k,8=8C5EbhX;>,Y.SBH,-meTlT*[a#q(p4t5(kTdWc3
%MAl@Np/X3hM3=saJ1sTOGtLimW1E:nOedXVWhi\4L)L%e)rSU\"t)A+*[K^RKO\pECt'XDjVb@OGjopDe`9C[<Bjr425W7'(l7p>
%R%G[bq5J",P1Kt1TpRT+i0A[5jhXp&5H.@(052D/<*%NK<?n"Y%^GklR7*nP`[e9B(h)q:OQK:uN]Hdb6-AUqSn^u(-J0$":V`*i
%*;om!`bFel0Z<k)*`OqI[Z(=CA"@]Cn)V18\MaTb7)@-'YTa_Y(di4^G])Wk-G_4qqo>]G(K/2IA<Z(h]((YQGXAhbm@-g`-Iu.-
%B8.16p!H`ofBSYReBSN3"0Z4Q8_7R[?8?mq?>.s\r*7T\m24[5c;QL+cjRD;/s!r/!Pb'@?fI;Lmj0#0ZF\g64f6K6O><NB4_c3N
%GllpUgNi3qIm,N%E&"j_pR!OXqq%:b&Vih7b,p'[;Nh4kNo@C<3EV(U&hFTn5Fj!.]CK(*e&,50;S%&$Qn8<ZB"3ZA,[:PSN]?E,
%lWtRCn>$oh;WT/U4Gnr&jU\DeSu6C-YpKbWbr6g@KI-_9r^4&?9qM;G.#5]94b?YSh(MQ7L-^a08%BO48BetMj^X3SjGFV:mS=k:
%W(<Sa1M42;RF+bc?4@',/1/HCK:G;W2(-+Go!@uT1hU)hITH+%2tJP$'_ufSEioT&88^Io^m;=5V91_LXJ5!=EHgpH^(;NQ$XlH9
%<TnJ!LP84Xi#kPlbMQ/bs2H4P[/@NB;91[l^AlNGa8@3:ZaPRQneq7PLY4.K5,PX"ZanM3Oe`,MNiX<!;&PR-1L3V1cU@Mg/9``-
%@*dh:mE$q7'+@5S0=deZadB7sF]Nk70nc$YYemuT.Yk<l$&CE=a=t7i]gq4XJJQ5($iFK;'?J$S@o<<SP?F9iK$t[@Db^tU\]MBX
%CdI?#^e-/d/Vdq@5nqEiG3hinlqopM;4@O'I!Y[cEds,&nFr8*ia^A\E=a]fd@c71*i=pX_W]>qV%k,YFRX*G]:J<0-!r&%Ejls4
%2'c"UkUK$$N$IhQNqV:`Im5*Gl<DdcM(/ZG[rceM#>PT6HFh%R<02lY7=>rKH(@u!*#0BfKs-i/3)LC^iZ(;,H*Vp[(^\U]<.^YU
%O>.(T5km:!G3>ADg@eW`%]gKILT7T\'F/FLf?fl&(<X2#9c[Ph5E3$Th92!"?pmj0j2C_MKP!gl#-%DWMh]-c1"e;np1,9B(]e!Q
%E3=.@DJSj2B6'6X`Z?%`UK$dK3?"&A'5_Jk,?%6'ISaT3b[t3iL-jsURP`!l_qu*V%n,+63f4GkZN=1jS=#%J;ORD_M8C[p\d^IR
%HaaQD:f]KBG`R4WB2>3[F^bqooU%T<#n7I/SC:T(Q6j0)_9@A8">6HfR&VJ.h7&Mg'\?RL6E1@ne`QoW+H52hQ)3TN)!jOu>:QJ'
%Oc0=6M+@`<nF*I>#N3\*Vd#$&"Ai4*?DihsPC27)("J0nm0l:g*3(;u%f9kMP1AL<X.J<!K(_^bF(t#E<_.(_a-^+ZrKWghh\Y)F
%qa[b=T<`g#7Y@Vgp1`+E8q`:G5I))hTGWQr%gPI$`Yd\5#Z6+`p:9HT"&NG#kN9SAjS;\cD6]T9nJ<j%\LJ.(O^kTW8/P42+Bl2s
%CNNZmm@N:F)8E&.-(:b,fR+d@'1EjT\@gW+7lf*M^j%*+h>#^lfKKg^:?#.Se>#:JMIV.Zp[Mj'D8$@jmrbVhk"+T$alV/;=B3.E
%<p:K*A'4'-We$@HI$-9Dg"Sc(]3O`^<VB4O)D9i-@r1m,;/<MLP)f9anO!1@Ei]*"aB+^R4+O--(/np65&l;R(YM$XnC?n6[0rZq
%3pUXd54lPSi^(rgZ`Bt,MM:HRrGmgME>OJ16\]<3,/\i;Fr_6b?9edDNe;SS7u8sB%hCpDLk3CK9"Zo[oi,@?0hD@U'c2G$-3OT$
%5gVmV;^qC<-nQ^$+P::a&lSqaF#sOV6DZTc@W\u3Z"C4A*OI(Qr`XU`-RbHj=jA"@aY5C*;;[nhqW>o)-tJ\e2D4VXY%:'q?B)QZ
%@/)CoZX)(@aM[%1o:L+,o?Hb(p,O6G#g;;iQE>bgq:u,r)V`7@n2T%,!&uuhIE8DgOl6#?78ft%E=jPd*#Ch\0CZkugV"/D_df9D
%r(mu&k/H@3_2\1B'pmakGPoscc[5<ucG=GV.fba-Icn3?rUn>m2ui.(2o#7G+5X[+k&9.lrn[$\?[qsjlgMQr"-K1fk+BA5r@^CJ
%r9f?tJ,ACfYC._F(rp08lLKH%k"e5>jX5O3gm6,*I-7:)nEli3nA5/"qO9_LjTf.:Csbm#nF"X%T>!5@r:V63qU\6h]_Ulos8DED
%I/j'BW]tt0_pq2*r:ZU%^3TP:TE!6\5CN:sgN`LCel=B;q=4-mr8m%tn0'I"H[5A!s7u45/tBMR>Q40S[sr_qqRce(o'Z04IeEkr
%!#NiG@mYXC,\bN.U*RYiU?9[B012XBMmt0d(EZ2ZW[TQ2"o&,BkWTQTGml/J4#3*r^EkRI-7n*dgp1@k-=r$sJ-'&epJ)<-R+H)e
%M]Am]:QVR%3UY'o=G-fi9,'.Pq(PtqETdqPgW))4NPf\^Mhlb(]m0F/#fhi.6@Ja=/2X_,)@r)-:t*`2^!.g%>utN]SBFMJ`G5I8
%ANb:e91b*(^$K2Z081<;YcdDB3LJR@p#TT@buS'7iFmh,4uJW:`,K>Y:?6IY-$$!)`J?iAHPmVe.T,9D3MsH5-t7KeW-Fg/mtaiS
%Pb,eh:e5G713?!j-T([%n*_=N(]SG*j59mAs0#qMHh$[olgMRal4EmiT3hNmp&FgTjYt4Tn>j>$oCjnfI!tVWgMa?J^AcmW:H*e&
%me-<=r:R\R2rFYsYQ#(=DE;_2ornDbhu:g&rpKdf")Bcr~>
%AI9_PrivateDataEnd
